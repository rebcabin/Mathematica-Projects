(* Content-type: application/vnd.wolfram.cdf.text *)

(*** Wolfram CDF File ***)
(* http://www.wolfram.com/cdf *)

(* CreatedBy='Mathematica 8.0' *)

(*************************************************************************)
(*                                                                       *)
(*  The Mathematica License under which this file was created prohibits  *)
(*  restricting third parties in receipt of this file from republishing  *)
(*  or redistributing it by any means, including but not limited to      *)
(*  rights management or terms of use, without the express consent of    *)
(*  Wolfram Research, Inc.                                               *)
(*                                                                       *)
(*************************************************************************)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       835,         17]
NotebookDataLength[   1286024,      28436]
NotebookOptionsPosition[   1265074,      27798]
NotebookOutlinePosition[   1268704,      27921]
CellTagsIndexPosition[   1267916,      27893]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\<\
Symbolically Weaving in the Cloud with Jacquard\
\>", "Title",
 CellChangeTimes->{{3.5433472697937155`*^9, 3.5433472803627725`*^9}, {
   3.543497087314685*^9, 3.54349708844191*^9}, 3.553736099422689*^9, {
   3.5538643687980814`*^9, 3.5538643805042515`*^9}}],

Cell["\<\
or \"Why Symbolic Computing Matters\"\
\>", "Title",
 CellChangeTimes->{{3.553555019113377*^9, 3.5535550446465178`*^9}, 
   3.55373607793456*^9}],

Cell["\<\
Brian Beckman, Erik Meijer
REVIEW DRAFT 13 Aug 2012\
\>", "Subtitle",
 CellChangeTimes->{{3.54334808141787*^9, 3.543348093338062*^9}, {
  3.5535435790719748`*^9, 3.5535435802143908`*^9}, {3.553868543809453*^9, 
  3.5538685543905106`*^9}}],

Cell[CellGroupData[{

Cell["INTRODUCTION AND ABSTRACT", "Section",
 CellChangeTimes->{{3.543490786086527*^9, 3.543490788989527*^9}, {
  3.5434962552207155`*^9, 3.543496256780716*^9}, {3.5537359421626368`*^9, 
  3.553735947090057*^9}}],

Cell[TextData[{
 "We show plausible application code -- counting calories -- that a web \
developer might write using Jacquard, a term-rewriting system in pure \
JavaScript that runs both in the browser and in the server. We show how \
Jacquard\[CloseCurlyQuote]s ",
 StyleBox["symbolic computing",
  FontSlant->"Italic"],
 " makes the code ",
 StyleBox["shorter",
  FontSlant->"Italic"],
 ", more ",
 StyleBox["flexible",
  FontSlant->"Italic"],
 ", more ",
 StyleBox["robust",
  FontSlant->"Italic"],
 "; easier to ",
 StyleBox["create",
  FontSlant->"Italic"],
 ", to ",
 StyleBox["understand",
  FontSlant->"Italic"],
 ", to ",
 StyleBox["modify",
  FontSlant->"Italic"],
 ", and to ",
 StyleBox["reuse",
  FontSlant->"Italic"],
 " than the equivalent computation written in ordinary JavaScript. We \
motivate ",
 ButtonBox["Wolfram Research\[CloseCurlyQuote]s ",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.wolfram.com/mathematica/"], None},
  ButtonNote->"http://www.wolfram.com/mathematica/"],
 StyleBox[ButtonBox["Mathematica",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.wolfram.com/mathematica/"], None},
  ButtonNote->"http://www.wolfram.com/mathematica/"],
  FontSlant->"Italic"],
 " [",
 ButtonBox[Cell[TextData[StyleBox[ButtonBox["1"],
  FontVariations->{"CompatibilityType"->"Superscript"}]], "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"http", ":"}], "//", 
       RowBox[{
         RowBox[{
           RowBox[{"www", ".", "wolfram", ".", "com"}], "/", "mathematica"}], 
         "/"}]}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00002765"],
 "] as an ",
 ButtonBox["Integrated Development Environment (IDE)",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://en.wikipedia.org/wiki/Integrated_development_environment"], 
    None},
  ButtonNote->
   "http://en.wikipedia.org/wiki/Integrated_development_environment"],
 " [",
 ButtonBox[Cell[TextData[StyleBox[ButtonBox["2"],
  FontVariations->{"CompatibilityType"->"Superscript"}]], "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"http", ":"}], "//", 
       RowBox[{
         RowBox[{
           RowBox[{
             RowBox[{"en", ".", "wikipedia", ".", "org"}], "/", "wiki"}], "/",
            "Integrated_development"}], "_environment"}]}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"0000381F"],
 "] for Jacquard expressions. "
}], "Text",
 CellChangeTimes->{{3.543489448856917*^9, 3.5434895271052155`*^9}, {
   3.543489558004305*^9, 3.5434896583593397`*^9}, {3.543489696785182*^9, 
   3.5434897117056737`*^9}, {3.5434898223437366`*^9, 
   3.5434898225617585`*^9}, {3.5434901071205273`*^9, 3.543490109879527*^9}, {
   3.543490314973527*^9, 3.543490324829527*^9}, {3.543497092867795*^9, 
   3.543497112720765*^9}, {3.5435005183273015`*^9, 3.5435005292383013`*^9}, {
   3.5435167922891517`*^9, 3.543516815467469*^9}, {3.543517097449665*^9, 
   3.5435171510430236`*^9}, {3.5435171907669954`*^9, 
   3.5435172204009585`*^9}, {3.5435251390440116`*^9, 
   3.5435251397480116`*^9}, {3.543543955419191*^9, 3.5435439615095396`*^9}, {
   3.553542952828911*^9, 3.5535429545262833`*^9}, {3.553543025607067*^9, 
   3.553543054635724*^9}, 3.5535431475231256`*^9, {3.553543850720503*^9, 
   3.5535438607661057`*^9}, {3.553734618369569*^9, 3.553734721514386*^9}, {
   3.5537348120730133`*^9, 3.553734845048362*^9}, {3.5537349572230053`*^9, 
   3.553734957223946*^9}, {3.553734996983789*^9, 3.553735004220722*^9}, {
   3.553735049007221*^9, 3.553735109061367*^9}, 3.553736917409227*^9, 
   3.553766665661021*^9, {3.5537676932540293`*^9, 3.5537677008692703`*^9}, {
   3.553767818292099*^9, 3.5537678231247463`*^9}, {3.553767856357368*^9, 
   3.5537678792505827`*^9}, {3.553767914899302*^9, 3.553768031142152*^9}, {
   3.553768079759573*^9, 3.553768079835754*^9}, {3.55376811092181*^9, 
   3.553768110997924*^9}, {3.553768314998106*^9, 3.5537683150742817`*^9}, {
   3.553768405446703*^9, 3.553768405567556*^9}, {3.553768444038539*^9, 
   3.553768444120682*^9}, {3.553768786348463*^9, 3.553768786426252*^9}, {
   3.553768837012477*^9, 3.5537688370846167`*^9}, {3.5537692294889708`*^9, 
   3.553769229566683*^9}, {3.553769267873508*^9, 3.553769267957082*^9}, {
   3.553769303351275*^9, 3.5537693034876833`*^9}, {3.5537694494433126`*^9, 
   3.5537694495234737`*^9}, {3.553769620895492*^9, 3.5537696209704437`*^9}, {
   3.553769906321075*^9, 3.5537699063910437`*^9}, {3.553770156667252*^9, 
   3.553770156746962*^9}, {3.553770415675831*^9, 3.553770415759657*^9}, {
   3.553770805499217*^9, 3.553770805579299*^9}, {3.553772595438017*^9, 
   3.553772595514083*^9}, {3.5537735618309507`*^9, 3.553773561974641*^9}, {
   3.5537736098230667`*^9, 3.5537736098958673`*^9}, {3.553783666533195*^9, 
   3.553783673583898*^9}, {3.553783867787415*^9, 3.553783867878215*^9}, {
   3.553799065462777*^9, 3.5537990655338984`*^9}, {3.553799108510713*^9, 
   3.553799108591894*^9}}],

Cell[TextData[{
 "Symbolic computation enables, amongst other capabilities, robust ",
 ButtonBox["units conversion",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://physics.nist.gov/Pubs/SP811/appenB.html"], None},
  ButtonNote->"http://physics.nist.gov/Pubs/SP811/appenB.html"],
 " [",
 ButtonBox[Cell[TextData[StyleBox[ButtonBox["3"],
  FontVariations->{"CompatibilityType"->"Superscript"}]], "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"http", ":"}], "//", 
       RowBox[{
         RowBox[{
           RowBox[{
             RowBox[{"physics", ".", "nist", ".", "gov"}], "/", "Pubs"}], "/",
            "SP811"}], "/", 
         RowBox[{"appenB", ".", "html"}]}]}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00003589"],
 "]. This lets our developer catch certain misleading bits of consumer \
information in a ",
 Cell[BoxData[
  FormBox[
   ButtonBox[
    RowBox[{"Nutrition", " ", "Facts", " ", "Label"}],
    BaseStyle->"Hyperlink",
    ButtonData->{
      URL[
      "http://www.fda.gov/Food/ResourcesForYou/Consumers/NFLPM/ucm274593.htm"]\
, None},
    ButtonNote->
     "http://www.fda.gov/Food/ResourcesForYou/Consumers/NFLPM/ucm274593.htm"],
    TraditionalForm]]],
 " [",
 ButtonBox[Cell[TextData[StyleBox[ButtonBox["4"],
  FontVariations->{"CompatibilityType"->"Superscript"}]], "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"http", ":"}], "//", 
       RowBox[{
         RowBox[{
           RowBox[{
             RowBox[{
               RowBox[{
                 RowBox[{"www", ".", "fda", ".", "gov"}], "/", "Food"}], "/", 
               "ResourcesForYou"}], "/", "Consumers"}], "/", "NFLPM"}], "/", 
         RowBox[{"ucm274593", ".", "htm"}]}]}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"000047E5"],
 "]. Such units conversions are not possible in JavaScript without a symbolic \
computing facility essentially equivalent to Jacquard\[CloseCurlyQuote]s \
method of ",
 ButtonBox["term rewriting",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://rewriting.loria.fr/"], None},
  ButtonNote->"http://rewriting.loria.fr/"],
 " [",
 ButtonBox[Cell[TextData[StyleBox[ButtonBox["5"],
  FontVariations->{"CompatibilityType"->"Superscript"}]], "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"http", ":"}], "//", 
       RowBox[{
         RowBox[{"rewriting", ".", "loria", ".", "fr"}], "/"}]}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00001EB5"],
 "]. We finally construct a Nutrition Facts Label on-the-fly from unit \
ingredients and a previously unknown recipe. This turns out to be a sum in a \
vector space with basis vectors spanning the Nutrition Facts Labels of \
ingredients. We demonstrate multilevel pattern-matching to make the code \
concise. We also motivate remote evaluation of expressions in this scenario: \
bringing the computation to the data can be much cheaper than bringing the \
data to the computation."
}], "Text",
 CellChangeTimes->{{3.543489448856917*^9, 3.5434895271052155`*^9}, {
   3.543489558004305*^9, 3.5434896583593397`*^9}, {3.543489696785182*^9, 
   3.5434897117056737`*^9}, {3.5434898223437366`*^9, 
   3.5434898225617585`*^9}, {3.5434901071205273`*^9, 3.543490109879527*^9}, {
   3.543490314973527*^9, 3.543490324829527*^9}, {3.543497092867795*^9, 
   3.543497112720765*^9}, {3.5435005183273015`*^9, 3.5435005292383013`*^9}, {
   3.5435167922891517`*^9, 3.543516815467469*^9}, {3.543517097449665*^9, 
   3.543517176460565*^9}, {3.543517229543873*^9, 3.54351726452137*^9}, {
   3.5435252756690116`*^9, 3.5435253084110117`*^9}, {3.5535431710808773`*^9, 
   3.553543198640067*^9}, {3.5535434304266863`*^9, 3.553543436130147*^9}, {
   3.553543497684866*^9, 3.553543497685707*^9}, {3.553733548283246*^9, 
   3.553733560598687*^9}, {3.553733708534915*^9, 3.553733725406501*^9}, {
   3.5537337643266277`*^9, 3.553733767511065*^9}, {3.553734759502413*^9, 
   3.5537347811901093`*^9}, {3.553735167269149*^9, 3.553735175844635*^9}, {
   3.553736259713982*^9, 3.553736264043817*^9}, {3.553736331402186*^9, 
   3.553736331403159*^9}, 3.553739876127345*^9, {3.55376671946626*^9, 
   3.553766736298057*^9}, {3.553766807746571*^9, 3.553766931124003*^9}, {
   3.553766961138114*^9, 3.55376703797771*^9}, {3.553767708109344*^9, 
   3.553767737127391*^9}, {3.5537680630789433`*^9, 3.553768111082312*^9}, {
   3.553768292390995*^9, 3.55376831520737*^9}, {3.553768405598393*^9, 
   3.5537684058359623`*^9}, {3.553768444125276*^9, 3.5537684442594547`*^9}, {
   3.5537687864596567`*^9, 3.55376878667752*^9}, {3.553768837121552*^9, 
   3.553768837335452*^9}, {3.5537692296026697`*^9, 3.553769229820072*^9}, {
   3.553769267993775*^9, 3.5537692682238092`*^9}, {3.55376930351723*^9, 
   3.5537693037380743`*^9}, {3.553769449556919*^9, 3.5537694497705097`*^9}, {
   3.553769621005303*^9, 3.5537696212231903`*^9}, {3.5537699064215107`*^9, 
   3.553769906645607*^9}, {3.5537701567808104`*^9, 3.553770157017332*^9}, {
   3.553770415792589*^9, 3.553770416009001*^9}, {3.553770805612237*^9, 
   3.553770805828539*^9}, {3.5537725955521584`*^9, 3.5537725957675743`*^9}, {
   3.553773562010607*^9, 3.553773562225647*^9}, {3.553773609930106*^9, 
   3.553773610145694*^9}, {3.553783666685485*^9, 3.553783673835209*^9}, {
   3.5537838679148083`*^9, 3.553783868146678*^9}, {3.553799065567356*^9, 
   3.553799065757762*^9}, {3.5537991086251*^9, 3.553799108843133*^9}, {
   3.5538642787637634`*^9, 3.553864291412763*^9}}],

Cell[TextData[{
 "We point out that symbolic computing is not exotic. Even though ordinary \
JavaScript programmers might not write symbolic-processing code every day, \
they certainly use it every day: every time they edit, compile, run, or debug \
their code. Historically, symbolic computing has been a mission-critical, if \
invisible, part of real-world, multi-billion-dollar operating system kernels \
for tasks such as ",
 ButtonBox["network and driver configuration",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.redditmirror.cc/cache/websites/web.archive.org_84624/web.\
archive.org/web/20040603192757/research.microsoft.com/research/dtg/davidhov/\
pap.htm"], None},
  ButtonNote->
   "http://www.redditmirror.cc/cache/websites/web.archive.org_84624/web.\
archive.org/web/20040603192757/research.microsoft.com/research/dtg/davidhov/\
pap.htm"],
 " [",
 ButtonBox[Cell[TextData[StyleBox[ButtonBox["6"],
  FontVariations->{"CompatibilityType"->"Superscript"}]], "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"http", ":"}], "//", 
       RowBox[{
         RowBox[{
           RowBox[{
             RowBox[{
               RowBox[{"www", ".", "redditmirror", ".", "cc"}], "/", 
               "cache"}], "/", "websites"}], "/", 
           RowBox[{"web", ".", "archive", ".", "org_"}]}], 
         RowBox[{
           RowBox[{
             RowBox[{
               RowBox[{
                 RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"84624", "/", 
                    RowBox[{"web", ".", "archive", ".", "org"}]}], "/", 
                    "web"}], "/", "20040603192757"}], "/", 
                   RowBox[{"research", ".", "microsoft", ".", "com"}]}], "/", 
                 "research"}], "/", "dtg"}], "/", "davidhov"}], "/", 
           RowBox[{"pap", ".", "htm"}]}]}]}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00009BEE"],
 "] and ",
 ButtonBox["dynamic security policy evaluation",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://secpal.codeplex.com/"], None},
  ButtonNote->"http://secpal.codeplex.com/"],
 " [",
 ButtonBox[Cell[TextData[StyleBox[ButtonBox["7"],
  FontVariations->{"CompatibilityType"->"Superscript"}]], "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"http", ":"}], "//", 
       RowBox[{
         RowBox[{"secpal", ".", "codeplex", ".", "com"}], "/"}]}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00001EF6"],
 "]."
}], "Text",
 CellChangeTimes->{{3.5537348886226187`*^9, 3.5537348912864237`*^9}, 
   3.553735136739355*^9, {3.553735206931134*^9, 3.5537353225854893`*^9}, {
   3.553735434569192*^9, 3.553735434570157*^9}, {3.5537355933069983`*^9, 
   3.553735645054634*^9}, {3.553735747521345*^9, 3.553735749049904*^9}, {
   3.553736373175392*^9, 3.5537364998880787`*^9}, {3.553736597457369*^9, 
   3.553736611993626*^9}, {3.553767053200766*^9, 3.5537670622240334`*^9}, {
   3.553767104358918*^9, 3.553767182638425*^9}, {3.553767262132924*^9, 
   3.553767369753523*^9}, {3.553767402292897*^9, 3.553767453883477*^9}, {
   3.5537674955544643`*^9, 3.5537675338738213`*^9}, {3.553768367276905*^9, 
   3.553768405917495*^9}, {3.553768444034775*^9, 3.553768469218492*^9}, {
   3.55376878670862*^9, 3.553768786791238*^9}, {3.553768837372411*^9, 
   3.553768837465869*^9}, {3.553769229868864*^9, 3.553769229966065*^9}, {
   3.55376926825883*^9, 3.553769268339921*^9}, {3.553769303774448*^9, 
   3.5537693038544683`*^9}, {3.553769449809761*^9, 3.5537694498910313`*^9}, {
   3.553769621257341*^9, 3.553769621341014*^9}, {3.553769906695822*^9, 
   3.553769906776963*^9}, {3.553770157064823*^9, 3.553770157161145*^9}, {
   3.553770416045952*^9, 3.5537704161267443`*^9}, {3.5537708058625813`*^9, 
   3.553770805928791*^9}, {3.553772595803443*^9, 3.553772595885016*^9}, {
   3.553773562259576*^9, 3.553773562340024*^9}, {3.553773610179771*^9, 
   3.553773610263681*^9}, {3.553783666968018*^9, 3.553783674001523*^9}, {
   3.553783868180879*^9, 3.553783868278667*^9}, {3.553799065789227*^9, 
   3.553799065853331*^9}, {3.553799108874247*^9, 3.553799108943721*^9}, {
   3.553864315405763*^9, 3.5538643338107634`*^9}, {3.553868732591329*^9, 
   3.5538687671287823`*^9}}],

Cell["\<\
The broader point is that symbolic computing is an under-appreciated \
technology, routinely applied \"under the radar\" for many decades but \
certainly ripe for much broader use in the mainstream of cloud programming. \
\>", "Text",
 CellChangeTimes->{{3.5537348886226187`*^9, 3.5537348912864237`*^9}, 
   3.553735136739355*^9, {3.553735206931134*^9, 3.5537353225854893`*^9}, {
   3.553735434569192*^9, 3.553735434570157*^9}, {3.5537355933069983`*^9, 
   3.553735645054634*^9}, {3.553735747521345*^9, 3.553735749049904*^9}, {
   3.553736373175392*^9, 3.5537364998880787`*^9}, {3.553736597457369*^9, 
   3.553736611993626*^9}, {3.553767053200766*^9, 3.5537670622240334`*^9}, {
   3.553767104358918*^9, 3.553767182638425*^9}, {3.553767262132924*^9, 
   3.553767369753523*^9}, {3.553767402292897*^9, 3.553767453883477*^9}, {
   3.5537674955544643`*^9, 3.5537675338738213`*^9}, {3.553767570969123*^9, 
   3.553767572616742*^9}, {3.553767606374414*^9, 3.5537676135674057`*^9}, {
   3.553864347660968*^9, 3.5538643528824897`*^9}, {3.553868799549024*^9, 
   3.553868799860055*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["ALICE CHECKS THE DATA", "Section",
 CellChangeTimes->{{3.543490767143527*^9, 3.543490795621527*^9}, {
  3.5434964074767156`*^9, 3.543496408716716*^9}, {3.5538644735705576`*^9, 
  3.5538644813203325`*^9}}],

Cell["\<\
Consider the following Nutrition Facts Label, mined at random from the web, \
which purports to record, for a hamburger patty, the nutritional component \
breakdown (fat / protein / carbs) and the calorie proportions for each \
component.\
\>", "Text",
 CellChangeTimes->{{3.5434882498291464`*^9, 3.5434882665321465`*^9}, {
  3.5434883420081463`*^9, 3.5434883520731463`*^9}, {3.5434884646111465`*^9, 
  3.5434884703941464`*^9}, {3.543488527175146*^9, 3.5434885517661467`*^9}, {
  3.543488710062146*^9, 3.5434887468841467`*^9}, {3.5434888072261467`*^9, 
  3.5434888310791464`*^9}, {3.543489097268941*^9, 3.5434890973650084`*^9}, {
  3.5434897948299856`*^9, 3.5434898056310654`*^9}, {3.5434907035145273`*^9, 
  3.543490712466527*^9}, {3.543500966970341*^9, 3.543500966971341*^9}, {
  3.5435440666025505`*^9, 3.5435440899628863`*^9}, {3.553543621719109*^9, 
  3.553543642197496*^9}, {3.5537676646161222`*^9, 3.553767680005641*^9}}],

Cell["\<\
Our developer, let\[CloseCurlyQuote]s call her Alice, wants to write some \
analytics over this data to find out if it\[CloseCurlyQuote]s accurate. Alice\
\[CloseCurlyQuote]s questions are the following:\
\>", "Text",
 CellChangeTimes->{{3.543489103009957*^9, 3.5434891146801205`*^9}, {
  3.543489808455348*^9, 3.543489813825885*^9}, {3.543489991485527*^9, 
  3.543490091457527*^9}, {3.5434907263375273`*^9, 3.543490734520527*^9}, {
  3.5434932315556417`*^9, 3.5434932436278486`*^9}, {3.543514830190962*^9, 
  3.5435148386308055`*^9}, {3.55354366136798*^9, 3.55354368172042*^9}}],

Cell[CellGroupData[{

Cell["\<\
Does the calorie total implied by the breakdown match the calorie count \
presented in the \[OpenCurlyDoubleQuote]amount per serving?\
\[CloseCurlyDoubleQuote]\
\>", "Item",
 CellChangeTimes->{{3.5435148887138133`*^9, 3.5435149285387955`*^9}, {
  3.5435442149530354`*^9, 3.5435442169761515`*^9}, {3.5535436944604197`*^9, 
  3.553543696652686*^9}, {3.553768532890092*^9, 3.5537685341203957`*^9}}],

Cell["\<\
Does the total weight implied by the breakdown match the total weight \
presented in the \[OpenCurlyDoubleQuote]serving size\[CloseCurlyDoubleQuote]?\
\>", "Item",
 CellChangeTimes->{{3.543514841366079*^9, 3.543514884248367*^9}, {
  3.553543706204752*^9, 3.5535437068184423`*^9}, {3.553768544647854*^9, 
  3.5537685610717163`*^9}}]
}, Open  ]],

Cell["\<\
Let's show what Alice might write in JavaScript, then show a Jacquard \
computation designed to produce the same result, and finally compare and \
contrast.\
\>", "Text",
 CellChangeTimes->{{3.543489103009957*^9, 3.5434891146801205`*^9}, {
  3.543489808455348*^9, 3.543489813825885*^9}, {3.543489991485527*^9, 
  3.543490091457527*^9}, {3.5434907263375273`*^9, 3.543490734520527*^9}, {
  3.5434932315556417`*^9, 3.5434932436278486`*^9}, {3.543514830190962*^9, 
  3.5435148359505377`*^9}, {3.5435442274907527`*^9, 3.543544245841802*^9}, {
  3.553737060041987*^9, 3.553737087146172*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
MQBtMa2GOEileillrav8N7WJzObNm/aRZBx4XOfzjW36coHiJIhTfoJbin5N
rp97ld3i7pQn8psVrZ/UnNmU+TV3IAq9W4kAWzZ1uBLu4nDR2w3Iq8eo3XYu
vz4+YrP7TZs37SO9er7H9dk78ez3FZc8nyJUvDndNAvP6zh1P86e2Zj9NS/U
uUI84q6YZn30fwupN+zTRFYm3bzpm/StXbdzIrw80/DB/k3hlk9LFK8ky7/i
tL22+D99pcZG94knr79xTSbBryhoZjM8sq9AJetdojgpv2AuGGGaWso3SXDe
V8SmlmYSRC9up0UbsyZh4t/I6OrVnCnmSn9NZF2W65y7XdN8lqtER6Huz9vj
8mdcHzoulOSyeocXr+rryXTzpnRXprco0BTVfkyHD/dvKrfFy+drsDCi77vv
5RxVzv9RSe4gKkE/RFqLtYTJ3hhksv6OV1FSQSnXCGEfbw6b5lu4wmuC6YUg
28dzFSFIPkq3Eak5E8TP3ULJ10TUJbzOZ652eJVyUR7XFvdq0LI3Eq5VMUn6
XJzblWkJX3rCjcITGlljpSoOyuNFXEVeuOZLiknS2QS9nMlaFBopMtncBQli
ra1PtspRvkmCUW5BAQs79ZxpFsn7mHrKulDF5NdHXs9SXbwwmatNXKVclMep
WDApuZ2EaZrji1Rc1FccZlv4WhWvXz25y4zfEUq7E2EiQTt9NsHlfK4tmu+u
WClksrkLEqQWqjhNKs230IReqOJc7msZqCt9YY+abgio61mp4szVLqm4cIff
C1/FpiGW+gLfrbT863dHtn3e1730wLPh61S83Nt+c5oX3Xtuf8kv99Dk5VRI
MOoJJ7Wgu+jlZHMXMLi2YY86SYrIl7zCXrTzPeqCiqOKEOmkXDi6ldxCZ78m
8tdyDVO42uFVykV5nIqVUnaAWqsrq/ibHN0KeyrBx4XwfiOajG4R/aD57Dga
Qz7IlG4uV7JYb1SCywe+6pNBkrWM8SXKJktfQL+A8ehWkhSZb5Lg/CXY/TeJ
IQI/bKlHTeQe130tSNg0RvWrOZMWMapxcj3zdYlvLjKn+Cployz3Z6EjdWVc
/s6r51IVN8YjfjTBzOfHne7wV8Bp1s740OLS0a2GcL+fuI8extevX5+PLsPP
wWnWSNgcTHBzvISKAfhBLG2xHszDcS94jddHeZThQvJPq8mD7UWZPElvelNJ
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
fJ6i
    "], {{0, 405}, {322, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{322, 405},
  PlotRange->{{0, 322}, {0, 405}}]], "Text",
 CellChangeTimes->{3.543521166353508*^9}],

Cell["\<\
The first step is to encode the NFL data in a JavaScript object. Alice is \
careful to keep the units of measure in comments for mental tracking and for \
informing other developers of this secret info:\
\>", "Text",
 CellChangeTimes->{{3.543490030371527*^9, 3.5434900350595274`*^9}, {
   3.5434901248565273`*^9, 3.543490130694527*^9}, 3.5434901994755273`*^9, {
   3.543491552239915*^9, 3.543491602673958*^9}, {3.543493254892975*^9, 
   3.543493256077093*^9}, {3.553737129960754*^9, 3.5537371335806293`*^9}, {
   3.553773001315814*^9, 3.553773003201996*^9}}],

Cell["\<\
var burgerNutritionFacts001 = 
{ 'Serving Size'       :   4   /* ounce */,
  'Amount per Serving' : 160   /* calorie */, 
  'Calories from Fat'  :  81.0 /* calorie */,
  'Saturated Fat'      :   4   /* gram */,
  'Cholesterol'        :  60   /* milligram */, 
  'Sodium'             :  70   /* milligram */,
  'Dietary Fiber'      :   0   /* gram */,
  'Sugars'             :   0   /* gram */,
  'Total Fat'          :   9   /* gram */,
  'Protein'            :  21   /* gram */,
  'Total Carbohydrate' :   0   /* gram */
};\
\>", "Program",
 CellChangeTimes->{{3.5434916272964196`*^9, 3.543491739185607*^9}, {
  3.5434919547047205`*^9, 3.5434919673747206`*^9}, {3.543523723133175*^9, 
  3.543523744715333*^9}}],

Cell[TextData[{
 "Alice chooses to preserve the spaces in the object keys such as \
\[OpenCurlyQuote]Serving Size\[CloseCurlyQuote] and \[OpenCurlyQuote]Total \
Fat\[CloseCurlyQuote] for direct correspondence to the data. She accepts that \
she ",
 ButtonBox["can\[CloseCurlyQuote]t later use dot notation with such keys",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://stackoverflow.com/questions/4968406/javascript-property-\
access-dot-notation-vs-brackets"], None},
  ButtonNote->
   "http://stackoverflow.com/questions/4968406/javascript-property-access-dot-\
notation-vs-brackets"],
 " [",
 ButtonBox[Cell[TextData[StyleBox[ButtonBox["8"],
  FontVariations->{"CompatibilityType"->"Superscript"}]], "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"http", ":"}], "//", 
       RowBox[{
         RowBox[{
           RowBox[{
             RowBox[{
               RowBox[{"stackoverflow", ".", "com"}], "/", "questions"}], "/",
              "4968406"}], "/", "javascript"}], "-", "property", "-", 
         "access", "-", "dot", "-", "notation", "-", "vs", "-", 
         "brackets"}]}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00004D0E"],
 "]. For uniformity of style, Alice will use only the square-bracket ",
 StyleBox["indexer",
  FontSlant->"Italic"],
 " notation everywhere. "
}], "Text",
 CellChangeTimes->CompressedData["
1:eJwdyE0og3EcwPGnsSbvdhplJS6rlYtG2VZmsa2ZejJ52YVYmmUHL2nsxmJN
KGtKbaTNzGYXIQyHldG8LRflYGH0HCxaDlj8f7/Dt099K3pNdD+LoqhyEvi0
L1gM6JmGqc58Byh30OfgalXiAuTO+ZPgBD/yBgr000VBoqXGKgJbu7NoUNp/
1gaWFVd/gyseQwY8csf6QkROYY8B3IlM5YSJ8ffDAjC9qW+sNTMNjGRGDspK
1pfAT2fKCb7GuWtNxMSGCPXVmX2g+LLLDz4IJSEwKn08AL3USQJ8GTpFeV+2
JCjT2dGF0R8GVNz9osZlcQZUpySokL3FbSbeaAOo66NDBBpVXeh2o0cL7u55
UX5l9hjIK2WjuVdhL/7bYzRmmLQqiM/XFtT6p/oD7To1mmdXsJXw75XovKD3
vYU4siNLgRrWLEdDbB+woWZT/bCWOBgVo2naNQ7qgm70H9SX6pw=
  "]],

Cell["\<\
The next step is to add up the weights of all the nutritional components. \
Alice knows that milligrams are tiny by comparison to grams, so she simply \
omits them in this first version, perhaps with a shade of concern that \
another programmer inheriting her code might erroneously put them back in. \
\>", "Text",
 CellChangeTimes->{{3.543491721303819*^9, 3.543491752385927*^9}, {
   3.543492170580721*^9, 3.543492183035721*^9}, {3.5434924053297205`*^9, 
   3.5434924221287208`*^9}, {3.5434927321687207`*^9, 3.543492771158721*^9}, {
   3.543493049858474*^9, 3.5434930863401213`*^9}, {3.5434931454870358`*^9, 
   3.5434931511746044`*^9}, {3.543493291599645*^9, 3.5434932991504*^9}, {
   3.5434946515807157`*^9, 3.5434946685387154`*^9}, {3.5435255008609047`*^9, 
   3.5435255011558456`*^9}, 3.5435443907280893`*^9, {3.553737941061749*^9, 
   3.553737996382864*^9}, {3.55373811459966*^9, 3.553738147658684*^9}, {
   3.553739066436283*^9, 3.5537390980705357`*^9}, {3.553769071404738*^9, 
   3.5537690908988047`*^9}}],

Cell["\<\
She at least takes the preventative of packaging the computation in a \
function, parameterized by the data object, for reuse on other nutrition \
blocks.\
\>", "Text",
 CellChangeTimes->{{3.543491721303819*^9, 3.543491752385927*^9}, {
   3.543492170580721*^9, 3.543492183035721*^9}, {3.5434924053297205`*^9, 
   3.5434924221287208`*^9}, {3.5434927321687207`*^9, 3.543492771158721*^9}, {
   3.543493049858474*^9, 3.5434930863401213`*^9}, {3.5434931454870358`*^9, 
   3.5434931511746044`*^9}, {3.543493291599645*^9, 3.5434932991504*^9}, {
   3.5434946515807157`*^9, 3.5434946685387154`*^9}, {3.5435255008609047`*^9, 
   3.5435255011558456`*^9}, 3.5435443907280893`*^9, {3.553737941061749*^9, 
   3.553737996382864*^9}, {3.55373811459966*^9, 3.553738147658684*^9}, {
   3.553739066436283*^9, 3.5537390980705357`*^9}, {3.5537391311067257`*^9, 
   3.553739144050207*^9}, {3.553769105246541*^9, 3.553769115258047*^9}}],

Cell["\<\
var addWeights001 = function(nutritionFacts) {
  return nutritionFacts['Total Fat'] + 
         nutritionFacts['Dietary Fiber'] + 
         nutritionFacts['Protein'] + 
         nutritionFacts['Total Carbohydrate'];
};

document.writeln(addWeights001(burgerNutritionFacts001));\
\>", "Program",
 CellChangeTimes->{{3.5434931167551627`*^9, 3.543493135093996*^9}, {
  3.5434944635407157`*^9, 3.5434944702847157`*^9}, {3.5435238226001205`*^9, 
  3.5435238337282333`*^9}}],

Cell["\<\
The result is 30. Alice knows this means grams, and she carries that mentally \
because she doesn\[CloseCurlyQuote]t have a convenient, straightforward way \
to carry it in her code. \
\>", "Text",
 CellChangeTimes->{{3.543493163175804*^9, 3.5434931676402507`*^9}, {
  3.5435256505509605`*^9, 3.543525651389793*^9}, {3.5535439746534357`*^9, 
  3.553544064186651*^9}}],

Cell[CellGroupData[{

Cell["ALICE\[CloseCurlyQuote]S DREAMS", "Subsection",
 CellChangeTimes->{{3.5435149909660378`*^9, 3.543515007606701*^9}}],

Cell["\<\
Alice takes a moment to reflect on the code she just wrote. Will it withstand \
criticism from other programmers? \
\>", "Text",
 CellChangeTimes->{{3.543515374049342*^9, 3.543515430764013*^9}, {
  3.553739325368431*^9, 3.5537394503765993`*^9}, {3.553769150673177*^9, 
  3.553769201615522*^9}}],

Cell[CellGroupData[{

Cell["Repetition Considered Harmful", "Subsubsection",
 CellChangeTimes->{{3.543493198546341*^9, 3.5434932115706434`*^9}}],

Cell[TextData[{
 ButtonBox["DRY (Don\[CloseCurlyQuote]t Repeat Yourself)",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://en.wikipedia.org/wiki/Don%27t_repeat_yourself"], None},
  ButtonNote->"http://en.wikipedia.org/wiki/Don%27t_repeat_yourself"],
 " [",
 ButtonBox[Cell[TextData[StyleBox[ButtonBox["9"],
  FontVariations->{"CompatibilityType"->"Superscript"}]], "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"http", ":"}], "//", 
       RowBox[{
         RowBox[{
           RowBox[{
             RowBox[{"en", ".", "wikipedia", ".", "org"}], "/", "wiki"}], "/",
            "Don"}], "%27", "t_repeat", "_yourself"}]}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"000033FD"],
 "] is ",
 ButtonBox["programmer mantra",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://c2.com/cgi/wiki?DontRepeatYourself"], None},
  ButtonNote->"http://c2.com/cgi/wiki?DontRepeatYourself"],
 " [",
 ButtonBox[Cell[TextData[StyleBox[ButtonBox["10"],
  FontVariations->{"CompatibilityType"->"Superscript"}]], "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"http", ":"}], "//", 
       RowBox[{
         RowBox[{
           RowBox[{"c2", ".", "com"}], "/", "cgi"}], "/", 
         RowBox[{"wiki", "?", "DontRepeatYourself"}]}]}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00002E07"],
 "] nowadays. Unecessary repetition in code just increases risk of programmer \
error.\nEven though Alice is careful to ",
 ButtonBox["align parts of the arithmetic expression vertically",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://en.wikipedia.org/wiki/Programming_style#Vertical_alignment"], 
    None},
  ButtonNote->
   "http://en.wikipedia.org/wiki/Programming_style#Vertical_alignment"],
 " [",
 ButtonBox[Cell[TextData[StyleBox[ButtonBox["11"],
  FontVariations->{"CompatibilityType"->"Superscript"}]], "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"http", ":"}], "//", 
       RowBox[{
         RowBox[{
           RowBox[{
             RowBox[{"en", ".", "wikipedia", ".", "org"}], "/", "wiki"}], "/",
            "Programming_style"}], "#", "Vertical_alignment"}]}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00003920"],
 "], the repeated name of the object parameter in every term in the sum is \
striking. This seems to be gratuitous, useless repetition. If there were \
hundreds of properties, it would be oppressive. Can she get rid of the \
repetition? Suppose she could write"
}], "Text",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQAWIQ7X5ohfa6tFeObEn9+iDaOeeZCTLdcqbaDkQfWL3b
BUQL3Z+Wsx5I31s5A0xbd3n6HgPS1ct2gGnfF9IP3KpeOdocmPAMRFd9+fMK
RKe8DHoPoo8y2v0F0SG1LmB6fe4aIXcgvefFJjDdGRdlBqKdqhPBtNj5ZaEg
uvzUWjD9R4e1DETvruUG0yqv9y0D0TtdjoFpWZa6Ng8gvSWlFUwX1fj8B9Ez
uoPBtPAHT1ZPIH2qOgBMl21OfucLpGV8vN+D6PjaLnY/IL1jwyQwPV/AtjgU
SJt9dwbTwsfnV4DoilnLwDQAcLmhOQ==
  "]],

Cell["\<\
var addWeights001 = function(nutritionFacts) {
  return nutritionFacts[
  \t'Total Fat' + 'Dietary Fiber' + 'Protein' + 'Total Carbohydrate\"];
};\
\>", "Program",
 CellChangeTimes->{{3.5434931167551627`*^9, 3.543493135093996*^9}, {
  3.5434934335578394`*^9, 3.5434934853120146`*^9}, {3.543494474716716*^9, 
  3.5434944827087154`*^9}, {3.5435155343383694`*^9, 3.5435155350094366`*^9}, {
  3.543523754596321*^9, 3.543523767305592*^9}}],

Cell[TextData[{
 "And ",
 StyleBox["why not",
  FontSlant->"Italic"],
 " have symbolic expressions inside the square brackets? The meaning is \
completely obvious. But she can\[CloseCurlyQuote]t make it work, and for \
multiple reasons."
}], "Text",
 CellChangeTimes->{{3.5434934985213356`*^9, 3.543493577188201*^9}, {
  3.543494706721716*^9, 3.5434947122487154`*^9}, {3.5434976040998683`*^9, 
  3.5434976260440626`*^9}, {3.543544506746725*^9, 3.543544508441822*^9}, {
  3.553769355804317*^9, 3.553769357364141*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Alice\[CloseCurlyQuote]s First Dream", "Subsubsection",
 CellChangeTimes->{{3.553864519372137*^9, 3.553864524539654*^9}}],

Cell["\<\
Generally, it\[CloseCurlyQuote]s a benefit to have an infix operator for \
concatenating strings. Unfortunately, JavaScript overloaded the + operator \
instead of introducing a new one, and the expression\
\>", "Text",
 CellChangeTimes->{{3.5434936760810895`*^9, 3.543493708550336*^9}, {
  3.5434937441168923`*^9, 3.5434937643189125`*^9}, {3.5434947299757156`*^9, 
  3.5434947357917156`*^9}}],

Cell["\<\
nutritionFacts[
  \t'Total Fat' + 'Dietary Fiber' + 'Protein' + 'Total Carbohydrate']\
\>", "Program",
 CellChangeTimes->{{3.5434931167551627`*^9, 3.543493135093996*^9}, {
  3.5434934335578394`*^9, 3.5434934853120146`*^9}, {3.5434937754070215`*^9, 
  3.543493809825463*^9}, {3.543523768247686*^9, 3.543523770906952*^9}, {
  3.543523840473908*^9, 3.543523842833144*^9}}],

Cell["evaluates to", "Text",
 CellChangeTimes->{{3.5434937836398444`*^9, 3.543493785655046*^9}}],

Cell["\<\
nutritionFacts['Total FatDietary FiberProteinTotal Carbohydrate'] ~~>
undefined\
\>", "Program",
 CellChangeTimes->{{3.5434931167551627`*^9, 3.543493135093996*^9}, {
  3.5434934335578394`*^9, 3.5434934853120146`*^9}, {3.5434937754070215`*^9, 
  3.543493827649245*^9}, {3.5435238461534758`*^9, 3.5435238499378543`*^9}}],

Cell["\<\
Her dream code is syntactically legal, and completely wrong. She can\
\[CloseCurlyQuote]t write this.\
\>", "Text",
 CellChangeTimes->{{3.5434938339858785`*^9, 3.5434938849307156`*^9}, {
   3.5434947455597153`*^9, 3.5434947565027156`*^9}, 3.543497644996958*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Alice Regrets Whitespace ", "Subsubsection",
 CellChangeTimes->{{3.5434937156670475`*^9, 3.543493739772458*^9}, {
  3.543501239152557*^9, 3.5435012397606173`*^9}, {3.543515029815922*^9, 
  3.5435150404019804`*^9}}],

Cell[TextData[{
 "Alice continues to dream. If she hadn\[CloseCurlyQuote]t preserved space \
characters in the keys, but gone to ",
 ButtonBox["camelBack",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://en.wikipedia.org/wiki/CamelCase"], None},
  ButtonNote->"http://en.wikipedia.org/wiki/CamelCase"],
 " [",
 ButtonBox[Cell[TextData[StyleBox[ButtonBox["12"],
  FontVariations->{"CompatibilityType"->"Superscript"}]], "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"http", ":"}], "//", 
       RowBox[{
         RowBox[{
           RowBox[{"en", ".", "wikipedia", ".", "org"}], "/", "wiki"}], "/", 
         "CamelCase"}]}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"000028BF"],
 "], she could have written"
}], "Text",
 CellChangeTimes->{{3.5434938886427155`*^9, 3.543493903709716*^9}, {
  3.5434941554607153`*^9, 3.5434941841397157`*^9}, {3.543515045809521*^9, 
  3.543515048449785*^9}, {3.5537694379136877`*^9, 3.5537694621766357`*^9}, {
  3.553769621624234*^9, 3.553769621672814*^9}, {3.55376990707895*^9, 
  3.553769907142445*^9}, {3.5537701574604177`*^9, 3.553770157510316*^9}, {
  3.553770416396463*^9, 3.553770416463921*^9}, {3.553770806232692*^9, 
  3.5537708063003063`*^9}, {3.553772596203493*^9, 3.553772596266068*^9}, {
  3.553773562644929*^9, 3.553773562706579*^9}, {3.553773610545779*^9, 
  3.553773610615225*^9}, {3.5537836674010067`*^9, 3.553783674450981*^9}, {
  3.553783868634119*^9, 3.553783868697927*^9}, {3.553799066156641*^9, 
  3.55379906620043*^9}, {3.553799109243081*^9, 3.553799109287689*^9}}],

Cell["\<\
var burgerNutritionFacts002 = 
{ ServingSize        :   4   /* ounce */,
  AmountPerServing   : 160   /* calorie */, 
  CaloriesFromFat    :  81.0 /* calorie */,
  SaturatedFat       :   4   /* gram */,
  Cholesterol        :  60   /* milligram */, 
  Sodium             :  70   /* milligram */,
  DietaryFiber       :   0   /* gram */,
  Sugars             :   0   /* gram */,
  TotalFat           :   9   /* gram */,
  Protein            :  21   /* gram */,
  TotalCarbohydrate  :   0   /* gram */
};

var addWeights002 = function(nutritionFacts) {
  return nutritionFacts.TotalFat + 
         nutritionFacts.DietaryFiber + 
         nutritionFacts.Protein + 
         nutritionFacts.TotalCarbohydrate;
};

document.writeln(addWeights002(burgerNutritionFacts002));\
\>", "Program",
 CellChangeTimes->{{3.5434931167551627`*^9, 3.543493135093996*^9}, {
  3.5434944030827155`*^9, 3.5434944559017153`*^9}, {3.5434947618477154`*^9, 
  3.5434947716457157`*^9}}],

Cell["The result is still 30. ", "Text",
 CellChangeTimes->{{3.543525884418015*^9, 3.543525890146015*^9}, {
   3.543572515696746*^9, 3.5435725441053705`*^9}, 3.5435727743295383`*^9}],

Cell["\<\
There is a cost in going to camelBack, however. There is more code to \
develop, test, build, manage, deploy, and maintain -- code that creates \
objects from strings retrieved from the internet, which must build camelBack \
symbols like \[OpenCurlyDoubleQuote]CaloriesFromFat\[CloseCurlyDoubleQuote] \
from standardized strings like \[OpenCurlyDoubleQuote]Calories from Fat.\
\[CloseCurlyDoubleQuote] Removing spaces isn\[CloseCurlyQuote]t enough: the \
internal word \[OpenCurlyDoubleQuote]from\[CloseCurlyDoubleQuote] must be \
capitalized. Her original decision to use string keys instead of camelBack \
completely avoided all that cost, but maybe it will be worth it if there is a \
way to get rid of the repetition in the object-access expression.\
\>", "Text",
 CellChangeTimes->{{3.5434947884767156`*^9, 3.5434949978827157`*^9}, {
  3.5434976617176294`*^9, 3.543497704375308*^9}, {3.5435155787558107`*^9, 
  3.5435155985187864`*^9}, {3.543572784744134*^9, 3.543572847108701*^9}, {
  3.5435728810256414`*^9, 3.5435728859399223`*^9}, {3.5435729585400743`*^9, 
  3.54357298800276*^9}, {3.553769510895152*^9, 3.5537695165917883`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Alice\[CloseCurlyQuote]s Second Dream", "Subsubsection",
 CellChangeTimes->{{3.5435011477404165`*^9, 3.5435011516198044`*^9}}],

Cell["\<\
So she imagines what she could write with the camelBack conversion. Her dream \
code would be:\
\>", "Text",
 CellChangeTimes->{{3.5434953044357157`*^9, 3.543495335905716*^9}, {
  3.543515641615096*^9, 3.5435156463425684`*^9}, {3.5435724926024246`*^9, 
  3.5435724929204426`*^9}}],

Cell["\<\
var addWeights002 = function (nutritionFacts) {
  return 
    nutritionFacts.(TotalFat + DietaryFiber + Protein + TotalCarbohydrate);
};\
\>", "Program",
 CellChangeTimes->{{3.5434953966797156`*^9, 3.5434954265817156`*^9}, {
  3.5435448161954246`*^9, 3.5435448228488054`*^9}}],

Cell["\<\
Now that\[CloseCurlyQuote]s sweet, but not syntactically legal ... unless ... \
the \[OpenCurlyDoubleQuote]with\[CloseCurlyDoubleQuote] statement!\
\>", "Text",
 CellChangeTimes->{{3.5434954106617155`*^9, 3.5434954457967157`*^9}}],

Cell["\<\
var addWeights002 = function (nutritionFacts) {
  with(nutritionFacts) {
    return TotalFat + Protein + DietaryFiber + TotalCarbohydrate;
  }
};

document.writeln(addWeights002(burgerNutritionFacts002));\
\>", "Program",
 CellChangeTimes->{{3.5434957595177155`*^9, 3.5434957729967155`*^9}}],

Cell["The result is still 30.", "Text",
 CellChangeTimes->{{3.5435259904610147`*^9, 3.5435259962840147`*^9}}],

Cell[TextData[{
 "Alas, this is not an acceptable solution. It has removed ",
 StyleBox["any",
  FontSlant->"Italic"],
 " reference to the object from the expression in the return statement, and \
thus rendered the expression fundamentally ambiguous. The value of the term ",
 StyleBox["TotalFat",
  FontSlant->"Italic"],
 " could come from the global environment, or from an outer nesting of local \
environments, or from outer ",
 StyleBox["with",
  FontSlant->"Italic"],
 " statements. There is no way to tell from local inspection of the \
expresion. This is too much exposure to scoping errors."
}], "Text",
 CellChangeTimes->{{3.5434957867317157`*^9, 3.5434958807747154`*^9}, {
  3.5434972086793303`*^9, 3.5434972248399467`*^9}, {3.5434972555860205`*^9, 
  3.5434973494864097`*^9}, {3.543515675513485*^9, 3.543515685321466*^9}, {
  3.543544866560305*^9, 3.543544930262949*^9}, {3.543572565220578*^9, 
  3.5435725675937138`*^9}}],

Cell[TextData[{
 "There has been much pain in the JavaScript community about the ",
 StyleBox["with",
  FontSlant->"Italic"],
 " statement. The ambiguity it injects outweights its superficial \
attractiveness. ",
 ButtonBox["The overall concensus is to avoid it",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://yuiblog.com/blog/2006/04/11/with-statement-considered-harmful/\
"], None},
  ButtonNote->
   "http://yuiblog.com/blog/2006/04/11/with-statement-considered-harmful/"],
 " [",
 ButtonBox[Cell[TextData[StyleBox[ButtonBox["13"],
  FontVariations->{"CompatibilityType"->"Superscript"}]], "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"http", ":"}], "//", 
       RowBox[{
         RowBox[{
           RowBox[{
             RowBox[{
               RowBox[{
                 RowBox[{
                   RowBox[{"yuiblog", ".", "com"}], "/", "blog"}], "/", 
                 "2006"}], "/", "04"}], "/", "11"}], "/", "with"}], "-", 
         "statement", "-", "considered", "-", 
         RowBox[{"harmful", "/"}]}]}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00004D81"],
 "]."
}], "Text",
 CellChangeTimes->{{3.5434957867317157`*^9, 3.5434958807747154`*^9}, {
   3.5434972086793303`*^9, 3.5434972248399467`*^9}, {3.5434972555860205`*^9, 
   3.5434973174282045`*^9}, 3.543497356830144*^9, {3.543500037704624*^9, 
   3.5435000423120847`*^9}, {3.5435449517381773`*^9, 3.54354499601971*^9}, {
   3.553769612709462*^9, 3.5537696435741034`*^9}, {3.553769907177257*^9, 
   3.553769907242676*^9}, {3.5537701575487328`*^9, 3.553770157613565*^9}, {
   3.553770416491053*^9, 3.553770416542972*^9}, {3.5537708063281193`*^9, 
   3.553770806379517*^9}, {3.553772596303822*^9, 3.553772596366391*^9}, {
   3.553773562740096*^9, 3.5537735628082848`*^9}, {3.553773610641255*^9, 
   3.5537736106939383`*^9}, {3.5537836674988413`*^9, 
   3.5537836745514593`*^9}, {3.553783868727975*^9, 3.553783868795734*^9}, {
   3.55379906624329*^9, 3.553799066308826*^9}, {3.553799109325294*^9, 
   3.553799109373021*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["EXPRESSIONS MUST STAND ALONE", "Subsection",
 CellChangeTimes->{{3.543497366719133*^9, 3.543497392160677*^9}, {
  3.5435150767796183`*^9, 3.5435150831392536`*^9}}],

Cell["\<\
Can we remove any reference to the target object from the expression and NOT \
introduce ambiguity? It seems the only way would be to treat the expression \
itself as a standalone, first-class object, reserving ANY interpretation of \
the expression until it\[CloseCurlyQuote]s used. But that\[CloseCurlyQuote]s \
what symbolic computing means!\
\>", "Text",
 CellChangeTimes->{{3.5434973973521957`*^9, 3.5434974006975307`*^9}, {
  3.5434974552429843`*^9, 3.543497462259686*^9}, {3.5435000108947043`*^9, 
  3.543500091794032*^9}, {3.5435009136689005`*^9, 3.5435009151499004`*^9}, {
  3.543501481059699*^9, 3.543501511163699*^9}, {3.543515104924432*^9, 
  3.5435151198779273`*^9}, {3.5435157076997037`*^9, 3.5435157089868326`*^9}, {
  3.543545039057172*^9, 3.543545120888852*^9}, {3.543572613579344*^9, 
  3.543572626586088*^9}, {3.55376968026943*^9, 3.5537697542981453`*^9}}],

Cell["\<\
There is no native way in JavaScript to do this. The interpretation of all \
symbols must be known prior to run time. A symbol that does not have a value \
generates a deep exception -- an unrecoverable error -- an invalid program. \
In C#, Java, C++, and most other languages, unbound symbols don\
\[CloseCurlyQuote]t even compile. \
\>", "Text",
 CellChangeTimes->{{3.5435015192416987`*^9, 3.543501647979699*^9}, {
   3.543515132326172*^9, 3.5435151380237417`*^9}, 3.5435451798132224`*^9, 
   3.5435452106529865`*^9, {3.5435726455511727`*^9, 3.543572674190811*^9}, {
   3.553544359083794*^9, 3.5535443599639683`*^9}, {3.553769773113653*^9, 
   3.553769780553657*^9}}],

Cell[TextData[{
 "There is an analogy to lazy evaluation. JavaScript eagerly interprets all \
symbols, before they\[CloseCurlyQuote]re needed. Jacquard, and term-rewriting \
systems in general, only interpret them when they\[CloseCurlyQuote]re used. \
And even then, \.08a symbol without a binding to a value is ",
 StyleBox["not",
  FontSlant->"Italic"],
 " an error, it\[CloseCurlyQuote]s just the symbol itself as a first-class, \
atomic value. An expression that does not reduce further is an expression in \
so-called ",
 ButtonBox["normal form",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://en.wikipedia.org/wiki/Normal_form_(abstract_rewriting)"], 
    None},
  ButtonNote->"http://en.wikipedia.org/wiki/Normal_form_(abstract_rewriting)"],
 " [",
 ButtonBox[Cell[TextData[StyleBox[ButtonBox["14"],
  FontVariations->{"CompatibilityType"->"Superscript"}]], "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"http", ":"}], "//", 
       RowBox[{
         RowBox[{
           RowBox[{
             RowBox[{"en", ".", "wikipedia", ".", "org"}], "/", "wiki"}], "/",
            "Normal_form"}], "_", 
         RowBox[{"(", "abstract_rewriting", ")"}]}]}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00003C7D"],
 "]."
}], "Text",
 CellChangeTimes->{{3.553555348958777*^9, 3.553555464268373*^9}, {
  3.5535555081897907`*^9, 3.5535555631783524`*^9}, {3.553769810153117*^9, 
  3.553769910463037*^9}, {3.553770157643738*^9, 3.553770157683217*^9}, {
  3.55377041658041*^9, 3.553770416625285*^9}, {3.5537708064161167`*^9, 
  3.553770806463439*^9}, {3.553772596409009*^9, 3.553772596450253*^9}, {
  3.553773562840105*^9, 3.5537735628746777`*^9}, {3.553773610730772*^9, 
  3.553773610778047*^9}, {3.553783667598316*^9, 3.553783674636878*^9}, {
  3.553783868829145*^9, 3.553783868881662*^9}, {3.553799066350876*^9, 
  3.553799066390704*^9}, {3.553799109409812*^9, 3.5537991094564743`*^9}}],

Cell[CellGroupData[{

Cell["Rewriting Alice\[CloseCurlyQuote]s Dreams", "Subsubsection",
 CellChangeTimes->{{3.5435152610840464`*^9, 3.543515265931531*^9}}],

Cell["\<\
First, we rewrite Alice\[CloseCurlyQuote]s Second Dream: the version using \
camelBack symbols for keys because it makes the code look like code instead \
of weird arithmetic on strings. Later, we show the exact same code using \
string keys with internal whitespace, allowing Alice to get rid of her \
string-to-symbol conversion code, restoring her First Dream.\
\>", "Text",
 CellChangeTimes->{{3.543501087336377*^9, 3.5435011208657293`*^9}, {
  3.5435012817628174`*^9, 3.543501353382979*^9}, {3.543501819795699*^9, 
  3.5435018306126986`*^9}, {3.5435262290330153`*^9, 3.543526231589015*^9}, {
  3.543572734860281*^9, 3.5435727349392853`*^9}, {3.5435731190892577`*^9, 
  3.543573146875847*^9}, {3.553769981878133*^9, 3.553769990052834*^9}, {
  3.553773032321484*^9, 3.553773047592753*^9}}],

Cell["\<\
In the offing, we sneak in units of measure, and conclude this dream by \
showing what might be needed in ordinary JavaScript to include such a \
facility.\
\>", "Text",
 CellChangeTimes->{{3.543501369318572*^9, 3.543501403983699*^9}, {
  3.5435018488176985`*^9, 3.5435018505446987`*^9}, {3.5435152818781257`*^9, 
  3.5435152854864864`*^9}, {3.5535445015445547`*^9, 3.553544510200267*^9}}],

Cell[TextData[{
 "Take the nutrition data and write them as ",
 StyleBox["rules",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 ". A rule is a pair of a ",
 StyleBox["pattern",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " and a ",
 StyleBox["replacement",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 ". A rule tells the evaluator \[OpenCurlyDoubleQuote]if you can match the \
left-hand side,  replace it with the right-hand side, after substituting any \
values for pattern variables.\[CloseCurlyDoubleQuote] The patterns-and-rules \
sublanguage is similar to regular expressions familiar from JavaScript, \
Python, Perl, and text editors, except that it operates over other \
expressions in the language and not just on strings. It lets the programmer \
write rules that will match whole classes of richly structured expressions. \
It allows parts of a program to rewrite other parts of a program, to be a \
\[OpenCurlyDoubleQuote]compiler,\[CloseCurlyDoubleQuote] if you like, for \
other parts of the program. It lets the programmer effortlessly create ",
 ButtonBox["embedded domain-specific languages",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://en.wikipedia.org/wiki/Domain-specific_language"], None},
  ButtonNote->"http://en.wikipedia.org/wiki/Domain-specific_language"],
 " [",
 ButtonBox[Cell[TextData[StyleBox[ButtonBox["15"],
  FontVariations->{"CompatibilityType"->"Superscript"}]], "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"http", ":"}], "//", 
       RowBox[{
         RowBox[{
           RowBox[{
             RowBox[{"en", ".", "wikipedia", ".", "org"}], "/", "wiki"}], "/",
            "Domain"}], "-", "specific_language"}]}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00003400"],
 "],  almost without being aware of it. The pattern-and-rule facility is \
extraordinarily powerful."
}], "Text",
 CellChangeTimes->{{3.543347679565689*^9, 3.543347680430775*^9}, {
   3.543356944646019*^9, 3.5433569524370193`*^9}, {3.5433570695270195`*^9, 
   3.543357171210019*^9}, {3.543500985989243*^9, 3.543501072079851*^9}, {
   3.543501865153699*^9, 3.543501897397699*^9}, {3.5435152969666348`*^9, 
   3.5435153190478425`*^9}, 3.5435262781990147`*^9, {3.5435731707952147`*^9, 
   3.5435733013366814`*^9}, 3.543573342274023*^9, {3.553544531928074*^9, 
   3.553544623827767*^9}, {3.5535446697896633`*^9, 3.5535448659618998`*^9}, {
   3.5535652385485907`*^9, 3.553565429549198*^9}, {3.553565509040647*^9, 
   3.553565556043178*^9}, {3.553627522879841*^9, 3.553627524319933*^9}, {
   3.553770025837439*^9, 3.5537700435712357`*^9}, {3.5537700937539263`*^9, 
   3.5537701611609097`*^9}, {3.553770416662644*^9, 3.5537704167329683`*^9}, {
   3.5537708064988747`*^9, 3.553770806568551*^9}, {3.5537725964885*^9, 
   3.55377259653541*^9}, {3.553773562907846*^9, 3.553773562976983*^9}, {
   3.553773610813798*^9, 3.5537736108832903`*^9}, {3.5537836676814127`*^9, 
   3.5537836747377043`*^9}, {3.553783868914554*^9, 3.553783868981228*^9}, {
   3.553799066423757*^9, 3.5537990664704847`*^9}, {3.5537991094960423`*^9, 
   3.5537991095563393`*^9}}],

Cell[TextData[{
 "A rule with only symbolic constants for patterns -- with no pattern \
variables on the left-hand side -- is equivalent to a JavaScript or JSON \
property, ",
 StyleBox["i.e.",
  FontSlant->"Italic"],
 ", key-value pair. Symbolic constants are trivial patterns that match only \
themselves.  "
}], "Text",
 CellChangeTimes->{{3.543347679565689*^9, 3.543347680430775*^9}, {
   3.543356944646019*^9, 3.5433569524370193`*^9}, {3.5433570695270195`*^9, 
   3.543357171210019*^9}, {3.543500985989243*^9, 3.543501072079851*^9}, {
   3.543501865153699*^9, 3.543501897397699*^9}, {3.5435152969666348`*^9, 
   3.5435153190478425`*^9}, 3.5435262781990147`*^9, {3.5435731707952147`*^9, 
   3.5435733013366814`*^9}, 3.543573342274023*^9, {3.553544531928074*^9, 
   3.553544623827767*^9}, {3.5535446697896633`*^9, 3.553544748578436*^9}, {
   3.553565563971002*^9, 3.553565582970561*^9}, {3.553770176031818*^9, 
   3.5537701854560738`*^9}}],

Cell[TextData[{
 "The fact that we can always represent an object as a list of rules reveals \
the deeper fact that ",
 StyleBox["objects are just functions from keys to values",
  FontSlant->"Italic"],
 ", a fact that is also obvious from realizing that objects are implemented \
as hash tables or search trees, other representations for functions from keys \
to values."
}], "Text",
 CellChangeTimes->{{3.543347679565689*^9, 3.543347680430775*^9}, {
   3.543356944646019*^9, 3.5433569524370193`*^9}, {3.5433570695270195`*^9, 
   3.543357171210019*^9}, {3.543500985989243*^9, 3.543501072079851*^9}, {
   3.543501865153699*^9, 3.543501897397699*^9}, {3.5435152969666348`*^9, 
   3.5435153190478425`*^9}, 3.5435262781990147`*^9, {3.5435731707952147`*^9, 
   3.5435733013366814`*^9}, {3.543573342274023*^9, 3.5435733471233006`*^9}, {
   3.543573382131303*^9, 3.5435734022654543`*^9}, {3.5435734737645435`*^9, 
   3.5435734910515327`*^9}, {3.5435735456896577`*^9, 
   3.5435735963545556`*^9}, {3.553565613921096*^9, 3.553565650496793*^9}, {
   3.55377023252747*^9, 3.553770243694129*^9}}],

Cell["\<\
Notice in the following that we do not comment out the units of measure: they\
\[CloseCurlyQuote]re just symbolic constants in normal form. Each line in the \
Nutrition-Fact Label is a product of a number and a constant representing a \
unit of measure.\
\>", "Text",
 CellChangeTimes->{{3.543501902446699*^9, 3.5435019888016987`*^9}, {
  3.5435153334722843`*^9, 3.5435153447274103`*^9}, {3.5435262974530153`*^9, 
  3.543526306325015*^9}, {3.5435763068145847`*^9, 3.5435763136039734`*^9}, {
  3.553565676329041*^9, 3.553565750310544*^9}}],

Cell[TextData[{
 "We use a pretty-print function from the Jacquard library to display this \
definition in an aligned grid. Notice that Jacquard and ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " do reduce the terms with zero coefficients:"
}], "Text",
 CellChangeTimes->{{3.543501902446699*^9, 3.5435019888016987`*^9}, {
  3.5435153334722843`*^9, 3.543515350519989*^9}, {3.553770269365243*^9, 
  3.553770329979642*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"jacquardEvalHeldExpression", " ", "@", "\[IndentingNewLine]", 
    RowBox[{"(", 
     RowBox[{"burgerNutritionFacts", "=", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ServingSize", "\[Rule]", 
         RowBox[{"4", " ", "ounce"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"AmountPerServing", "\[Rule]", " ", 
         RowBox[{"160", " ", "calorie"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"CaloriesFromFat", "\[Rule]", 
         RowBox[{"81.0", " ", "calorie"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"SaturatedFat", "\[Rule]", 
         RowBox[{"4", " ", "gram"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"Cholesterol", "\[Rule]", 
         RowBox[{"60", "milli", " ", "gram"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"Sodium", "\[Rule]", 
         RowBox[{"70", " ", "milli", " ", "gram"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"DietaryFiber", "\[Rule]", 
         RowBox[{"0", "gram"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"Sugars", "\[Rule]", 
         RowBox[{"0", "gram"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"TotalFat", "\[Rule]", 
         RowBox[{"9", "gram"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"Protein", "\[Rule]", 
         RowBox[{"21", "gram"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"TotalCarbohydrate", "\[Rule]", 
         RowBox[{"0", " ", "gram"}]}]}], "}"}]}], ")"}]}], 
   "\[IndentingNewLine]", ")"}], "//", "gridRules"}]], "Input",
 CellChangeTimes->{{3.5435010786895123`*^9, 3.543501079616605*^9}, 
   3.5435013631439548`*^9, {3.5435014069786987`*^9, 3.5435014546646986`*^9}, 
   3.543501993717699*^9, {3.55483745483937*^9, 3.554837493997286*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"ServingSize"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"4"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"ounce"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"AmountPerServing"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"160"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"calorie"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"CaloriesFromFat"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"81"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"calorie"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"SaturatedFat"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"4"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"gram"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"Cholesterol"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"60"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"gram"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"milli"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"Sodium"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"70"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"gram"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"milli"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"DietaryFiber"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"0"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"Sugars"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"0"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"TotalFat"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"9"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"gram"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"Protein"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"21"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"gram"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"TotalCarbohydrate"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"0"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]}
       },
       AutoDelete->False,
       FrameStyle->RGBColor[0, 0, 1],
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxBackground->{"Columns" -> {
           RGBColor[1, 0.9, 0.8], {
            RGBColor[1, 1, 0.85]}}},
       GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Grid"]}
   },
   AutoDelete->False,
   FrameStyle->RGBColor[0, 
     Rational[2, 3], 0],
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxBackground->{"Columns" -> {{
        RGBColor[0.88, 1, 0.88]}}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output"]
}, Open  ]],

Cell[TextData[{
 "Now consider the following expression. Notice that it just evaluates to \
itself, after being reordered into \[OpenCurlyDoubleQuote]canonical order.\
\[CloseCurlyDoubleQuote] This happens to be alphabetical order in this case. \
Canonical order helps to test structural equality of expressions, needed for \
pattern matching, so Jacquard and ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " always do it by default. There is no difficulty here, since the order of \
terms in a sum does not matter."
}], "Text",
 CellChangeTimes->{{3.543502078533699*^9, 3.543502089484699*^9}, {
  3.543502121515699*^9, 3.543502231861699*^9}, {3.543515752775211*^9, 
  3.543515795783511*^9}, {3.543518192076319*^9, 3.543518211446382*^9}, {
  3.543526335780015*^9, 3.543526355141015*^9}, {3.5435763376423483`*^9, 
  3.5435764004999437`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", "@", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
   "TotalFat", "+", "DietaryFiber", "+", "Protein", "+", 
    "TotalCarbohydrate"}], "\[IndentingNewLine]", ")"}]}]], "Input",
 CellChangeTimes->{{3.543502092398699*^9, 3.5435021185086985`*^9}, {
  3.5548382682016983`*^9, 3.5548382882897067`*^9}}],

Cell[BoxData[
 RowBox[{"DietaryFiber", "+", "Protein", "+", "TotalCarbohydrate", "+", 
  "TotalFat"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "What can we do with this expression? ",
 StyleBox["Apply the data to it",
  FontSlant->"Italic"],
 ", which we do with the ReplaceAll operation:"
}], "Text",
 CellChangeTimes->{{3.543502240125699*^9, 3.543502272259699*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", "@", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{"ReplaceAll", "[", 
    RowBox[{
     RowBox[{
     "TotalFat", "+", "DietaryFiber", "+", "Protein", "+", 
      "TotalCarbohydrate"}], ",", "burgerNutritionFacts"}], "]"}], 
   "\[IndentingNewLine]", ")"}]}]], "Input",
 CellChangeTimes->{{3.543502273765699*^9, 3.543502304155699*^9}, {
  3.5548382936362414`*^9, 3.5548382963525133`*^9}}],

Cell[BoxData[
 RowBox[{"30", " ", "gram"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "This means \[OpenCurlyDoubleQuote]30 times grams;\[CloseCurlyDoubleQuote] \
it\[CloseCurlyQuote]s a multiplication expression. Notice that ",
 StyleBox["gram",
  FontSlant->"Italic"],
 " gets carried along as a \
\[OpenCurlyDoubleQuote]dead\[CloseCurlyDoubleQuote] symbolic constant -- one \
in normal form, for which no further interpretation is available or desired. \
Not easy in JavaScript, but very valuable. It\[CloseCurlyQuote]s the kind of \
thing that would have saved a couple of billion dollars in the 1999 ",
 ButtonBox["crash of the Mars Climate Observer",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://en.wikipedia.org/wiki/Mars_Climate_Orbiter"], None},
  ButtonNote->"http://en.wikipedia.org/wiki/Mars_Climate_Orbiter"],
 " [",
 ButtonBox[Cell[TextData[StyleBox[ButtonBox["16"],
  FontVariations->{"CompatibilityType"->"Superscript"}]], "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"http", ":"}], "//", 
       RowBox[{
         RowBox[{
           RowBox[{
             RowBox[{"en", ".", "wikipedia", ".", "org"}], "/", "wiki"}], "/",
            "Mars_Climate"}], "_Orbiter"}]}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"000031E9"],
 "]. "
}], "Text",
 CellChangeTimes->{{3.543502309082699*^9, 3.543502336696699*^9}, {
  3.543502425108699*^9, 3.5435024843536987`*^9}, {3.543515814593392*^9, 
  3.5435158160885415`*^9}, {3.543515883931325*^9, 3.543515883931325*^9}, {
  3.543576432827792*^9, 3.5435764617804484`*^9}, {3.543576507176045*^9, 
  3.5435765080290937`*^9}, {3.553770405905808*^9, 3.553770438593606*^9}, {
  3.553770806592997*^9, 3.553770806647295*^9}, {3.55377259656592*^9, 
  3.553772596617304*^9}, {3.5537735630072813`*^9, 3.5537735630753393`*^9}, {
  3.553773610914111*^9, 3.5537736109824247`*^9}, {3.553783667781247*^9, 
  3.5537836748375*^9}, {3.553783869012581*^9, 3.553783869082385*^9}, {
  3.55379906650869*^9, 3.5537990665745*^9}, {3.553799109595336*^9, 
  3.553799109663494*^9}}],

Cell[CellGroupData[{

Cell["quote", "Subitem",
 CellChangeTimes->{{3.543502551821699*^9, 3.543502568870699*^9}, {
  3.543515893115243*^9, 3.5435158992918606`*^9}}],

Cell[TextData[{
 StyleBox["Specifically, the flight system software on the Mars Climate \
Orbiter was written to calculate thruster performance using the metric unit \
Newtons (N), while the ground crew was entering course correction and \
thruster data using the Imperial measure Pound-force (lbf). This error has \
since been known as the ",
  FontSlant->"Italic"],
 ButtonBox["metric mixup",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.wired.com/science/discoveries/news/1999/09/31631"], None},
  ButtonNote->"http://www.wired.com/science/discoveries/news/1999/09/31631"],
 StyleBox[" and has been carefully avoided in all missions since by NASA.",
  FontSlant->"Italic"]
}], "SubitemParagraph",
 CellChangeTimes->{{3.5435025632946987`*^9, 3.5435025769806986`*^9}, {
  3.543515929965928*^9, 3.543515930509982*^9}, {3.553565870687641*^9, 
  3.553565870717208*^9}}],

Cell["end quote", "Subitem",
 CellChangeTimes->{{3.543502558069699*^9, 3.5435025593416986`*^9}}]
}, Open  ]],

Cell["\<\
We can do some things to shorten this. First, we can use the shorthand infix \
operator, \[OpenCurlyDoubleQuote]/.\[CloseCurlyDoubleQuote], instead of the \
direct call to ReplaceAll:\
\>", "Text",
 CellChangeTimes->{{3.543502339696699*^9, 3.5435023777426987`*^9}, {
  3.543526467382015*^9, 3.5435264721250153`*^9}, {3.543576538224821*^9, 
  3.5435765489484344`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", "@", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
    "TotalFat", "+", "DietaryFiber", "+", "Protein", "+", 
     "TotalCarbohydrate"}], "/.", "burgerNutritionFacts"}], 
   "\[IndentingNewLine]", ")"}]}]], "Input",
 CellChangeTimes->{{3.543502391055699*^9, 3.5435023973996987`*^9}, {
  3.5548383053364115`*^9, 3.5548383083687143`*^9}}],

Cell[BoxData[
 RowBox[{"30", " ", "gram"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "This code is quite close to Alice\[CloseCurlyQuote]s Second Dream, except \
the object comes ",
 StyleBox["after",
  FontSlant->"Italic"],
 " the expression. That\[CloseCurlyQuote]s appropriate since we\
\[CloseCurlyQuote]re ",
 StyleBox["applying the object, as a collection of rules, to the expression",
  FontSlant->"Italic"],
 ". But it\[CloseCurlyQuote]s not an important limitation since we can design \
our own operators to write things in the opposite order should we prefer to \
imagine that the expression indexes the object. Let\[CloseCurlyQuote]s skip \
that dichotomy for now."
}], "Text",
 CellChangeTimes->{{3.5435024036296988`*^9, 3.543502415028699*^9}, {
  3.5435025994916987`*^9, 3.5435026732556987`*^9}, {3.5435210237518015`*^9, 
  3.5435210246058016`*^9}, {3.55359267952111*^9, 3.553592705607916*^9}, {
  3.5537706700628643`*^9, 3.5537706893148108`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["The Computation is Just Another Expression", "Subsubsection",
 CellChangeTimes->{{3.5435030757031217`*^9, 3.5435030877675343`*^9}}],

Cell["We\[CloseCurlyQuote]ve alread seen that", "Text",
 CellChangeTimes->{{3.543576578234109*^9, 3.543576582769369*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", "@", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
   "TotalFat", "+", "DietaryFiber", "+", "Protein", "+", 
    "TotalCarbohydrate"}], "\[IndentingNewLine]", ")"}]}]], "Input",
 CellChangeTimes->{{3.554838313448222*^9, 3.5548383167935567`*^9}}],

Cell[BoxData[
 RowBox[{"DietaryFiber", "+", "Protein", "+", "TotalCarbohydrate", "+", 
  "TotalFat"}]], "Output"]
}, Open  ]],

Cell["\<\
is an expression, just one that doesn\[CloseCurlyQuote]t have another value. \
But the application of rules \
\>", "Text",
 CellChangeTimes->{{3.543503115886157*^9, 3.5435031404568853`*^9}, {
  3.543576588673706*^9, 3.543576594666049*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", "@", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
    "TotalFat", "+", "DietaryFiber", "+", "Protein", "+", 
     "TotalCarbohydrate"}], "/.", "burgerNutritionFacts"}], 
   "\[IndentingNewLine]", ")"}]}]], "Input",
 CellChangeTimes->{{3.554837531569042*^9, 3.5548375481146965`*^9}}],

Cell[BoxData[
 RowBox[{"30", " ", "gram"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "is also just another expression -- this time with a reduced value revealed \
by applying the ",
 StyleBox["burgerNutritionFacts",
  FontSlant->"Italic"],
 ". If we applied a different nutrition block, say this one for a chicken \
breast:"
}], "Text",
 CellChangeTimes->{{3.543503122494478*^9, 3.5435031650823474`*^9}, {
  3.5435033422750645`*^9, 3.543503357067544*^9}, {3.543576598595274*^9, 
  3.543576609411893*^9}, {3.553592756078411*^9, 3.553592772142119*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
mlVKuQFqraBiAJpj7BcPQMUAtMhoi42UWmB0C4AW8Zq1ErYHE9weUDEAbTHb
Yt3bzrERHF4CAGiMUcVu5pYy5qzVBSoGoC3G0S2lz6YXQnEGLwEANEZoi4fV
EFAxAI0xzvoQQkpZuzdENHd8ZRLZ+1vpRXqy4CqOsBCoFNvW8jUAHpmh8o81
OJlBVhZQgheOHvBzP+pt8cbix5WvcxVvZpe+pryUDIDHJ/Y44J0TTS6K7He1
FXsao9ZCyd5xXMXxvPVoXls6kbxCxXEQcpacL2Zsi6dFX7/qbwEAdyFbSBWp
uNoQfwaebDvObLua8+6gipd1KMGzZF6/sSwBndwilFrUlUEWQhXPntacmKFi
8NDMVohoUe8wxJ/B3hBcCtuiZowdVHEgpvFj+PWiU8onGqnQ9SALQcLBNegt
gzYIVRycDJYh13rP83O39nrsqVXxYhgzM01ENBdtNUh0KVQMmoVQsa/Hs+et
7Zo89YulOe/2Kl/bop4VVfJPSqp4PQhx6Sda1KA9chUvVnCfipnorC22Ku77
/vrRrcAmxw5KBm8IaWM7j2gOGwZZYsvvAjG69QZbDJogU/EyrLWzRd1xZvvF
1hA/y25r9W71AWieqV+sdG/8W+OWVbw4YoKGwc9hfNM0LIZQAy2rGICfiNfs
aWhSW6BiAJpj7Bcz4RznuQ0i4AMTgMYYW9TcGuMTl0yoKl8fEgDwjdSo2EmY
2Wb1iYkdMzABAI/A+L64+21VzASH9zwAmmNsUQ/Aky0ALeI165xRS6l0bw+o
GIC2GFXcX+QwQn0zFQcbYZUnkO1ZQrk7YDYB9bBHkWBLzVJKmGQCDrCoZF53
H9bNnb4+rH65UGzYqOkGKk73vCvk5XDtrwpIqfiIR5FgcUd5f2qoGOxmnkE9
Oe250tdHx4Q9fLv6NiqmqnXRfcdy/fTJ/f/t7TW5lPL7MT/Okq0yh+CbKt72
KJLnLSuqTSnbQRPORkA1kyG40teH1lII1vf9reZuEY3QFfcdpIrDHaK3A8bL
uT6X59tnmIGkPV3jUSRfNx1HGT2EsDQS7GdpzV3p62NQsbXFt56BGXu3K7nv
oG0x6dInW7kcd3XDcKnojnkUWVFxnlm4KQB7IVfcHvL1oZSQku/19VHJWLVX
3HdENjFT00rATCr7VFzjUaTcoo5Hy4bwUDHYha9DaUU56uvDyljs9thTJGpO
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
AD+LGhVbQ8yctx4OFQPwgNSo2BpiN+tDu64xVAzAo1Gj4kv/rxIa74sBaJHR
FjMtufL7vEDFALTFrGItzeVyOZ/PUDEAbTGq2A1rnaFiAFpkXA1xkkoZKWWt
V3kAwMPgNcuFcRuQV49RAwAeh3HWh/kjpJPwjtGtfAeK3VuwHSNLOPJUX043
dbZZuiiNgjgVRri/ALfh9qlXOU09HPNInsB7trFPzZldid9yH7HYAzNxwZ6t
WW6EvzmM61PHhZJcVqnYb8r06+0tdbS7awu2Y+R3L/RUv1kTN3+vNOflGKHi
3fHmSQQey3Mf5sUzO5O/5Y3aysQ9aoXXrFG9lsZKuFLFn2Rh8i3YPknv08um
bJn7Xur6aBe2eOO2OUiQk/kvwjXwZIt/vcW7b0QFyTxrh9tPFSJMPWmn+1/S
noc/i9EGtyjfSnPJmL8s2+dnPd0swml3IBdbnkgUfHVTvPzHzEnreH73as6s
pkr/TGRZ5vtcqq55OvNdooNQ9fPr8ekLJiV3kzCtOa5S8bAZVPkXCbZgy/dW
e0kuGoOO7vKJ6+Nd2NZt8fz9clkcMNw9I0g5KVz4UMlqEBVheEVeiiWH2Q43
ZLThvnVJVFEulwBxG2+6Nk935Q4vEeY3grSPWwUhyL7KNwOqOROFL1Wh7Gci
yhLf5427Hd+lUpD72WKvYmuIpb5iZWLeLy7trTZfv9bDTa4nNLKEylUc5ScI
uIh85Z7PMWZRFyMMUiZLsWKkyGhLNyQKtVifYpGTdLMIk9TSDXZL+21tmEWy
HlO9rCtVTP585P1cK0twTeFuE3epFOR+KlZKuQFqra5V8aq+0mv2XV+r4uWn
J/eKChtCeXMijiSy05sRzudLtmiqXalSSntakTckii1WcR5Vnu6KCb1SxaXU
lzxQd/rKFjVtCKj7Waniwt1eU/FKDf8uvGa9r57bq3j57UjbF/zc78kmyPn1
dSqe63ZoTsuiey3tEvvhO01BSisRJi3hrBR0E3092tINjO5t3KLOoiLSJe9w
EGy7Rb2i4qQgRDw5V45uZVVo82cin5bLNSt3O75LpSB3tMVGSi12jW4RkPkn
Rrfilkr09cr1oRHNRreIdtB0dhiNITsya5XL5yzVGxXh/EWo+myQZMljeouK
0dI3MLrbyehWFhWZbhbh9CO4LXeJIYLw2rUWNZE68fssfa301ixBas7kWUxK
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
    "], {{0, 407}, {322, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{322, 407},
  PlotRange->{{0, 322}, {0, 407}}]], "Text",
 CellChangeTimes->{{3.5435211032621994`*^9, 3.543521123535227*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"jacquardEvalHeldExpression", " ", "@", " ", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{"(", 
     RowBox[{"chickenNutritionFacts", "=", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ServingSize", "\[Rule]", 
         RowBox[{"4", " ", "ounce"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"AmountPerServing", "\[Rule]", " ", 
         RowBox[{"130", " ", "calorie"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"CaloriesFromFat", "\[Rule]", 
         RowBox[{"9.0", " ", "calorie"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"SaturatedFat", "\[Rule]", 
         RowBox[{"0.4", " ", "gram"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"Cholesterol", "\[Rule]", 
         RowBox[{"68", "milli", " ", "gram"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"Sodium", "\[Rule]", 
         RowBox[{"77", " ", "milli", " ", "gram"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"DietaryFiber", "\[Rule]", 
         RowBox[{"0", "gram"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"Sugars", "\[Rule]", 
         RowBox[{"0.1", "gram"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"TotalFat", "\[Rule]", 
         RowBox[{"1", "gram"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"Protein", "\[Rule]", 
         RowBox[{"27", "gram"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"TotalCarbohydrate", "\[Rule]", 
         RowBox[{"0", " ", "gram"}]}]}], "}"}]}], ")"}], 
    "\[IndentingNewLine]", ")"}]}], "//", "gridRules"}]], "Input",
 CellChangeTimes->{{3.543503379815819*^9, 3.5435034363234687`*^9}, {
  3.5548375641202974`*^9, 3.5548375779616814`*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"ServingSize"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"4"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"ounce"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"AmountPerServing"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"130"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"calorie"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"CaloriesFromFat"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"9"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"calorie"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"SaturatedFat"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"0.4`"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"gram"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"Cholesterol"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"68"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"gram"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"milli"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"Sodium"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"77"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"gram"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"milli"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"DietaryFiber"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"0"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"Sugars"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"0.1`"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"gram"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"TotalFat"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"gram"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"Protein"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"27"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"gram"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"TotalCarbohydrate"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"0"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]}
       },
       AutoDelete->False,
       FrameStyle->RGBColor[0, 0, 1],
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxBackground->{"Columns" -> {
           RGBColor[1, 0.9, 0.8], {
            RGBColor[1, 1, 0.85]}}},
       GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Grid"]}
   },
   AutoDelete->False,
   FrameStyle->RGBColor[0, 
     Rational[2, 3], 0],
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxBackground->{"Columns" -> {{
        RGBColor[0.88, 1, 0.88]}}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output"]
}, Open  ]],

Cell["then we would get a different result:", "Text",
 CellChangeTimes->{{3.5535927875009327`*^9, 3.553592797484159*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", " ", "@", " ", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
    "TotalFat", "+", "DietaryFiber", "+", "Protein", "+", 
     "TotalCarbohydrate"}], "/.", "chickenNutritionFacts"}], 
   "\[IndentingNewLine]", ")"}]}]], "Input",
 CellChangeTimes->{{3.543503450825919*^9, 3.54350345403424*^9}, {
  3.554837599726857*^9, 3.5548376049183764`*^9}}],

Cell[BoxData[
 RowBox[{"28", " ", "gram"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "The main point here is that ",
 StyleBox["the expression for the sum of the weights ",
  FontSlant->"Italic"],
 "and",
 StyleBox[" the expression of the data object as a list of rules",
  FontSlant->"Italic"],
 " are independent, even of any parameters. We may reuse them separately and \
combine them in arbitrary ways. Alice\[CloseCurlyQuote]s original JavaScript \
code had this independence, too, but she had to package the expression in a \
function. She could not give the expression a completely independent \
existence from the data: the best she could do was parameterize the data, and \
that\[CloseCurlyQuote]s when she encountered her verbosity / repetition \
problem. Here, we don\[CloseCurlyQuote]t need a function and don\
\[CloseCurlyQuote]t need parameters. Getting rid of a function is good just \
because it shortens the code, and ",
 ButtonBox["shorter code is almost always better code",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.codinghorror.com/blog/2007/05/the-best-code-is-no-code-at-\
all.html"], None},
  ButtonNote->
   "http://www.codinghorror.com/blog/2007/05/the-best-code-is-no-code-at-all.\
html"],
 " [",
 ButtonBox[Cell[TextData[StyleBox[ButtonBox["17"],
  FontVariations->{"CompatibilityType"->"Superscript"}]], "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"http", ":"}], "//", 
       RowBox[{
         RowBox[{
           RowBox[{
             RowBox[{
               RowBox[{
                 RowBox[{"www", ".", "codinghorror", ".", "com"}], "/", 
                 "blog"}], "/", "2007"}], "/", "05"}], "/", "the"}], "-", 
         "best", "-", "code", "-", "is", "-", "no", "-", "code", "-", "at", 
         "-", 
         RowBox[{"all", ".", "html"}]}]}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"0000514D"],
 "]. "
}], "Text",
 CellChangeTimes->{{3.5435034700658426`*^9, 3.543503605208356*^9}, {
  3.5435161627222013`*^9, 3.5435161718021092`*^9}, {3.5435265512500153`*^9, 
  3.5435265807440147`*^9}, {3.543576637631507*^9, 3.5435766845221887`*^9}, {
  3.553592812590695*^9, 3.553592861931723*^9}, {3.553592899825235*^9, 
  3.5535929034896317`*^9}, {3.553770760281111*^9, 3.553770820864435*^9}, {
  3.553771691075474*^9, 3.553771766064468*^9}, {3.553772596655192*^9, 
  3.553772596699821*^9}, {3.553773563107497*^9, 3.55377356316101*^9}, {
  3.553773611008996*^9, 3.5537736110497913`*^9}, {3.553783667882361*^9, 
  3.553783674919262*^9}, {3.553783869118876*^9, 3.553783869165102*^9}, {
  3.55379906662077*^9, 3.5537990666906233`*^9}, {3.553799109693081*^9, 
  3.553799109742646*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Expressions are Values", "Subsubsection",
 CellChangeTimes->{{3.543526617445015*^9, 3.543526621141015*^9}}],

Cell["\<\
We can save the expression for the total weight in a variable\
\>", "Text",
 CellChangeTimes->{{3.543516252237152*^9, 3.5435162590138297`*^9}, {
  3.553592953864023*^9, 3.553592962598769*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", " ", "@", " ", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{"totalWeight", "=", 
    RowBox[{
    "TotalFat", "+", "DietaryFiber", "+", "Protein", "+", 
     "TotalCarbohydrate"}]}], "\[IndentingNewLine]", ")"}]}]], "Input",
 CellChangeTimes->{{3.54351626751468*^9, 3.543516270960024*^9}, {
  3.5548376429371777`*^9, 3.5548376476086454`*^9}}],

Cell[BoxData[
 RowBox[{"DietaryFiber", "+", "Protein", "+", "TotalCarbohydrate", "+", 
  "TotalFat"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "The symbol ",
 StyleBox["totalWeight",
  FontSlant->"Italic"],
 " has a value, namely the symbolic, normal-form expression we\
\[CloseCurlyQuote]ve been carrying along. Symbols can rewrite to other \
symbolic expressions; they need not reduce all the way to numbers. Let\
\[CloseCurlyQuote]s symbolically add the little milligram items to it:"
}], "Text",
 CellChangeTimes->{{3.543516276638592*^9, 3.543516327433671*^9}, {
  3.5435767009881306`*^9, 3.543576748059823*^9}, {3.553592986118806*^9, 
  3.5535929867260036`*^9}, {3.553771787231698*^9, 3.553771806622946*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", " ", "@", " ", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{"totalWeight", "+", "Cholesterol", "+", "Sodium"}], 
   "\[IndentingNewLine]", ")"}]}]], "Input",
 CellChangeTimes->{{3.543516336075535*^9, 3.543516354875415*^9}, {
  3.5548376518560696`*^9, 3.5548376544263268`*^9}}],

Cell[BoxData[
 RowBox[{"Cholesterol", "+", "DietaryFiber", "+", "Protein", "+", "Sodium", 
  "+", "TotalCarbohydrate", "+", "TotalFat"}]], "Output"]
}, Open  ]],

Cell["And apply the data again:", "Text",
 CellChangeTimes->{{3.5435162127001987`*^9, 3.5435162400049286`*^9}, {
  3.5435163873396606`*^9, 3.543516393580285*^9}, {3.5435767583454113`*^9, 
  3.5435767617456055`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", " ", "@", " ", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"totalWeight", "+", "Cholesterol", "+", "Sodium"}], "/.", 
    "burgerNutritionFacts"}], "\[IndentingNewLine]", ")"}]}]], "Input",
 CellChangeTimes->{{3.5435164035272794`*^9, 3.543516409174844*^9}, {
  3.5548376177906637`*^9, 3.554837624023287*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"30", " ", "gram"}], "+", 
  RowBox[{"130", " ", "gram", " ", "milli"}]}]], "Output"]
}, Open  ]],

Cell["\<\
We see we have incompatible units -- and, as an aside, that the evaluator \
canonically reordered \[OpenCurlyDoubleQuote]milli gram\
\[CloseCurlyDoubleQuote] to \[OpenCurlyDoubleQuote]gram milli.\
\[CloseCurlyDoubleQuote] That\[CloseCurlyQuote]s fine, since \
\[OpenCurlyDoubleQuote]gram milli\[CloseCurlyDoubleQuote] means \
\[OpenCurlyDoubleQuote]gram times milli,\[CloseCurlyDoubleQuote] and \
\[OpenCurlyDoubleQuote]times\[CloseCurlyDoubleQuote] is independent of order \
just like \[OpenCurlyDoubleQuote]plus.\[CloseCurlyDoubleQuote] \
\>", "Text",
 CellChangeTimes->{{3.5435164194298697`*^9, 3.543516479920918*^9}, {
  3.54351655814874*^9, 3.543516579301855*^9}, {3.543518359548609*^9, 
  3.5435184244016085`*^9}, {3.5435267022360153`*^9, 3.5435267157690153`*^9}, {
  3.543576770883128*^9, 3.5435768225900855`*^9}, {3.553771831094967*^9, 
  3.5537718552942333`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Without Units, Exposed to Error", "Subsection",
 CellChangeTimes->{{3.553594534072153*^9, 3.553594547831295*^9}}],

Cell["\<\
The fundamental symbolic nature of the computation has caught this units \
incompatibility for us. In Alice\[CloseCurlyQuote]s first JavaScript \
solution, should could only have caught this by manually checking the \
calculation. We could have ended up with a horribly incorrect answer -- 160 \
grams -- and had no way to track it down other than by manual labor. \
\>", "Text",
 CellChangeTimes->{{3.5435164194298697`*^9, 3.543516479920918*^9}, {
  3.54351655814874*^9, 3.543516579301855*^9}, {3.543518359548609*^9, 
  3.543518442824609*^9}, {3.543526734945015*^9, 3.5435267546070147`*^9}, {
  3.5435768543479023`*^9, 3.5435769197056403`*^9}, {3.553594177376275*^9, 
  3.5535942491941023`*^9}, {3.553771981410421*^9, 3.553771993595333*^9}}],

Cell[TextData[{
 "In fact, we should look very suspiciously at this 160. Notice that the \
original nutrition block states that 160 is the ",
 StyleBox["number of calories",
  FontSlant->"Italic"],
 " in a serving. We find later that not only is this number off by nearly a \
factor of four, but that this numerical value 160 doesn\[CloseCurlyQuote]t \
arise from plausible calculations over other data in the nutrition block. \
There is only one instance of the number 160 to be found in this sample, and \
that\[CloseCurlyQuote]s from this wildly mistaken computation of adding grams \
to milligrams. "
}], "Text",
 CellChangeTimes->{{3.5435164194298697`*^9, 3.543516479920918*^9}, {
   3.54351655814874*^9, 3.543516579301855*^9}, {3.543518359548609*^9, 
   3.543518442824609*^9}, {3.543526734945015*^9, 3.5435267546070147`*^9}, {
   3.5435768543479023`*^9, 3.543577083993037*^9}, 3.5435772872656636`*^9, {
   3.553594308368773*^9, 3.55359432193631*^9}, {3.5535944182923403`*^9, 
   3.553594479850078*^9}, {3.553772016067727*^9, 3.553772111088066*^9}}],

Cell["\<\
It's a strong hypothesis that the original authors of the nutrition block \
added up the weights and got a wrong number, then compounded the error by \
putting the wrong number in the wrong slot.\
\>", "Text",
 CellChangeTimes->{{3.5435164194298697`*^9, 3.543516479920918*^9}, {
   3.54351655814874*^9, 3.543516579301855*^9}, {3.543518359548609*^9, 
   3.543518442824609*^9}, {3.543526734945015*^9, 3.5435267546070147`*^9}, {
   3.5435768543479023`*^9, 3.543577083993037*^9}, 3.5435772872656636`*^9, {
   3.553594308368773*^9, 3.55359432193631*^9}, {3.5535944182923403`*^9, 
   3.553594479850078*^9}, {3.553772016067727*^9, 3.553772111088066*^9}}],

Cell[CellGroupData[{

Cell["Robust Unit Conversions Close the Gap", "Subsubsection",
 CellChangeTimes->{{3.55359459788586*^9, 3.553594613813306*^9}, {
  3.5535948373155823`*^9, 3.553594849843296*^9}}],

Cell["\<\
However, with symbolic computing, we can easily write some new rules to \
convert our units to compatible forms:\
\>", "Text",
 CellChangeTimes->{{3.543516510210947*^9, 3.543516549468872*^9}, {
  3.5435770896983633`*^9, 3.5435771079544077`*^9}, {3.553772123543611*^9, 
  3.55377212378356*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", " ", "@", " ", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{"unitsConversions", "=", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"milli", " ", "gram"}], "\[Rule]", 
      RowBox[{"gram", "/", "1000.0"}]}], "\[IndentingNewLine]", "}"}]}], 
   "\[IndentingNewLine]", ")"}]}]], "Input",
 CellChangeTimes->{{3.5435165846163864`*^9, 3.5435166122251472`*^9}, {
  3.554837670898974*^9, 3.5548376738742714`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"gram", " ", "milli"}], "\[Rule]", 
   RowBox[{"0.001`", " ", "gram"}]}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
applied, in series, to the expression that produces incompatible units\
\>", "Text",
 CellChangeTimes->{{3.5535949382163687`*^9, 3.553594979225127*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", " ", "@", " ", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"totalWeight", "+", "Cholesterol", "+", "Sodium"}], "/.", 
     "\[IndentingNewLine]", "burgerNutritionFacts"}], "/.", 
    "\[IndentingNewLine]", "unitsConversions"}], "\[IndentingNewLine]", 
   ")"}]}]], "Input",
 CellChangeTimes->{{3.5435166211380386`*^9, 3.5435166249344177`*^9}, {
  3.5435181388276443`*^9, 3.54351814057047*^9}, {3.554837678346719*^9, 
  3.5548376857384577`*^9}}],

Cell[BoxData[
 RowBox[{"30.13`", " ", "gram"}]], "Output"]
}, Open  ]],

Cell["produces a final, meaningful result.", "Text",
 CellChangeTimes->{{3.553594997509862*^9, 3.553595004941493*^9}}],

Cell[TextData[{
 "We see that we can easily compose ReplaceAll invocations in chains, and now \
we also see why canonicalizing is valuable. We wrote \
\[OpenCurlyDoubleQuote]milli gram\[CloseCurlyDoubleQuote] but ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " saw and matched \[OpenCurlyDoubleQuote]gram milli.\[CloseCurlyDoubleQuote] \
Without canonicalizing, our \[OpenCurlyDoubleQuote]milli gram\
\[CloseCurlyDoubleQuote] would not have matched ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s \[OpenCurlyDoubleQuote]gram milli\
\[CloseCurlyDoubleQuote] and our rule would not have applied."
}], "Text",
 CellChangeTimes->{{3.543518144392088*^9, 3.5435181862259045`*^9}, {
  3.543518231643362*^9, 3.543518354188609*^9}, {3.543518452464609*^9, 
  3.543518467256609*^9}, {3.5435267817580147`*^9, 3.5435268099160147`*^9}, {
  3.5435771329708385`*^9, 3.543577138346146*^9}, {3.553772144343444*^9, 
  3.55377216341476*^9}}],

Cell[TextData[{
 "Now that the point about canonicalization is made, we can see that our ",
 StyleBox["unitsConversions",
  FontSlant->"Italic"],
 " rules are actually more restrictive than necessary. A milli anything is \
1/1000 of the same thing; we don\[CloseCurlyQuote]t need the \
\[OpenCurlyDoubleQuote]gram\[CloseCurlyDoubleQuote] at all. Let\
\[CloseCurlyQuote]s simplify the ",
 StyleBox["unitsConvsersions",
  FontSlant->"Italic"],
 ". Giving a new value -- a new list of rules -- to the variable ",
 StyleBox["unitsConversions",
  FontSlant->"Italic"],
 " just replaces the old value of the variable. In Jacquard and ",
 StyleBox["Mathematica,",
  FontSlant->"Italic"],
 " variables\.7fare mutable."
}], "Text",
 CellChangeTimes->{{3.5435166366725917`*^9, 3.54351669586051*^9}, {
   3.543516727285652*^9, 3.543516762199143*^9}, {3.543518480718609*^9, 
   3.5435185048096085`*^9}, 3.5435772096172223`*^9, {3.553595040093977*^9, 
   3.553595140081889*^9}, {3.553772193359317*^9, 3.553772193413864*^9}, {
   3.5537722490406313`*^9, 3.553772251919767*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", " ", "@", " ", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{"unitsConversions", "=", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{"milli", "\[Rule]", 
      RowBox[{"1", "/", "1000.0"}]}], "\[IndentingNewLine]", "}"}]}], 
   "\[IndentingNewLine]", ")"}]}]], "Input",
 CellChangeTimes->{{3.5435165846163864`*^9, 3.5435166122251472`*^9}, {
  3.543516708573781*^9, 3.5435167157024937`*^9}, {3.554837697571641*^9, 
  3.554837701311015*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"milli", "\[Rule]", "0.001`"}], "}"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "Now, as with the earlier ",
 StyleBox["unitsConversion",
  FontSlant->"Italic"],
 ", we get a result in a single unit of measure in the weight dimension ",
 StyleBox["grams",
  FontSlant->"Italic"],
 "."
}], "Text",
 CellChangeTimes->{{3.543526845370015*^9, 3.543526867281015*^9}, {
  3.5435288477430153`*^9, 3.543528850790015*^9}, {3.553595175490377*^9, 
  3.553595204703589*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", " ", "@", " ", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"totalWeight", "+", "Cholesterol", "+", "Sodium"}], "/.", 
     "\[IndentingNewLine]", "burgerNutritionFacts"}], "/.", 
    "\[IndentingNewLine]", "unitsConversions"}], "\[IndentingNewLine]", 
   ")"}]}]], "Input",
 CellChangeTimes->{{3.5435166211380386`*^9, 3.5435166249344177`*^9}, {
  3.5435181246370635`*^9, 3.543518128388688*^9}, {3.5548377093478184`*^9, 
  3.554837712838167*^9}}],

Cell[BoxData[
 RowBox[{"30.13`", " ", "gram"}]], "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["ALICE FINDS A FIB", "Subsection",
 CellChangeTimes->{{3.543517950277501*^9, 3.5435179554609833`*^9}, {
  3.543519196312719*^9, 3.543519209664054*^9}, {3.543526878168015*^9, 
  3.543526882344015*^9}}],

Cell["\<\
The original data block declared that a serving size is four ounces, and we \
added the total weight from components to a little over 30 grams. This doesn\
\[CloseCurlyQuote]t seem like four ounces. Let\[CloseCurlyQuote]s add another \
rule to our units conversions to get everything into ounces.\
\>", "Text",
 CellChangeTimes->{{3.543517959212608*^9, 3.5435180260979185`*^9}, {
  3.553772273347845*^9, 3.553772275740061*^9}}],

Cell["\<\
Ask Bing how many grams there are in an ounce (as an aside, one of us wrote \
the symbolic-processing software that Bing uses to answer such questions -- \
that software is a spiritual ancestor of Jacquard)\
\>", "Text",
 CellChangeTimes->{{3.5435186087466087`*^9, 3.543518612400609*^9}, {
  3.543518651390609*^9, 3.543518768808609*^9}, {3.5435192274328303`*^9, 
  3.5435192325213394`*^9}, {3.543526904088015*^9, 3.543526912391015*^9}, {
  3.5435773366774898`*^9, 3.543577385203265*^9}, {3.5535952367918367`*^9, 
  3.553595238870264*^9}, {3.553595276493532*^9, 3.553595276612694*^9}, {
  3.553772291491144*^9, 3.5537722949552393`*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsvQecFFW+9+37Pp/3fZ577wbXHNfsSAZRd/eum+66u9e99y5776pIdggq
oICAoIhIUswiYlxFTGBgCYKKAZk8TAImMDnHjjPdE3qme0I/51RVV1c4VV3V
09PdM/P7+nforjp1zv+cOlX16/85VXXV/OX/M/9/nXXWWZf8P2ed9TvygX7+
8pskGAwGg8FgMNjwsrc/PQqDwWAwGAwGG162+ImdMBgMBoPBYLDhZY9vfx8G
g8FgMBgMNrzssRffg8FgMBgMBoPBYDAYDAaDwWBDaszQ3EeVfr+z8GXJkpez
XX6/35Z9UJLsYIrT7688rhfle6/Q5vcXfz6IOOHndX6/K+W92IcrwzKuifx1
H2mtoq13vFinieKi+tRDCdLq6DofaR+GviD2/lIfDrEw3jfFMcgZ7SSx9TD+
fKNnHuZxF/Hq6BwdkepO7DOt0Xw+r4vcgSM9DKN27MNgME3b8PIHatuRQwRb
/R7Jkj2V/uLKenLG2BFcSA9hW84hZg6Cvc9JuMPaCULa4XqqYd4fRA6xNeo/
qwW0lsdb9VV+kp4gcYk7jQ9m/8aXHeKv3eRyKV2+h7tW7hiqQk36pvKE2yOx
9TD+fKNnHtkZbEiqE+LoiFR3OsRLuA1qZ0LnM3RH6Ag79mGwEWRK6UWOVlfK
YbJQIifel381lI95i7mGGaxxP9LDPP3GvvrUT6Xz0gvKCDuNc1VzuhQdO44k
XGV9sbI/kF1QXxxjD+PPt8FLOAPVCXV0RKo7QcLBYDC2bdzxIcuSSvx+e87n
wtcj9X5n0Ss7Pk91+kuOCGle4SJ1e3dIvwoEN/ygyO73l+TQv8pVBu0I1TCp
HwSyOkIdC2b1QTBn0TFieyuDAxvS5fJVrtScQOY6VQjUQivDkMaVGGwoVfPS
z9I8JW4Y9lBoqIg7T/e4vzJJOwHnfA57L7Bdov64Uo+wuoTOKlkr8Z+DPUFj
1ytbz3h9aTtLak3zpP1fZy/IG4qruOhVcPNI7AuSm2z/csdmqtxDdv/Xa97o
+abRUcne5PdX8GDR6+0hjVZHcdBFvDohjw5D3cm4P4rlynzUDSvdpyRlBE6h
6sMwvBaGwWCRsc07P2LaJ1V+f1Uy//nVXBf/WbpQmcDvSvuQ2/ZDek6w5x4W
P7NXGbQv6oXN5VlxJdKz/SdBB4TPmo7xqwLJuJwVGWpWoeQLqT+Sr0ZMkYO0
UvRrcolkbTgeKr2iGQotMHjneR8C7akyriymh7ouBVdJk+mskrWSZqE6rWfM
Dqe18n6qdkpr0au6XZ0ul6URG43mSdMMdl8EfCMbBgrifSOZSz3UPzB1Wj4K
vmn2Cv6zZFu93m70oAv0BNNmrjraR0fo7mSyW8qWG29Y+fE1mFOo8jA0dzKB
wWCRtq2v7mHblw3+1jOv08+H01v9pV9qL3w1uZScYPMOy7b1N3xKPnx0xi5f
9XqeW1hl0GhW7vSPVFmxvnL+EGe49Mrl8s+cfUqv+Hxi7SqIH8I32lbklCgr
V2hGoehBecjlr1rFbRUB5wWvAihyk3sV9F/bJWaX4FtDZ5W0lbQK1Ws903tK
UrR0f+n3E6Eskr60qkFSqYjsi4BvNEMxH6G3yz3U6//s5o2Sb9q9QtmwOr3d
eKcNu0YGqxNsVY2jI2R3MuMPE2MNy+4AYZxCVYeh9HCDwWDRtydf28u2Pdyl
Zw/5nFIqfJAsDK7d+yR/utij2JYc3ZIP4ip1Yn0T0yuy0v8a3JYiLOeuAp8x
M9epAq2+X7mhSXuDE66fsV1NKR2kh+q6R9R5iR0JXEpETyTOS7/quKTTJfR6
i7QgjUJ1Ws9UBatTxM/2vCPk82fV9Fr5BjNDeVMHPrjTv6RX/89k+3SQ+0L0
7Qj36ylQQc6xoIfK6kv6f6jmHXLfQnXU4Cq9djZmewLtH52mFreSHR2hulM4
3TJopht28KdQvcMQBoPFwLa98bGGfZHR6i87+vG2o+TcVfymzsKjDcwfiDTZ
x8UOvzvjY0m26iX6RjPn0tMNuTyD+bC/vnnSLf4o3qdc3rCPmblOFQK1Vi00
Zallmm7orDLmoaIp5HlGwnml7av2B/yUFiT5quOSugPIdrHGKllB7EL1Ws9o
1bi2qk6VbE4zpPXle7tuPyHJHCe/oLWgiYlXtGi6rZjhoPZF0DdaU+6DUKLU
Q+3+r9u8UfFNr6PK92mI49GA0bLknWEImjrU0RGqO4XXLaUFmWrYQZ9CdQ9D
GAwWA3vmrU+17B81fsepr/5+yu2vSZMuJF9lC79uJBeCzE9YmXxSQg7/8q8l
S3QSM01Mr8hK66tOMppV4z+YmRv2ilbflP/SDdtK/v7WV5ltfml7PvNWWvkg
PVQ3snpJeM5r5CNxRuK8tC46LtEPch9ku1hjlawgjUJ1Ws/oblLuHf4QCOy7
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
aoq5hWUVZPPaUpoJl0PgL/eB37C6OvWg9Y0Zrc//yrX1RvumqY5tP2t74dfN
7z1QeTq9tKqutLKujHOAFsHlST9U1ZRUCZ+pV1yJZ4hjgksk8zpxLXWGX0VS
8kVXCI6VcRXkq1YaWBh0m08pX1ISaARSHPkg3YoYqfUZWhxNQ9unKtgy5GtF
dV11XV1DQ31TYz35W1vfUF3bUNdQ30y+1tPlzc31hJq6uqameuZuGiITJWhR
JAwSDgAAokl/Z6vr44csa69sXnhWBI1k2H5oo7QgcnqPznUk3iyaV2R9E/WG
1MYtzbz0HirhiJEPRMJl5tdW1dZX1NSXV9eV19AP1XWczmhsaGpqbOJUSF1D
Y01dY3VdQ009/drYRFaRfxrqiDipa+C2pRtqWnVteV0zyb8691jDNztqP9lg
fX+1bd/62uPvVJ0+UVHbVF7bQGSPmL5SvjmfOedVfQP1ijjQSFwiS4jnxIgP
5GsjXU69qq2vF2qk45K2SYqjuXHZ0s98ceRvTX09La2JuNLALRdagKwi6Um7
lVXX5Z2pSc+vOp5X9UVG1SffVx9Iqfo6q/LrExXHsiu+yqz6KrMiI78yu7CG
JGDupiEyont5eUz+FldW81/DNkg4AACIJt2lx7sy3rU99Jvmu6633DPFMneS
Ze5Ey4IJloXjub9qG9/CLbcuGUPMsngs/cD/XXaD9cEbrMvHWe6/yrHpNk/W
PpK5WBA5vUfnOhJvFs0rsr5RSaYyqYS7LDH17mdO5Z6hwqyqtqGGU0hEC1XV
NpZWNRSV1xWW1eWeqUvJq/k2u/ZIRu3h9JqvTtSm5FXnFVUXlNUXldeXVBK5
RYRcY31jU2090VSN1bXcX5VVUVHUUF3fVNXQUlBjba0saK0uLa5z0K1qG6pq
GhibcFnVUtFIvaqsbSTFFVXUny6tI7Lzu5zaQ6kVh1LKD6aUH06r/D63Nqeo
Nr+07kxFA0lGtuW3qmE5o2OkKeoCjVBcQeuYX1p7Ir/yu5yaz9MqSVmk0K8y
K9NP154qoWtJGtoCZJP6hvLqhuKKhtTTte9+Vbz27ZMznsm7bX3Oz1ZnjV2S
+au1GYnbcx58Pf/eHadXvJE/+/mcVW/mbnwvf94LJ5m7aVgYJBwAAESTgYpv
+l+6tzvxlp6FP+9Z8K89C3/Rs/iWniW39Cz+Wc8SpXmXcsuX3uJdMdX7EGcr
b/Q9NNVH/j48hdqayb6Hp3ofmeJ9dKz/41V9pw+KBZHTe8wvMaPciCpTmyjh
LpiT8tP5qYkv5ecUNdQ2NlUTtdPQXFffVFTe8GlK/aa9pYtfzf3r1uzfPJLz
rw9nTV1xgthND2XduPzEL1Zn//Hx3L9sPrlge+Gmj87s/br4ZCHZ1FJT30yu
6jV1zTX1TTUkN/JXag2NtQ3NNZyR4irrLVX1Vn4J0XXCVtIP3Ofquubahqa6
RurVR99VPfFB6cIdBf+xMfcXq7OIM7xL1KsVJ25emXXb+tw7tp1e+tqZpz4u
O5haXVbdQPKvrefy5/2RZq62hsbqetIItDiixD47Xv34e2fmv3TqL5vzSAvc
FGgB8vfmh7JuXZP9+8dy5rxQsP69og+/rSiqaKqoaXj3aOV9rxSRFhuzOOOK
+Wm8Tr54bupFc5Ivmpe6bndRWU3juvfP5Jc1HkqrXPb66cU7Ty199TRzNw0L
g4QDAIBo4nj4z5bpE4lZ5/7MOucm6/wbrQtupH/nT7UukNjCm6z33mxd9DPr
fbfYHrjJ9uBU2wNTrEsn2xZPsi2ZaHtwgm3ZBNuDE20PTLStGG97eLx12VW2
VWMdW34vFkRO7zG/xIxyYwoVXsJdKMyFS73r6ZPZhfU2m6W6ruGz5KoVb565
fUPO5GUnrrsv/cqFdKT1YjpxLvX82SnnBezCualk+aX3pF25IO26e9MmP5j+
u0ez792R/8G3ZcWVjRaLpaGpharBppb6gNU1NDdZWspqmg+kNez8vGrPsaqD
aXUffFu5++vyb3ObahubG5tb6hqbhcSNvMxrtlks1fUt+1JqV7x15t835E5Z
duLae9OJ7LwskXp1IadCz+eMfCBOkoWXzU+7amHaDfen37Qia9qW3M0fnfn2
VEtjC8mJuES9qpd4JbXq+ubGlpbmlpa0/IbNe0qJSrwxWFwaLY4UNJsaKetC
rizSepfPT024P33Sgxl/WJ9DWnIyd6vIBXPEZPSekUvm0ZtHyCaPv19c39yy
+aMi4sarh8ve/abiu9zahTtP66nK+DZIOAAAiCYtd06wzruF6DfL3JsCsu0m
agunCn8X3Wy99xYi6lpmj2+eeV3LnJ+2zLmM/LUuuN62mCi3G23LJ1upfptE
JdyKCbbV46yrx9oenmglH5ZfLRZETu8xv8SMciNaSG1CFI6TPUSBzN9ekFnY
+OF3FXOfP3nTQyeuXpRBlp8zI+nsu5N+fHfST+5OPn92MpFqNy7P/Nmq7F+s
zp66IuvqRennzEz50d1J/3JX0o+mJ5HPRNf9NDH1phUZf3sy9+WDlYXlTTZb
S32zra7J0tBsJQqqttFqd9gLKpvX7C6esvzEjctP/HrNiSnL0n+1NuvZzyrq
mqwWm62+yUoSk88NTeSbpbSmZdfRitnPnbyZepV+/uzU82al/GQm71jyT2Yk
Xz4/bczijCnLMicvyyQ6iiilc2Ymn313MnH7nJlJJDERdQn3p926Nmfxzvz9
afV1zXar1ULyr2+x8V41ch8aOD9bWx15pS2bPiz5/brshMUZVLLOSiEZktxI
iefNSiY+TFqWcfPKrAkPnrhiQdoFs1N+ND35B3cdP3dmMknJF3cO/ZxMGvBi
TiGThefO4v8mEcn3yK5im82WW9JEissuaSqrtZCKphY0MnfTsDBIOAAAiCbW
e35unXOzZe7NQf1GZJug34jdbJk3uWXm9ZZFN9oe+Xfn0zPats9vfWVx28vz
HU/cbn3gJsuiq61LEmzLJtuWTbI9NN768DhOwo23kQ8PT7CtmSQWRE7vMb/E
jHJraLaoTYzCXTA7mUiRPz2eO397/r8+fILIjx9OTz5/VvK5s5LJ2jFLMv5r
8+mH3ip57rOyXV9XfppUcyCtjti+5Nr3vql8+UDZI7uKiGCbsiyD5EZkHtmQ
yCoirojCWbA9/7OkaiKNbHYHkUlNLXYi54hGKqxsWfp64bkzk/7pb8dJ4v//
f76/amHakx+Xk5RE4DVRQWWz2hxWm/2bnIYHXyskupEIpB/elURcJe5dODf1
yoXpv1uXvfiVgs17St/6onzPsWri2CfHaz78rur1wxUbPyyd/xKpS/YVC4jk
Szl3NhVUP7jz+MVzk299JHfDB2WZRU02u7PJYm9stjVb7MRIoS1We7PVcTCt
dt6L+USn/eCuJFLoRXOJ7iLtk/qbR3MXvVL81CcVu45WfZJU/Y+U2o+P15DP
L/6jnHj4pw15Vy1MJymJZruEi8tdwg1SX5aYev39GZOXnbjlocxfrMqYsuLE
Lx/OemFfSVubkxhRbm2tTrvdQYrucDmZu2lYGCQcAABEE+ucW6yifptP9ZuF
E3IWTsVZ7plAxJvj8TtcH2725OzzNRT2tVn7ezr73Nbu00fcnz7jfHaGdeVU
y9IbiH6zSfQb+Uvl3JpxYkHk9B7zS8woN6JV1MZLODrMN4eOk/50ftrZM6j6
uvSeFG50NflnKzOXvFa041DlV9lNpbV2V1ur19PW3Ums1dPRSj74PK3dHY7a
Rsv3ebXvfFWx6u9Fv300m2R13uxkIl3OnUXjcreuyd6+v7yizup0Ookka2gh
+ThLaqyr3y65PDGVlHLlwrTzZiVNWpb58qEq4pXDScSe3eGwExX38fHav249
RXTUj6Yn8WOmRCKOW5I257lTT+4t/yy5Jr+CJHX2dDq9xJMu6hhxqaerlSix
7OKmj47VPPFh6X9vzb32XrrhJXTMN5UIuUvmpc3fXvhtbj0phZTUbKHijeTT
ZHW+923N7x/LPntGEhFjxD2iwchWv12Xs/79kn0p9XllJFVbT2cbKYJU39tF
inO5XaQ6liOZ9cSlPz2eR5wkcvFi+rQ94VaRf9+Q+9rhyo++q9xzrHLX19Xv
f1uVUVhvI+Va7RYbEY32FvrBwdxHw8Yg4QAAIIpQ/baAC7vNFwdPbxJU3D03
Wpf93PXR2l5rNZ94ILCV+KGv3d5+8Hnr+l9aV421Edkm6LdxltXjbGvH2tbf
IBZEJ8rE/BIzuq3FyjAhCjc7KDa4iW1EgKVce1/69GdOvXu0sqbJQbRKu7uV
SI4WIjOsRHgEjf9qtTta21p7PG2NFvu+5NoFLxdcfz8Xj5pHZGHqD+86fsWC
tE0flpTVWlrbnCQTkltpre2ht4ov5dTO5fNTiW4kzry4v5KsbW0lSs9hszs+
Tar7xWqqpi7ixnlJyivmp/7X5twX9pWcKm3qbG/t6mizO51E/IieSF0iirGr
s63V6Ug9Xb/h/TO3rs2+mIs3EpfOn51yzqykO57MJTKPeE5kI4H8/Uda482r
aBDyknto9Oz8WUTNpt797On9aQ12J9FsrSQhX5xYFlecnTQOEXJE4n6T25T4
UsE1i6hi5GcYnjsr5XePZu9PqXG7SA4u3u02F2lPp9qYu2lYmDEJV7It4ayz
EraVRO4kBqICdhwAcQc3WsoyouWW3dr57bskzUBvr5+XbQOidiMfOfroqu6T
x2zrbuPFG72XgQi5R8bZ14+xPTZWTE9O7zG/xIxyI5JGbYKEm8PdLDmPv1uB
jpxed1/6I7tLSmrtHe0uIoWsdifRaA5nm7OVbWQVMZLMZm8jEqWm0fbMZ1UT
HsgkEojkfHkinRhGPmz+qLimye5qayPZltfZV/695FKqcOhMtp/MSBq/NOOl
A1VEwbW1kUxcqQWWvz2Vf87MJP4uAOLYNYvS73ulILu4ud1NkrQFvGI7xrtE
crPanCQ9yfTzzMa/bj1Jhdmc5Mu4OCGp+INvFpfU0Gq62pwZhQ23b8wjxV3A
xSQvmEOjcHc+fSqvzO52t/HtwGfLLI4IMIvNSUQaqf7a3UU0CEmkIBeLO3tG
8s0rs4i6Iw4TKcjl08psSeZuGhYGCTeiwY4DIO7gZr4F71+wLOBCcItubkkc
2/nV2wO93gFetvX3dmcfbHv7AfsTf7Bv/M/Wv6/pOr57wNdD1gz09w/093Xn
fWldOcaycqx11XjrI2Ntj42htl4m4WJ+iRnlRpSD2kQJR3QLH4Ujds296c9+
VlHT1Op2u51trjaXq7XN5aTCyuVyuduIkYVtbfwSGk7ilhPjPpCv7o52t93p
evdo5dQVmdywLA3xnT87+aqFaR8ca7Q52ru73JUNjjW7lBJu+4EqZ6vL7XbZ
Wzue2Vd9KVWVdDyXn1S26u3i2ibikbvd3c4X3cY5xjsgOim6xC/hFtJNSM6p
Jfa/PnWaH1Hl3kmRfP39GYfS6/p73BUNrVs/rrw8MY2svZiLRp59d/IfH8/N
LbW4XO1k81YuW5q52BSSv9yHNrLK0er2dLrKai13PZ1/CZ0ZmMLXkSi6hS8X
VjU4vB43JwKF3Hg/Azkz9tFwMUg4AACIJvL7T+mHlvk3WuZNan17lY8bPx0Y
6O911Lt2P2Rf+xvrAxMt919jue8667IptrW3Ol+601uVwwfm+jxu14GttvXj
rWuvs60XQnD2x8aIBZHTe8wvMaPcmDEfSRQulRvySyaSY+27ZRX1zp4uIpOo
YHNJzO1qd1Fzu1TL3YHlbXSbdk9nu93RumVPWcL96efMpAKG6CWS+e/W5R47
2Tww0FVe51zzbumliannCBIuedyS9Jf2VzqpBGrPKWmZ/dzpH0w/Lsi/WSm/
eyzr8In6AW8n8UrtgzvkEios27u6OnYcouFBUtNLuEeRENvwYTnJM7fU+pfN
py6YnXwBEV3zUkmJ192XuunDM12d7Z3t7VyhjPzFv2JxRGKS9ESZfZzSMHnZ
CW4KH1XI/H2syQVOX3enk8pKQfsp/NSKc8a/QcIBAEA0kQyeTuVmwd1kSZxi
XTTFU5TW3+cbGBjobW1ufWuJZfG4lkXXWh+YYHtosm3FFNsD4y0PXtuy5DLH
C3f1VBf4uVict6XS/vjNtoevtG8Yb3t0jG39GPsmWRQu5peYUW5tfABNbqKE
u4R71hnRM79dl5Ne7Oj2dLrdJEG7uz0coyLO3U7Ez6kK25wXCs7nRBF/X8A5
M5K2fVLR5emoanQ+vItKOGkUbsehamebu9/XeSCt/nePZpOF/EDkeTNTlv/9
TGm9w9PVQaN05l2iWsnd7ulqP3ay5T82njz77iT+lg0i2GY8d6qsoe3bPOv4
BzLoQ9vmCCG4P6zP/TK7sbOTSL/2NrehQvlS+L+l9a7/efL0+dwjRGggbmbS
+bOT3/2uweki+XEi0M1uumFqJiXcgWlnCagEHZfmLPVqlfzj8pAs0NSHNCFd
Hsw5kEpS1rQDqm1YXoilSDYV17I84JYpMmcXk7DtgHR7YcNAOYHFmo6FU015
Zppeymum1wKha2m4MfU8Ydaf0fxm3ZY6qm4NWdH4IQJijqjfLFwsriVxasv8
qbYnbvc2Vw8QYdbX2537ZcvCq61LJ1mJclsxybZsIn1+yKoJ1jUTbI/e2HLv
xe1fvNLv7aHRuh6P9Y1Z1kcTbOsSrOvHOjaNbd0yXiyInN5jfokZ5UYFg8rE
2xk40ZJ09cK0pz6psDo7erq7XK6O9o7OjrCsvYPIng6iAEk+rx2uHLckjXs8
WuoldFZY0szn8otrnM0296p3Si4JDqQen/BA5s7DNW2ujoG+7je/qp2y/MT5
s5Iv5qJw58xM3vZpha2VaJwON8k9DJeErTryKhxzXyw4d1ZwePfPG7PySlu+
ONF47b1p3KS7lMsSU354V9L0p08XVDvaaSuImxuqOPdfZ3VTx5LXiq9YkErD
evek8PeoPr+/osnu6vZ0udzsDJm7aViYGQk3bZr0KqySaSqEi6niCi1cbnX1
UzBlwrZt0xSZKguT56SEIYfUa9U+cF6ytRE7J3lBCQkJkqW6jpmuplxYKVYy
d5ykkua2DKsxjbaY2LoGJJxOWYz1kv3G3FpH8wIw9Ej1m3XBTS33TLHcN9X5
xv29tho/DcE1tX+y1Xr/WOvyibblnH4jH1byzw8Zb10z0bLsSte7y3wtlQNU
wnU5v9pm3TjF8ci1ji0THFvHtm2SSbiYX2JGu7GiRuJDRS5LpPeNjn8g89CJ
Fpe70+Ppam/v7OzsEq1D8tmIUTXS3jHQ2/1lVuPv12UTDUbvSphLbyL49SPZ
3+S1ONo6Hn6nVDEXbufhalK6z9vz0sHqcUvpg4Uv4V4JQeTli/srqIDjdI5m
obr+kLVdnV0F1c6FOwovmCMMpJIifvNIVkZh03e5TWOXZF7EDa1enkgfPPLf
W0/lljk6aKZdOoWqCqJJyYfyxvb7dp65Yn4qd3MElXAXzkl+6WCVxeHu9njc
7YwMSVHhhT3jwUxIuLNUMiJwKRREheTKKFsiC2iJ11S2wJPCFHsMN4Svcp/E
JQoloPBDwwttBSdsp5YQCnmjzEzTsbCqqZkZy1tDLaBgMI3JzkuzexiUcDo7
TtV4irSqGDBEHIgl/OAp/zg4C/08wfbAZNd7j/Q5mwf8fm9dftvri6wPjrc+
ONG6jJNwq4h+o/csUBW3ZoJl+XWtO2f0lKWSrAa83V1fvWHffLNz3TWtWyba
to61b5ENpMb8EjPKjRnzGbuEGzqcSx8E9+PpSbesyjpeaCVCgkq4zs6OLmqc
8BFM+lX8zCdTpuzsbO/o9Hq70oqsf3vq1I/vTuLF2PmzUyYvy9yf3uhq73xk
d+llkoFUPgpHlnd3d28/WE1vaOXuOyBb/WRG8ksHqtycfOPEFNsT5lfBQ24r
QlFN66KXi84PROGIYJu64kRyoT27rPXnq7OIyqKC9p7UH08//suHc/alNfl6
urpoa3Ro1VfhSTtXDvn/dFXrnzfmcTel0vAj+XDhnJSPkpvaqSSkjcN2PtzI
Z8zNjITTGg1lagjptVSiOuhifuRRsrGG/lDlK78+i0sYm6tH3dTbyrKXZxRK
wbFGb+USTksjMIYDTVYzEIQzNCKo1kJGxZ+uz6ayCtk9jEg4rbJ0oqVau0J/
iByAIScQhZvasmCq9b4bacBt6ZS2d1f3OhrpRDhblfvDtZbFNxAJR/SbdRX3
8N5V4sN7J1oeuNL190Rf/SkahfN2t3+50/7MzdZ119ieGOfYOs6+WXY7Q8wv
MaPdOhmmiMLdsvJEVnFLd7enp6eb6LjO7i5iXd0eT7eHyCrygf/KG/ns4Vbx
yfiv/Cq60EOEjKe3tye31DLzmbwf3U1V4sVz6U0NRJvtS23q6PSseVd2RypZ
/uqRandnV4+358WDVeMfyBSjcJyEq6QyjIhLj0ftiZaTwQQeupakKalrve+V
ovO4sWN6B+6clEnLThzPtzbaXbNfOEVfLTGbPgmESM0rF6at211KSuvp8XR4
qNbqUtXXIym9i6t1R1eXr7fb3dG1+9v6GxZn/HB6Ev984PNmJd+4PCuv3Onv
97o6qUr2SJqR95N4yNxNQ2ZdnBkNMOpbuLczSJZoyCil7OA/0k/k8iku0LsE
q9bpX+v1B/9CbSvVkjpOMVfJctKcWKfhmOlq6o8cansWsgUYm4bbmFqNw1xs
bC6cwU1DVsGEAAZgSAgOpN43xfbAZOv9E61LJzu2z+q11/npTQq9nvRPLfdd
S9+CunoCP35qe1iQcLY1k6zLL+r48pkBr5ck7u3utO1/xPbUJMem6+1PjicS
jphYEJVwUbmOxJtF94qsZ10sfr46iwgMIlcuS0z7wZ3HiaL7MqeZiCtvD6fA
OGXiCagj6Vel8UiWdHGhqIG+nq/zmv64IZtosEs4CUcE2y/XZH2XZ3F3eNbu
Zki4dg0Jt/1gFRdI89D/xELlbghOqpzh/aH/dntK69z3vXLmvNnJQQn34Ikv
sy0DA97Xv6i7nBv35F5bn0Jc+sXq7M9PNJNCvVRcdenVnWpL2mZEwnm93acq
Xbc9lss/pOUy7rF4P12Q+viH5VZHB2kTLs4pz4H339PN3E1DBB/369IIXZq1
6Eg4UR8JCk6MhOhGRExqG/WtFqqxP13VEZ6sVOWkMa9OO/BmWqnK89TVJGFL
uME2Zsg1MZZwCMOB2EH12/ybLPdPsS2ZZF0ymZhl8QTL0hu8lTl+7nG+vsYS
25O3W1eNsxLltmYiffPpwzT+Rj7Y193Q8uK/dZYdpxkNDPR12J0v/dG24RrH
k+PsW8banxzreG6CWBA5vUfnOhJvFj90s5jzfN5196adyz304+y7k65ZlPb8
/jKHq72/z9vZ1c1pIkIPZ4HPnh5GRj0eLkmPsAlN00NyGOj3vflV7bgl6bwu
upiLbs18Lv9MbavD1bn2XelA6nFOwtVwApLOhZsgl3Av7q8k3YOKME+34ENP
j8Q3zjG+dLJc9JFP6enxcMvJipK69nt3Fp83O0kcSJ28LOtQZovf319a71pA
p8mlEIFHlC35QOz363O/z7eQBunr9RLZSSrV1UUELs2QU1/UH9JUxDMiPkkR
vb09mSWOOS8UXcK9C4x7KRi9aeL2Dblnatp8Xs4dsZW4hgp4K3E7Koi6lxm6
NGsRkHChR8r8gehbiTiAymu3bbpjWua0DUNcmVQdgobTGdo1PJCqGnPWdiw8
CafKLbR+MpPt4BtTo7Ky9NKBVP15d/p9T3cgFfE2EG/Qp4jcR5TbJN5sSydb
iYS7P6H9wNN9bRai4Qb6ensqsu3P/FfL0ssty66k8bdVY60PXWNd9VPrxl91
nTzS7yOX6d7+ni5P1seOrZPsT1xj3zKeqDjHsxPscgkXnetIvFn0rseh8LDs
w2P1NyzO/Oc7j/90Pv+m1OTb1mcX1bYSuUIlXA+PlzP1ZwnCYmEVr6zIl+pm
96JXzpw3Uwh5XTaf3pH67L5qT4+vwdrx6O4yxVy4V4/UUh3kZUi47QerqfLh
MhcK8nol/kgcI8u9Us/oX24juqK03r1o55nzxSgcNxfui6yWgYF+UuMTpY47
njp1zowk+jKvBWncY+KS/7Qh762vamtbOvwDveRnTX8vzYfzpJtvo/4+H1k+
0Oe1tXZ8ltp4x7bT/KNaSO2IkPvR9OO/XZfzRZaFpOz19YjNGvBZ9JZ+YO6m
ITL+X4/YPwZHJCRcyPnqYvqEBNk23H2b2uGQMCScJLlizpjR0BZ3363OZd/Y
7Qx6E+iVk9nMVZOhIdUzFZlZmZZwg2tMZWY63UOuQRUNamSmnLKjKW52kLUW
7mcAscZ6/xROuXH6jRdyD060PXSjddUUz6lvBuizQvpIMm/N6Y6vdra9utCy
6dctT9zaun2m67N13SVpAz3dJAVJ4Gsqad1+u33LGNumGxxPjbc/O8Hx3ARF
FC4615F4I5pX5BDX6x6GNdg67ngq7+y7jweeXUZvH9i0p8Lp9vj9vW4a9KLC
R05QeUiXeXmF5PXSkJynu89HBdaz+6rGLM7g301AxBL5cOvanKR8O+kStS3t
694LRuHOnkHnyO08Utvl6SZ5qCXcjs9ruTl6VDpJSpX+5UWQl9dwQZd4rRdQ
fqX17YteKb5AIuFueijrqxwLfUC1h9Y2qcA298UCIsB+cCdplhT+PVmTH8xY
+lrxB983ZBbbK5tcba52kmevr5dkSVqp3tqeU+b4OKlh7a6SW9dkX8DdE0H+
/sudx4kU/OvW04cyW7h68S3XLWs1mQz1MnfTUBnfNYLh00FlFxEJx37QBWMD
ZVxOcwAwmCKcgVTWkJkh1RHaJ0lNNGprYNBT5pjpKBw7O50HoAxuIDXsxgyV
m2IMW7qGe3yNQbcZu0OSmr2zEJkDsYSINxp5WyroN9uySdZlky33jWl97T5v
Yym9SaG3h381an+Px1dT1Hnyi468w96KXJ+jUczE11jiem+R/YnrbZvG2J8a
R8Xb8xPs6ihcVK4jcWexLj/oiLdHbV5f94G0+ptXZHIvERAkzbilGW9+Vefu
6vYP9AaiXoqYm1ce6Qri8dC/ZMOOrp7PUptuXpl19t1czvPos92umJ/6ztd1
TndXf39vo10RhUsevzTz1cM1XV00b7WEe/lQDe0lXOyLUbAYxpLEtALCiC7q
5oJwRFeWNbjvVUbhiISzkj7e3unhAmW+UxXOte+W3rwq69J7Un5w1/HzZ1Px
SVTfhAfS//vJUyvfLnnlYMW739Z/+H3ze981vHqkdv0HZdOfPT11eeYFs5LP
mSHcgnrlwvRfP5K9/M3i1CJHf6/PwzdNtzQ0KBovQxk7aGgtGKdUOhSGRUjC
+ZUXS60HrCrDJXoXU/MjjDIpINw1YWjCld4yTddEPaB+tK8yCx3HwhlIVQgT
7ZDSIG5nGHxjqj3R9ji4mmZi1m0Tj/aFfAMxh85/C+q3KdYHx1kWX+N8IbG3
pcbPv/90QPJuezlkeX+X21ue4XpvoW3txY4nJ9ifHMcH3+zPjHe8MNHx0kQx
MTm9R+c6EncW6/IljngZ5vW5O73bPqu+YXE60R4Xz025mD7tNmXCAxk7Pq+x
tVI55e/39vloHlQF8qEsr48zbn91k4VeTlv1+HzegT5ff7/X0tr1wfGmW1ae
oI9fo3cxpBANduXCtDW7Sq2t7QMDJM/eFmfnuvfKJFE4OpD62pFaj4eqGSLh
FLczvPx5DT8YKnQRMegmicP5hP+4tT7OaBWFRT6fj8izimbXfa8VnScfSD2a
ayE9mpvL5u329Ph7va0dXYeyWua/XDhhWeYVC1L4W0qJHP3h9CSiRYnDlyWm
XbUw9aqFaZeRfObQRwHzjwvmlfCFc5InPnjinaO1XSQ3fy83E5G2lq9H8M3L
C0rBfNQ5+kFjNw2RiVHVYLwyfDMm4UYLYU6ewpwrAIBhbJx+o7ZsMtVvS662
P3O7ty6ffzUDSdDntnmyD/RUZvsctX3ttr7ONmpum89Z72s43fn9Tufzv7Gv
v9rx1GQ6/+15Gnkj4o38tb8wwbFjklgQOb1H5zoSbxbVK7KuscNWXNPbXd3b
Pq2+7t40fnr/JfPovLirF6YuffVMdqmzo7M7oDK8vZwKkhJYQtd6uulIYHFd
62Pv0Vejcq9eFV4Pes2itGVvFlucXf19vUQpkZ7V7Oh6dHfw0b4/nnF84oM0
+sdLnRcPVE2QP9p3x6FaT3c3L958GgQ0nC/gkU9QRlTDCVG48ibXva+eOX9W
knQglZNw/URuccn5iXNUkTrcnmMFtnW7i257LCfh/owr5qcSV8mGfJxNME62
XZ5IP/AvXb2IPjsl5apFRLKWna5y0RFUsZ+LvokeenkPBa2pFWAcUryBv4Mx
SDgJRp6Tpk6jczcBAAAosS2ZbOPHT5dPti65zvHsf3rKT9DIW38/DbL5vJ3f
v2Ndfq1l9diWN+50HVzf+f0bHcfecu9/omX3XPvmSfbHr7FvHevYysXfnp8o
xN9enmjfPtFGPjwvj8JF5ToSbxY/qKa0yea2uTq6PzjWePPKrAtmJ1/EqTga
kZuXOnV55qPvFqUV2hwuoq08RGL09vb6RD3iJfqNKo+ubh/J4USJbcve8l8/
knvpPF680fl1582iMb2nP6u0uzx9nEDiA1NqCUeSvfElN+GNk3Dj1RJOGIbU
qYt2JWUSrug8uYT7ipNwRFuK6XmNRdQpaR13p6fR3plZ7CRNtHlP5cIdhdO2
nrp948l/f+Ik+fu3p04tea3o0ffK7ng6/7r7Mi6YzbUeZz+dn3rLyhM7D9e2
uj2BtvbyKjEeEH9CKYOCYRkkHEdwJC7kPHczU9EAAECJbelk+s7TlVMti652
Pndnd1U2HTsNhOC6Uj+2rp5iWzPB9tgY+/qxtsfGcn/H2B8fyz/2zU7+bhnr
2Dae12/cLLiJxOjtDC9OdO6cLBZEo3BRuY7Em8UPWpErXlEM9Pd293hTCu33
7Sy6ZlEakUxEipw/J4UoumsWpU5dceLOp/O3fFz6WWp9apH9ZKWjsMZVUO3K
KbWnFNoOZjQ/82nZzOfzf746+1oayqMPmrtwDn2u2mWJqTOfPfVFVou7o8ff
38uHxDzdXtLDLM6u9R+UEZFz/hw6xnrurKQpyzP/frSuu9tLROKOz2smLaOv
u7p8fuqliannz0p+5XBNN73bwKdfF506kr99vt6KFveSN85cxL1F69J7iNzi
o3A20us9XBROQT89FvqI0fihp8fh7m62e+osXTUtHVUt7eRvraWz2dFpbe1q
sHV9kdMy54V84jAfgSTq9LxZyWMWp2/8qNzp9gSDhXGGMigYlkHCcajuMzWS
GvINAGAeqt+WT7StmGJZmuDev41OZOrr6/f1kFWd37xteXiqdfVY+2Njbetv
sD92g/WR622PX2/flGDbmODYMsaxdax9M9Fvgflvz463PTvesWOS44UJ9ucn
OHdOcrwiG0iNznUk3ix+YOu6Xh+Nqvl8RBzRJ2YM9JY3uvckNc/fXjhleQZR
OGfPSP6XO5P+9/98f87MpITFab9ck/WnDXn/ufnkX7ac/q8tp/+8Me+PG/J+
9UjO2CVEgyX/0x3H/+nO42fPSLp4LtUtM57N3/1dQ0m9y0cf/tzXIzQH0Yq+
AX9/o61j2Rv0tgJ62+bslP/9t+NXL0p76UCVp9tHxN62T6uuWphOlORPZib/
ZEby/zvt2LP7qnvELFTwA7riZ/6fXklCHxcxJBKurLF91gsF//t/6L2iPyb5
z0i+7t60Q5kW8tOly9Ojypbmy+tx8pV7qEg/Nw9UYf289fX6SAM+94/KcUsy
uEfh0Xd1/Wj68RsWp794oKqjq4ek8IqVUHjIfYmmqo8skHAAABBNqH6jEu5G
y+Kr2g9tE5e709+3bPildfnVtsfHCyG4dWNsT4x1bhnfumU8//5TB9FvT4+n
+u1ZOn5KZ8G9Msnx4kT7SxMdnH5TSLhYX2FGO0xdx0mfoIojiagUIUKu3v3R
8ca1u0r/9tTJf12TOWZxxuWJqUTw/K+/fn/Wf3wn2H8SO0Y//OXYD++ir5FK
uD/jllUn/rr11Kq3S3d/W3+qspWIMbL3+cwDwoqXi33W1q6nPq24ZeWJWx46
8dt1OTc9dOL2jbnvf19P1hIh9PbR+tsey5m6IvNXa7N/tSZ78rJMkiE/Dsms
Cy+HpJXyKebtCXK1t7al89Hd5TeuyLh1beYvH876xcOZf9mcm5TPReG6lTn3
ivnwWo7ejkD893l6vILRWzm8ZDtiXXQqIGnAAXdH98uHqq9ZlH4efccrfZPX
T2Yk3bTixNd5FqJC+/p6+eFUhYe9ymmGwwxIOAAAiCa2h6bYHpxkXTnJsvxa
x1N/6vjqdU/uVx2HX7Zs/E3Lqmvs68cR8WYl4m3dmNYN3JjpFqLixtm3jHFw
8Tc7P2b6wgT7y9wtDLx+20HE20THK5Odr04VCzIShQNDSy/D+nr7iKrp6+sT
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
VNNNIZEKAAAAAMCbx/8Bn9U6qw==
    "], {{0, 282}, {833, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{833, 282},
  PlotRange->{{0, 833}, {0, 282}}]], "Text",
 CellChangeTimes->{3.5435268943760147`*^9}],

Cell[TextData[{
 "Now capture this in our ",
 StyleBox["unitsConversions ",
  FontSlant->"Italic"],
 "rule block:"
}], "Text",
 CellChangeTimes->{{3.543518777823609*^9, 3.5435187910386086`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", " ", "@", " ", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{"unitsConversions", "=", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"milli", "\[Rule]", 
       RowBox[{"1", "/", "1000.0"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"gram", "\[Rule]", 
       RowBox[{"ounce", "/", "28.35"}]}]}], "\[IndentingNewLine]", "}"}]}], 
   "\[IndentingNewLine]", ")"}]}]], "Input",
 CellChangeTimes->{{3.543518028164712*^9, 3.543518041545374*^9}, {
  3.5435180910734205`*^9, 3.543518105352992*^9}, {3.554837719334817*^9, 
  3.5548377224601297`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"milli", "\[Rule]", "0.001`"}], ",", 
   RowBox[{"gram", "\[Rule]", 
    RowBox[{"0.03527336860670194`", " ", "ounce"}]}]}], "}"}]], "Output"]
}, Open  ]],

Cell["and apply it to the data again", "Text",
 CellChangeTimes->{{3.543577413153864*^9, 3.543577425881592*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", " ", "@", " ", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{"totalOunces", "=", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"totalWeight", "+", "Cholesterol", "+", "Sodium"}], "/.", 
      "\[IndentingNewLine]", "burgerNutritionFacts"}], "/.", 
     "\[IndentingNewLine]", "unitsConversions"}]}], "\[IndentingNewLine]", 
   ")"}]}]], "Input",
 CellChangeTimes->{{3.5435166211380386`*^9, 3.5435166249344177`*^9}, {
   3.5435191814482327`*^9, 3.543519183703458*^9}, {3.5435208521108017`*^9, 
   3.5435208585348015`*^9}, 3.543521015703802*^9, {3.554837731673051*^9, 
   3.5548377349723806`*^9}}],

Cell[BoxData[
 RowBox[{"1.0627865961199294`", " ", "ounce"}]], "Output"]
}, Open  ]],

Cell["\<\
Whoa! The NFL reports that a serving size is 4 ounces, but adding up the \
weights of the ingredients yields only 1 ounce. So, even if we believed the \
reported 160 calories in the NFL, could that be for 1 ounce? If so, the real \
calories for 4 ounces would be over 600. \
\>", "Text",
 CellChangeTimes->{{3.543518521357609*^9, 3.5435185900246086`*^9}, {
   3.5535953304370127`*^9, 3.553595333530757*^9}, 3.553595392170847*^9, {
   3.553595699256315*^9, 3.553595951760886*^9}, {3.553627557610653*^9, 
   3.553627584529002*^9}, 3.553772329731883*^9}],

Cell[TextData[{
 "There is certainly strong incentive to fib, here. No one wants to eat a \
1-ounce burger patty, so maybe just report a reasonable size like 4 ounces. \
That's rather standard for a serving of meat, no? But no one will eat a \
600-calorie burger patty, so let's just report the calories for 1 ounce. It ",
 StyleBox["could",
  FontSlant->"Italic"],
 " be the result of a cascade of honest mistakes, and we've certainly seen \
that they're all-too-easy without symbolic computing. But it's perhaps even \
more plausible that there is some willful malfeasance going on. "
}], "Text",
 CellChangeTimes->{{3.543518521357609*^9, 3.5435185900246086`*^9}, {
   3.5535953304370127`*^9, 3.553595333530757*^9}, 3.553595392170847*^9, {
   3.553595699256315*^9, 3.553595951760886*^9}, {3.553627557610653*^9, 
   3.553627584529002*^9}, {3.553772329731883*^9, 3.5537724123444147`*^9}}],

Cell["\<\
Let\[CloseCurlyQuote]s check the calories in detail. The NFL reports 81.0 \
calories from fat in a serving, but it incorrectly reports that a serving has \
9 grams of fat; it should be closer to 36 grams. Does the advertised \
\[OpenCurlyDoubleQuote]81 calories\[CloseCurlyDoubleQuote] pertain to the \
advertized serving of four ounces or to the implied serving of one ounce?\
\>", "Text",
 CellChangeTimes->{{3.543518521357609*^9, 3.5435185900246086`*^9}, {
   3.5535953304370127`*^9, 3.553595333530757*^9}, 3.553595392170847*^9, {
   3.553595699256315*^9, 3.5535957173902187`*^9}, {3.553595964262035*^9, 
   3.553595995830583*^9}}],

Cell["Let's ask Bing how many calories there are in a gram of fat:", "Text",
 CellChangeTimes->{{3.5435188603876085`*^9, 3.5435189159126816`*^9}, {
  3.543519262043291*^9, 3.543519287195806*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
phbUVNbUV9TUl1fXVVTXIymvqi+rrC+trCutrD9TVVeGpLquvKYOJSivri+r
qi9FUsn9raor5U5WVKHb68uxEk6D+Jc74G+srU0/aH9tevuzv/Rsu8G5eYpr
+087nvtV6zv3V5/OLK9pKK9uqOAMwFlwOvFBTV1ZjXCMreJyPIMME0xCyhuk
q9gY/hJKyWddJRhWwRWQL1q5eDJiNp9SfqZMdALKDh2QdyFBpT6Ds8NpsH9q
Ip5BH6tqG2obGpqaGluaG9Hf+sam2vqmhqbGVvSxEZ9vbW1EqGtoaGlptFCJ
lkUiqCWxECB4AAAAEE/0d7d7PlppW3dF68KzYihIYeehTWRGqHuPzziSbBLP
EVlDUBVIfMO4jF2afcndmOAhQQeI4GUX1tfUN1bVNVbWNlTW4YPaBo6FNDe1
tDS3cByloam5rqG5tqGprhF/bG5Bl9A/TQ2IujQ0cffiG5lSW1/Z0Ir01+Yf
a/p6Z/3HG+3vrnHs21B//K2a0yeq6lsq65sQKZLSV8tv55VzVjU2YauQAc3I
JHQGWY4E2YA+NuPz2Kr6xkahRBomsYXIDmvj1OJjPjv0t66xEefWgkxp4s4L
HkCXUHrkt4rahoIzdZmFNccLaj7Pqvn4u9oDaTVf5VR/daLqWG7Vl9k1X2ZX
ZRVW5xbXoQQWKtGyIFbMk2f0t7S6lv9oWYDgAQAAQDwRKD/uy3rbsfLXrXde
Z7t7sm3ORNucCbYF420Lx3F/1TKujTtvXzIaiW3xGHzA/112vf2B6+3Lx9ru
u9K1+VZ/zj6kXMoIde/xGUeSTeI5ImsIqgJMyUwKSfAunZd+11On8s9g2lZT
31TH8SfElGrqm8trmkoqG4orGvLPNKQV1H2TW38kq/5wZt2XJ+rTCmoLSmqL
KhpLKhvLqhEZQzSvubG5pb4RMa7m2nrur0pqMGVqqm1sqWlqK6qzt1cXtdeW
lza48F31TTV1TZRbOFX1mFJiq6rrm1F2JVWNp8sbECn9Nq/+UHrVobTKg2mV
hzOqv8uvzyupLyxvOFPVhJKhe/m76mjGaAhyRYPohNIqXMbC8voThdXf5tV9
llGN8kKZfpldnXm6/lQZvorSYA+gWxqbKmubSqua0k/Xv/1l6bo3T05/quDW
DXk/XZMzZkn2L9dlzduR98CrhffsPL3itcJZz+atfj1/0zuFc587aaESk0SA
4AEAAEA8MVD1df8L9wTm3dyz8Gc9C/6tZ+HPexbf3LPk5p7FP+1ZopTgUu78
0puDK6YEV3Ky6obQyikh9PfByVjWTgo9OCX40OTgw2PCH63uO31Qygh17wkf
YkayoCpArMysSATv/NlpP5mfPu+FwrySpvrmllrEhZpaGxpbSiqbPklr3Pxh
+eKX8/+6LffXD+X924M5U1acQHLjypwblp/4+ZrcPzya/5ctJxfsKN78wZkP
vyo9WYxutdU1tqIxv66hta6xpQ5pQ39JaWqub2qt4wRlV91oq2m082cQ6xPu
Ig+449qG1vqmloZmbNUH39Y89l75wp1Ff96U//M1OcgY3iRs1YoTN63KuXVD
/u3bTy995cwTH1UcTK+tqG1C+usbOf28PaRytTQ11zYiJ+DsEE/79Hjto++c
mf/Cqb9sKUAeuFH0APp708qcW9bm/u6RvNnPFW14p+T9b6pKqlqq6prePlp9
70slyGOjF2ddPj+DZ9EXzUm/cHbqhXPT1+8pqahrXv/umcKK5kMZ1ctePb14
16mlL5+2UIlJIkDwAAAAIJ5wPfgn27QJSOxzfmqffaN9/g32BTfgv/On2BcQ
svBG+z032Rf91H7vzY77b3Q8MMVx/2T70kmOxRMdSyY4HhjvWDbe8cAEx/0T
HCvGOR4cZ192pWP1GNfW30kZoe494UPMSBZUBVp0hSE8wbtAWIOXfueTJ3OL
Gx0OW21D06epNSteP3PbxrxJy05ce2/mFQvxHO5FeMFe+nmz0s4V5YI56ej8
JXdnXLEg49p7MiY9kPnbh3Pv2Vn43jcVpdXNNputqaUNc8WWtkZRGppaW2xt
FXWtBzKadn1Ws/dYzcGMhve+qd7zVeU3+S31za3NrW0Nza1C4maeBLY6bLba
xrZ9afUr3jjzHxvzJy87cc09mYiUXjoPW3UBx1HP4wQdICPRyUvnZ1y5MOP6
+zJvXJEzdWv+lg/OfHOqrbkNaUImYasaCatIqW1sbW5ra21ryyhs2rK3HHHI
GyLZZeDsUEazsKC8LuDyQt67bH76qPsyJz6Q9fsNeciTk7gNLOfPlpLhnSwX
z8VbWtAtj75b2tjatuWDEmTGy4cr3v666tv8+oW7TluoxCQRIHgAAAAQT7Td
Md4+92bE7mxzbhRJ3Y1YFk4R/i66yX7PzYjytc0a1zrj2rbZP2mbfSn6a19w
nWMx4nU3OJZPsmN2NxETvBXjHWvG2teMcTw4wY4Oll8lZYS694QPMSNZUBUg
LmRWhAgeR4oQP5m/oyi7uPn9b6vmPHvyxpUnrlqUhc6fMz3l7LtSfnhXyo/u
Sj1vVioicjcsz/7p6tyfr8mdsiLnqkWZ58xI+8FdKf96Z8oPpqWgY8T6fjIv
/cYVWX97PP/Fg9XFlS0OR1tjq6OhxdbUakf8qr7Z7nQ5i6pb1+4pnbz8xA3L
T/xq7YnJyzJ/uS7n6U+rGlrsNoejscWOEqPjphb0yVZe17b7aNWsZ07ehK3K
PG9W+rkz0340gzcs9UfTUy+bnzF6cdbkZdmTlmUjloV41DkzUs++KxWZfc6M
FJQYUb5R92Xcsi5v8a7C/RmNDa1Ou92G9De2OXirmrmDJs7O9nZXQXnb5vfL
frc+d9TiLExoZ6YhhUgbyvHcmanIhonLsm5alTP+gROXL8g4f1baD6alfu/O
4z+ekYpS8tmdg49TkQMv4vgzOvnjmfzfFEQIH9pd6nA48staUHa5ZS0V9TZU
0PSiZguVmCQCBA8AAADiCfvdP7PPvsk256YIu0OkTmB3SG6yzZ3UNuM626Ib
HA/9h/vJ6R075re/tLjjxfmux26z33+jbdFV9iWjHMsmOZZNdKwcZ39wLEfw
xjnQwYPjHWsnShmh7j3hQ8xIFlQFTa02syJF8M6flYqIyh8fzZ+/o/DfHjyB
yMn3p6WeNzP1xzNT0dXRS7L+a8vplW+UPfNpxe6vqj9JqTuQ0YBkX2r9O19X
v3ig4qHdJYjOTV6WhbQhEohuRKQLUS/EfxbsKPw0pRYRJ4fThUhUS5sTkT3E
oIqr25a+WvzjGSn//LfjKPH//Z/vrlyY8fhHlSglon8tmG457A6X3eH8Oq/p
gVeKEatE9On7d6YgU5F5F8xJv2Jh5m/X5y5+qWjL3vI3Pq/ce6wWGfbx8br3
v6159XDVpvfL57+AypJ7+QJECNN+PAvTre/dcfyiOam3PJS/8b2K7JIWh9Pd
YnM2tzpabU4kKNM2u7PV7jqYUT/3+ULE4r53ZwrK9MI5iJUh/6T/+uH8RS+V
PvFx1e6jNR+n1P4jrf6j43Xo+Pl/VCIL/7ix4MqFmSglYnQXczG9i7np70vn
pV93X9akZSduXpn989VZk1ec+MWDOc/tK+vocCNBvK6j3e10ulDWXR63hUpM
EgGCBwAAAPGEffbNdondzcfszsbRPBvH8Wx3j0fUzvXo7Z73t/jz9oWaivs6
7P093X1ee+D0Ee8nT7mfnm5fNcW29HrE7hwEu0N/MdlbO1bKCHXvCR9iRrLg
KkAUxaTwBA9PIM7GM7A/mZ9x9nTMzS65O42bt0396arsJa+U7DxU/WVuS3m9
09PRHvR3BLqRtPu72tFByN8e6HLVN9u+K6h/68uq1X8v+c3DuUjVubNSEbH5
8Uwc07tlbe6O/ZVVDXa3240IW1Mb0uMuq7OvebPssnnpKJcrFmacOzNl4rLs
Fw/VIKtcbkQFnS6XE3G8j47X/3XbKcSyfjAthZ+NRQRy7JKM2c+cevzDyk9T
6wqrUFJ3T7c7iCzxYcOQST2+dsTTcktbPjhW99j75f+9Lf+ae/CNF+PZ5HRE
8y6emzF/R/E3+Y0oF5RTqw1TO6Snxe5+55u63z2Se/b0FETVkHmIoaG7frM+
b8O7ZfvSGgsqUKqOnu4OlAUqftCHsvN4Pag4tiPZjcikPz5agIxEZPIi/HZB
YQPLf2zMf+Vw9QffVu89Vr37q9p3v6nJKm50oHztTpsDUUpnGz5wWajBJBIg
eAAAABBHYHa3gAvZzZemZW8UON7dN9iX/czzwbpeey2feEC8Szro63R2HnzW
vuEX9tVjHIjUCexurG3NWMe6MY4N10sZ4SU4CR9iRrCgKmjjeIIpESJ4syJU
hFtQh+hZ2jX3Zk576tTbR6vrWlyIyXR62xEhaUMkxI5oSUT4j3anq72jvcff
0Wxz7kutX/Bi0XX3cbGsuYg0pn//zuOXL8jY/H5ZRb2tvcONlCBt5fWOlW+U
XsJxocvmpyNWiYx5fn81utrejnigy+F0fZLS8PM1mGtdyM0go5SXz0//ry35
z+0rO1Xe0t3Z7uvqcLrdiBpJlpAmIT7p6+5od7vSTzdufPfMLetyL+Jilcik
82alnTMz5fbH8xEJRJYjUomA/v4jo/mm1TiAefHdOPJ23kzEddPvevr0/owm
pxsxunaUkM9OyovLzomcg2geIsBf57fMe6Ho6kWYT/IrG388M+23D+fuT6vz
epAGD292hwf5060WC5WYJGKM4JVtH3XWWaO2l8WshxuZiNKNg1cLUL8aODD1
LAFTD1hLAADIwM3D0gQxvWW3dH/zNkoz0Nsb5kndgMTs0CGHPnwpcPKYY/2t
PLXDOywQzXtorHPDaMcjY6T0qHtP+BAzkgXXtdNlVgSCN5vb4DmX30OB52Sv
vTfzoT1lZfXOrk4PIkp2pxsxOJe7w91OF3QJCUrmcHYgAlPX7Hjq05rx92cj
goQ0XzYPL0hDB1s+KK1rcXo6OpDaygbnqr+XXYL5D15B96PpKeOWZr1woAbx
u44OpMSTXmT72xOF58xI4fcmIMOuXpR570tFuaWtnV6UpEO0im4YbxLSZne4
UXqk9LPs5r9uO4lp2+zUS7kYIyr4A6+XltXhYno63FnFTbdtKkDZnc/FM8+f
jSN4dzx5qqDC6fV28H7g1VKzQ/TM5nAjCoeKv25PCQ5gIqLIxfHOnp5606oc
xP2QwYgocnraqZ60UIlJIkDw4gggeEMPEfbGcJBuAhKco4EGjnRwK+4iuyps
C7jw3aKb2uaN6f7yzYHe4ABP6vp7A7kHO9683/nY752b/rP972t9x/cMhHrQ
lYH+/oH+vkDBF/ZVo22rxthXj7M/NMbxyGgsG2QEL+FDzEgWVAWIOZgVieAh
VsNH8JBcfU/m059W1bW0e71ed4enw+Np7/C4Me3yeDzeDiToZEcHfwaHorjz
SLgD9NHb1el1uj1vH62esiKbm/DF4cHzZqVeuTDjvWPNDldnwOetbnKt3a0k
eDsO1LjbPV6vx9ne9dS+2ksw58QzxfxittVvlta3IIu8nd5OPusOzjDeAMlI
yST+DHcS34I0p5c5//rEaX6ulvv9jtTr7ss6lNnQ3+Otamrf9lH1ZfMy0NWL
uEjm2Xel/uHR/Pxym8fTiW5v59Ri5ZIriL/cQQe65Gr3+rs9FfW2O58svBiv
SEzjy4j43sIXi2uaXEG/l6OIgjbeTlGz6RpMHgGCF0eAG4ccuCrTomS6CWTg
2CAQvJEO+Z5ZfNA2/wbb3Intb64OcTOzAwP9va5Gz56VznW/tt8/wXbf1bZ7
r7Uvm+xYd4v7hTuCNXl8UK/P7/Uc2ObYMM6+7lrHBiF853xktJQR6t4TPsSM
ZEFVwAqvaQgRwUvnJhNTESFZ93ZFVaO7x4dIFKZzHkK8nk4PFq9Hdd4rnu/A
93T6uzudrvateytG3Zd5zgxMbxCbQsp/uz7/2MnWgQFfZYN77dvll8xLP0cg
eKljl2S+sL/ajQlSZ15Z26xnTn9v2nGBHM5M++0jOYdPNA4Eu5FVahu8umcw
7ez0+bp2HsKhRVTSi7mXqyDZ+H4l0plfbv/LllPnz0o9H1Gyuekox2vvTd/8
/hlfd2d3ZyeXKUW/9FfKDhFQlB7xto/SmiYtO8EtHcT8md97m1rkDgW63Zh0
CsxQYaeFSkwSAYIXR4Abhxx0q8xcnQLBA4RlU7RTuNV3N9rmTbYvmuwvyejv
Cw0MDPS2t7a/scS2eGzbomvs9493rJzkWDHZcf842wPXtC251PXcnT21RWEu
jhdsq3Y+epPjwSucG8c5Hh7t2DDauVkWwUv4EDOSBVVBBx9eMyMSwbuYe7cb
Yju/WZ+XWeoK+Lu9XpSg09tpRTDF83YianSqyjH7uaLzOMrE71Y4Z3rK9o+r
fP6ummb3g7sxwSMjeDsP1bo7vP2h7gMZjb99OBed5Kc4z52RtvzvZ8obXX5f
F47wmTcJMylvp9/Xeexk2583nTz7rhR+Iwmic9OfOVXR1PFNgX3c/Vn4JXWz
hfDd7zfkf5Hb3N2NiGFnh9dQpnwu/N/yRs//PH76PO6lKDiINyPlvFmpb3/b
5PYgfRxF9NJdN0TFJMGLzEepxjQ+lKG+rBoBOR3ECeYQiRPi8xHNYioiL8Vo
SUyY0XMhbpWu0izQnkwjs1El0rVB32kRA8QUouns29UulBuiF4YS7tdylL4z
9MkOmXrU9gNkmdRF1tFvpYVQy87Uruk/VgK6wfKMgOWNYEjszsbF8drmTWmb
P8Xx2G3B1toBRNv6egP5X7QtvMq+dKId8boVEx3LJuA3oqweb1873vHwDW33
XNT5+Uv9wR4c6evx21+baX94lGP9KPuGMa7NY9q3jpMyQt17woeYkSyoCjBh
MCnSJguO0qRctTDjiY+r7O6unoDP4+nq7OrusiSdXYgUdSF+iPS8crh67JIM
7nVw6Rfj1WgpM54pLK1ztzq8q98quzgyRXt8/P3Zuw7XdXi6BvoCr39ZP3n5
ifNmpl7ERfDOmZG6/ZMqRztiQF1epN2CScJdXQVVrjnPF/14ZmTi+E+bcgrK
2z4/0XzNPRncYr+0S+elff/OlGlPni6qdXViL0i3Gyo49193bUvXkldKL1+Q
jkOCd6fx+2qf3V/V4vQE/D6Pl67QQiUmiZgheFOnjjqLNnIpxy7FGKbgJcLo
p8muIilHbd+uHEWVmck1KUEfXhVX1TZohFoomiIJ9W3QNjeiik88alREhYHb
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
iTueLNz6Ufmn6Y3pJc6T1a7iOk9RrSev3JlW7DiY1frUJxUzni382Zrca3AY
EL9Y74LZ+D1yl85Ln/H0qc9z2rxdPeH+Xj6c5g8EUfuzuX0b3qtAFOi82Xj2
9sczUyYvz/770YZAIIgo5M7P6iYuwz8cdtn89EvmpZ83M/Wlw3UBvAcCW2ut
jOhvX6i3qs275LUzF3K/R3bJ3YiM8RE8B3om/FwET4F+/KT0IcGxR3+Pyxto
dfobbL66tq6atk70t97W3erqtrf7mhy+z/PaZj9XiAzmo5eIu547M3X04sxN
H1S6vX7JFss1NUhQBhQtCRA8DqoNnoDBgeFlgQDAsAVmd8snOFZMti0d5d2/
HS+R6uvrD+GAT/fXb9oenGJfM8b5yBjHhuudj1xvf+g6x6PXOTePcmwa5do6
2rVtjHMLYnfiurunxzmeHufaOdH13Hjns+Pduya6XpJN0cZnHEk2SRKELUXw
Qr0hHJELhRB1wu8AGeitbPbuTWmdv6N48vIsxH/Onp76r3ek/NP/fHfOjJRR
izN+sTbnjxsL/nPLyb9sPf1fW0//aVPBHzYW/PKhvDFLEENL/efbj//zHcfP
np5y0RzMaqY/Xbjn26ayRk8I88++HsFZiEmGBsL9zY6uZa/hzQ54q+mstH/6
2/GrFmW8cKDGHwghKrj9k5orF2YinvmjGak/mp76v6Yee3pfbY+kQgV+qlg6
5v/pJRKGuGgjIngVzZ0znyv6p//B+1t/iPRPT732noxD2Tb0tcfn71GpxXp5
Lo8+cq9J6edWpyqkn5e+3hBy4DP/qB67JIt79R/+1bMfTDt+/eLM5w/UdPl6
UIqgVAiFhdyH2NL+eAIIHgAAAMQTmN1hgneDbfGVnYe2S+e9me/aNv7Cvvwq
x6PjhPDd+tGOx8a4t45r3zqO/51ZF2J3T47D7O5pPDOLV9+9NNH1/ATnCxNc
HLtTELxEjzAjGmFLETyOGEU4XhATxX5M8xq9HxxvXre7/G9PnPy3tdmjF2dd
Ni8d0aH//dfvzvrzt4L8J5Jj+OAvx75/J/5BrlH3Zd28+sRft51a/Wb5nm8a
T1W3I6rGG4aUi7SLJ5N99nbfE59U3bzqxM0rT/xmfd6NK0/ctin/3e8a0VVE
k9482njrI3lTVmT/cl3uL9fmTlqWjRTyM5xBWgSPJ0tkoUKK9YICme2tb+t+
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
Nauo88Qd/imYa8WZPHFVMNXTZFmjcQns48EbPWb3TLB9NWbBiYTGUdrdEbKW
wUwuKfBGbflVLdGdQxqT3wxXG7lc+A+pG9AWeNZgrkzrk7MUIvLgjQLPHmKG
wFudg7YFl9KPDJyNwEunWBV4/S5/mw160RVrsndHD/2w0Pgv5cGEwDOBwOMQ
l5o/B287SrXNezL97M2jNQFPJNSP0n6cJ+PNyYnhXbW+wxF4vZFvrPHZHmOb
lNmPZws8IavYZn15gfcgFrd6emwayRV+Pzblj0lN3/EI9uOgTf2l9CMD1yfw
xhyjG11b4FlRQeC1g5ppAoHHyayinb+K0UlbZbGERr1EvxoePOF5CwTeqIis
BaokR+ZaktEG14OXHqI1PXjWGhajfOxVtFN2aqtoz1Lg1d/4cKdeGqM3H5k2
4bznK/ozC/z1fvvuKxPKCxru+Zblc0STtcabd4zIrVfpOLvlD3/TVy2ks+PZ
Zt4Ffp6WNj9MYlNvZzDfuWDnTr3TQXSx/RtB75WR9NUMRtYMsxuKvSrwpu7T
6kczry6ICjZ1l03LuTWsM7OTGy+YT3bhn+QdqdV5+0UeUT/a9MQ59cSNyigG
p1AMi6O03Nz5dzxRIN4dd1690XDLokfSb3D4o7RvZZYPZrpArK+Lyjl4n8s1
sXgfPBJy0ja91HFUVnbfPDLlrMzoGwVMJPCcpbuc6FVlhlJiswFpgLYhWq7x
opHWXXbmwFY561PnKvCsdwROzy7fSm56W6YZ1onICClg7T/94vyWLwlRJcEu
V6/WqUbOXoKk3iHKlaL9OtFkdsIX9DAtoF/vpMMY6trIQs0knSNVNqQ2CNlM
3rLkaA5tdqLYaw4QohLkjbDe1WW/Eiso2Npd9i2f3w9H3xTnJsdvnKjac1Zq
dZ48gk55ysy3PHFBmThR0bzzl1m578+rPmVu7vw7nisQL8VI4KVvmZ163OB4
PxgWVmb5cKQKxFe2beXsNxrgPBkXepwp17YYtug1+QuNCzzxVMsHlv/S5JfO
nZ2t8FSDb6sbcYXyARDnomjPEpGrYYP5pB/MViCVFIOfzE5L60kXwxjlF5lb
35RJ8zXiN3sfROWXdB7C/orZiWKvCDx+pf5WHRlrK1gVXWj5+DdNwk/OkrVG
6rU6P90116qtdanMTSTwrDLxoyJX7P7cbEoBmPou9ZT5uXPveLJAEk8BvXif
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
TywtN0duYcp8LriP/AeAUTRbXrbuqbhwRCHqYk/lcSo+Xpi8TgSVZz0PXhg5
+erfehmzU3SqNoZ3dkzB8YsFxiSfJj9YrgSiS4ycqZ8Cjr5zK0/yoZCW7Pck
ZgzzjUnXzGwDCNJYauZvP32/lsQ5R7F0jjafGVYnNuk6fnI+xxx+vrqb45eu
vtoVdQ8e06LSP1EyYPzWJkZ3V9GGS5jKs+f/nHVzVLFEMrSud+wG5BLimcrt
g2f13NFtWXYfRffDRaldtvapauFYxUSKPZVH00rpU7Urz94CLx+5Iav0rZfx
OkVn1cbgzlqKz6lg0T54wd1zgiVLILhE5IxVjRKLL2CcypN7KAxLGp9E1xMd
1WrTmJaambhl9ALvbzBQ1XJE7Yxh5/Hczs3XH+Qju+4QLR0JJmnuDn//008/
qNHhOVFz8JieEQ7HfEIs+vFYb/NPOl9hor6dAICzBD3GYlB0JlrgnbKDamce
buG5M4ghV5FIgTfpmqJouPoTl5C/6dE+8KSP/DFhIT/JaDKLQUeXS0if7b8M
JUKzafytT5h2AgDOFaiUxaDotroQ5PDnieu7nb0nbR5IYrmxClLgzfrI+tqH
NAVe7z3j0oqGsef8uYOl6hImJJMJeeny4zxfdqIY1AXg8oBKWQyKboBPMBbj
kic+vwz67uKYpJ7lDxN+KvdrbRVtGUBNrLR13ItamplDzXFC7ui0sKd8jRKt
uEEBAAAAAI4OGWNcTeCxyXrKseZrI2+WnEFbQt0p03EYCDw30dgNCgAAAADw
cnherNlbtZLAi67NDnDOU+j8Qd2GhPb34FXtBAAAAAA4Ao7KMddG7CPwDNG0
YDPkxKS3hoSiOXiGwFtiJzhxfn733TfvzneeyZc/fvvhj3/dbv/6y+tX332z
+3z7y1+WxPP0dr9C6IrxFf38+LNh6ndvf+XHJrNfqbtATr3+8GW285VIyLrW
TGvi1x+/edUX2uXTlcOufNyiONS1AIATga0ZnY+UA4fw4I2DnUYShm32qgix
wmM2uSUhHsl0pSfw/ESTqzfAyXHmAm8neDop1eViobTr2LsQOjFAZJiThFAL
vYQrV/XKbbKhP1UCd6e8yPtopZg00poZJCIE3kGvBQCcEGJ6mVR7a8/B6+In
KjL0dzHTUjvPNSXk7oNnCbwg0cBOcMKct8D79cfB+D1zsXchdKrJVwKz242G
+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

    "], {{0, 765}, {843, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{843, 765},
  PlotRange->{{0, 843}, {0, 765}}]], "Text",
 CellChangeTimes->{3.543526994379015*^9},
 ImageCache->GraphicsData["CompressedBitmap", "\<\
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
AahvrKW2sRk2TU3VlFeVSScY5JBDdRSyqkHBEpWVWWSXlUh7U5oRI2qvLqKk
pkayBwrEfEJjQyVlVcocbmMluYVvScpLIF083aRatP+A+qosUsTl5IJMaSFe
daJRgmdVVT6ZBW9Jzpc+8SQX58t9VbsoZSkkikdTSwoktVbVSF0RGQUJJOUn
UliH6kBpXXUBpTU16k4rvuspr8gjv1wSkhoiUuPl5XnklWWTK2UaG5vPr0oy
raqVjlSg0eMdCVRUZArBlErrGV+pijZVUVZdKZ/MVQ9XICwpL56Uotzm/T0K
KGUVij7nJUsHHL9XX26itraYvNI8Kurr1cATk1RcnkthZbnUj/+CBNR//9d5
a7WYcsO4amHFw9RGjX5qANSRGGjBbj0ddHR00N17TDgSqPmlPpWbFw9hcD5Q
2rfdSj2FNTxztuLQoUPKz2FO35bSU2jsU7aW+tCbiMRMeRVovbq1dJzPHGt+
7vARrofmz/4fB1D5/CQdWv3GzvsoB/AxGcFnGT9QkyVHLbCwsMDoxHLGTNPB
4UW5xqeqUTSIWPaWFZsWaXHsfrqKeOWtNPb6tP9UtCq/IEB8f/o7C80eSztS
NfYqy+U672S9uRd5gnfWqZ9NxmLLOD7VaH72vQ4TuPhI3mv130JPP2WvqsoK
KSgoEJ9ioYNK9fhMsofKyyXyYmRtRSmFokit0PSaihK5eHVDo0pTGqvLlMUL
BHBqFZc/F8peS6m4VFRaoV7SbKyvokhcKymvbnalq0uE0omHhbCK1Lkq5Z+o
o0RZtaLVd7ikSaA6LZmkpCRSc8sVYG9PU2U+aclJJCWnU6raMiDGXiHMU2lV
vdIzaxRjL6akolbZDcXAikW3yl6YMKhbT/b5F5Euqk5KzaTinRPsUrnSihrl
c0KDhD0rKatqXrWtKSRVal88m5JZKBtZlcsmUWRueop8LzktWzJJzff+zXMq
AqqvraCkpIK6pnd0XaioXD4lUwK94vLPVBVmkyKqyCwupaKyUliOWiry3vIy
Pp3iikpKS0spK0ng8rJBDFx/TbhsjVSWFlNe3aAeYpUwomVVdTTUV1NaUiaZ
RfkvJ+gk01fYSq7Mx6pJkMyzMGKlldKJa9Rn44UNKy4plzusuCZZl3pyU+J5
ER5CUGAAAYHBhLueY1JbDTRaryNUmNOGukqBtAK59WbBtaKmXAmvUinIahCY
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
VGaGVUw1bIsTCS/O0Ee4ER+KEHLk6OEMHzmOmVoLWbxiBZbSSYzaVOyPLmVW
v5/eU65qftqqP0duv/nbcgy1z9g0qhcrLCPfJaoML13+6DQCi9fNRJUecoyB
vWZx62UCBhPbMvbok78Rleamm/9CVOGhN5kxcDrOqjPi31HgvIa23abg21DJ
jS3DGL3B6V+I6rWSHfLCbrF14ngmTZ5M15++QcskkvLCYDaPbMlPPYaIrk2e
PFmQ3+TJU5g8aQK7b8bK7mRhxC22qJ5r9a3wgB9R2IBqZUcis0GD16oPhcdc
FxTcfQa31AfififWQwdNzaX4lORyfGp3lpip9uAJsCwayFz929hsHkf/eafV
bw6WX9pkOOJvZLbE7LWSzLI5q92vmcw0Z+MsPRh3kfFDl3LV24bVs+Zgn/TO
0uz/ymYCsZVh6E+VMgWdsU1UnVOPxXBWW3FtMO7vstkZH+Vel2qS3E4x4teP
aNGuFyNHjqJfRyln+jPbrz+nusCJXoLNfh68TvEu9EJ3xvz0KS3+mMsDKcpP
s2f0HwJd387igTTGspeYGyxiSo9vVJD77LfRmN1LlzdiqMks7QZj2n3E+y0X
K970rpSc6ZR2YtDfsu1BA6Weh/8PMpuPm7STtyQW/TE/89E3P9B5iFC4Qe35
7KP3aTv8gBy2hRydJw9Zyz79b2RmKMhs6DavZjIre8v2foLMTgqvr8aLid3a
sPJGrprMKgNY2LsL2/3Ffx+dZ5bWci5fv8iyrZZ42R9i5aqjGB9YzphVZtRV
ZGO3rjNftunB+KmTlRj9XHxPZJWRB9nC63ZY2Zfxh+/z1k2XPt3mcz+9lBfn
x/Pxj38yUv3Mh+J7Elq7zYmpSmXf2G4ss0p4h9zMGdd9NKby5j0Fua2wVqVG
04VK9mfJUR98j0/hkx/bM0pd7/vKek14oX71eDPhDV9qrSa8wIvzGSITXgTr
BvZht49qq1cU20WgsUNJeH+O1eOZMtEpEV67vgvxUCY6mwkvgUNTNVli/BRV
0ozyIFYO7ctuu2DuHx8vLFRHRv/T+LX3XeF1VQK7RnVnzbW05m1B9alYb+gk
gNaGC2Gpqj1JUTa6cqDeQf8+xekJ6Hb6z7y37IZw2RoK8TowjTaff8BPQpwj
R/aj3Y8fCqCMxDm7irK4W4yREgHLTIive4f3XprS/Zt/8FWn1QrXTvrLtKPP
5x/Tuv8eof3NvHfiqTIWqSvA3WAyv332AT93HyO31balaOujcXhk5hB1a6PM
a5MPucgiyrq3lxZCGIM3WsgrXZUea+X7feYbyatMjTH2bF81g14/KBcdBJK/
G6JLZE7df+O9BRej1cnO84v6/u+811vWU+9Tk0RLX7PeSaW9dWSnJpFZWIa0
LyTt+WOCnwRirDeD1q2+4UPhCbTstE40noW5MlazS0wj+s4aucezjnmqlz7j
PffQWpq9Tdd4U/iEmZ9r8GlXLbyU2bXi0JMyAw7e4EC5ME+j23wgO/Dft25N
69Y/yclKKVreEVxA5G09Wfc//P43unTtx5QN5wl48ILskkb1jq76CDaNaM8k
4cM2NLNfbqAhXToNx/JNM/tl+OjwV49ZuL1JYJ9gv9HHQ5WvyUrhlHZnem2+
pYw4C7Hb1p+/tC7wPNSRUT01EUUV1bQm78YK2vXU4rFgP0fBfiM33FC+DF3F
fmdJEra0+OX/Y+0twLJauvfhrfgYqBgINl2KoqiooFgIdnd357G7OxD12N2d
RyzEQJBGUlpS6S5B8f7WzN77edBz3vO+v//1nevsR/bEmjVrZta91tQ+jZ76
xhi6YB/cfH0RHCvNfpADu6B7c3ReeBreAX7wpbjAgFsYbV4bXba5ICr4GhwM
KN/C/VK+VGmeSoS9zuTDvZJ8uAgys4wsBuPeV7maegi7NgVGHabidWEadg20
wMQ/w6TGIV9sfCeM3vQQD7eORNuh2/mBHvG/ErissFLC3mbmw52SzewU8uE6
UCO/4bBnR7D3kOApaM9AtB1zHDlf/bFyWFfMOc3OY0G5LfR/RT4aiD+isZsa
gJlia199VeqV2TZ1xdU/jnyb0Zi6QsslNyFjY1lOMnzevUPA25MY3M4Y2nXY
EoQGZp1+h4LsO2hP8KPdfjqZ3KxxnqN3k6qo0bwPnNnIzLqN3voEcnVHUnwR
3E9O41MMNRoZoJVFF4xefgKubmHIKpT6VC1CKleMMNGAWp1+cJYPsyAcyzpo
Uc10cZDkVea6F22oWLP1b2RVhW/p2GVFnbrNJLhwb6Mcn73d4OHlggML+6F5
wzqoUonUU7vF/G7GoIMToU2cjLubXQHwEshfNkfbcU7Muw8KokEX9PY+xpnr
Yuw+AryydxjRVh/Tb6YrwSD1Dvq2aoH17ulwcxwN2zG78TEzHNsH9cH4qdMx
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
scE/AmLKqy2wajcMD77IiqQcIUfGokWvtUgsC8Mqu3aYcswTyiO7pNYGm1th
09vP/xUR1SREXIlm0hEUNiuvaTyLvL0MXCfkYC7X3DvyyW/y9hbbcNlPfxSN
1KCrhETVMHi3C9L8j8K2tRnsBnSA+aBNCEqNxOw2jdC083p2Aa203mSgREHj
ucexd/ZIdBm1Hx/fnkCXFn1x4tBGdNVVQMN0HoJJR6ZE+OKp83tEhD7EgpEO
aKPL1tr0sNszGplpt9CR6NS2mod3kor12dmJ95UROx+zm9ixrpU6quv1wn3y
rrLvLIFeDerQ+4Mq3jbDgNBC7NPSAZraxOUg3OCedRZ8nr6Au78/np7fgKE9
zFGLLMuG5vP4Mfnw47P4VOiY21kVjjJ8R+if9nxWZ86xAJGvgkgcmWiHLuR5
9uzVG/Z9lsEtvwBR73bx2eAm409A/tJnQeonPH/yElExb7Bj7nh0b9WAq8IJ
Ti4oLHwCWzJBNQyG4hk/AvAagwxqQFHfBjfYYU6KH2zGLtAdiPc/8/D2xCQ+
Xg279sPYcdMwf70TnJ9640v2D+XqXwUIjCQItO4wmRloYr/zP4AurXrjTMR/
hMD8J0th2rIHLsWoIDDt9mwYdhiNd2EeWGtvgP57XqruWMx8iRk2uhhx1OPX
i/DSHsGukQa0zFjDS8VZUg/IhC81wHtffzy7sJEaoJXYABaLEa+EPdnfm8f9
vT4bKvh7l6bytVNr7u+5YVBVUmBmI5W3Y2V57IAm5emx5DaKc26jW7MqUKve
FLZDh2LoUAcY12MjogF2hWbA/ex0vm/JoAsT5lTMW8eE6YWkLHlMSZvLSFke
Is9LvQn5GKGqbSL/N+xrwrGv+0JxWo/RvbeR/NYJotNnYSrgGCm2wlxSwKQD
kx4R1OqSP5Mh4CphXw/KlyHxsnsEpSfPIpHS5VL64iIBm8gra0NpMn9KLGgi
ypd0XAolSSPPiTl3BG0Oe8WiPQn62vck2JVmPl0JEpsSTL7PJJaJZD45fI/J
lWrcjRzCQhX2eRPGmZP+3P1aLPr5QcKVWgK6budVVTqEWSqH8J3kEH4lPHR5
Ro4IvWcnknZ/QrgYKWA1oX8nY1HjLyO0zkqUQFB2CM1Fh/BSgsohnC47hF/I
m9sj8DNrXfYq9wLtluY/H8SRP+ok/q1DmDSUMKgfGQLMcG1KQowg4J9uxIxJ
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
Q+I9jG5pTv02VLmZuSQUy9tp0Cg1x0F/pV3JTtC+u7wPRx+FK7tQnPNB9GpQ
YSdhgz44xr9sl4T9k9nuYwucjWG7kUsR7/Mn+rWoqbryqJENdrqG8pnaMury
7G7zJo0bohHfg2SINY4LqFVqoNuc03yLaE7gIyyzr6+8FqblEJyWbl4q+eqL
Nb2MBNWdHnXQbcUtJBDtkri32LKO3M/PSqT45k4amry5o5/+I1D+i5fYGOfI
UzAlpOxK3sH44dRvOpJ6kg7PphHtcaQK7cjBGT+I3ZJH/o+EhGxtsAuV22sk
+VFsSqtQdOHaEJqNp3I6k+My2pE8xDIZKevjK6Hn/IGElhQ/3l5AK0LOx7Ei
vbeETrakse0JESYS8kSy3aHniS9r4pnSD+5O2pt4jciVqlODrwPOJzAfdEgF
5gxQZ9kQW3s4cEpp1Um1kKcz+rdtolfE8xrl5LGeJyBTbsqtgc6EpckEAGWE
H7oSRqZKe/jPb+KTg8q2tyFuvdKlXaIbRe+wXVuxmHZDBMybKv59IUHcOeRD
QGJYTblNtAsJLUYyU0IecGdUtU2UHKxLniLcyTVh20Q7maq2iU4nuGxBDtc4
qt1Y8p/bUoO8T5FkrkA8wdQEgjUfN5Jr51+3yIDa7P4iAdYdxTabRC66PiFs
u+kVUFKN22PPCNEaCyqlZUrN+Irc4ZIIgd2vrSYFy94ge471FeRLZvrtpDqS
6TPJuILaIy945xsyPahTdJGDtTicvoWKSsX50YKGJng9vRpsB9bAWNIm44d1
RYtufbH7jXgDUIr7bjh0aw27MRQ3sgs6jt0Pt4gCQXlsKi8YJzbPwB/n38Jt
30S0H7JNiZHp73ehfaveOB+lXN35sKM/WvTaSA0fi/UO5hi82005D/Xz0xnY
G7bHLq/E/+MGmdar7lXYMEoIGX0e3cjwrtxwLLvnQ/rvBz4H+1IaDw8PGv/h
X6TjeWU5CHd/D6+wz5C3x+fE+FCqj0jMkjIXJOCDuycCI9IqLBI15whpxJzV
+nVRu0E/XIpjXkUxbm/sC72qtcnFUkdji3kIkGuYFQtfDw/GAT0hSJfs9LLi
VARSmH98KjKSExHA433Y9SZcNUb5ecHd3RvJxSqXvSgpBB6eHviUUvwLQrLd
Mo1GbIVXRoEaCgpYS5WUyh+nB9LCPEQJVId3iOjFl+Yk4+Ks7nwbd9e1t+Ef
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
ZuGDseq4M1Nl/3Y4j/+qLsUJk8L+w9Uykt335n/g/1/ujPmtzJB/L1OdyrxX
W1Vm3/8/ymQOqeN/LpPdTHauLpVZnqnGyrTTQWb9/7cyJWRPSijGh+ACMsyK
8bUEwkklKw+U1a/yD6ywIrMNDYmVbDMDdh+Sjhj2/8SKeEHL7rWhEFp7QugW
ANtDmUj+hhNKbtinydkVk9pKbr5NUR0f409jI+Imq6Ex46apkZJLvi/ZU+bm
x79xI2vk5IwyzDwQj9mO8ZjrlMD+JSZmHoynwmdS2BwKY+GzHOPFYAX7kwfJ
D8tShcfV+D0LC/017CDbbszSVv/HtLMOie9zDsVX5snUlElYMWJYLcw+9Evx
PPscMds/FSlmU8fsCllmHoxFq2H+EDp4QbDxhmAXiC4b4jDHMb76P9X/YLzI
dzUlFZnvCjxLDCp4VpWM4nm9q0sVYuklspSe/apJHPFHqFwhnUxXlK8WhalY
4pWlfLNVLFZgOV58/w9hs1RhgtyuFYUqC7y6VGcx/d9pqhpFTUmT/mU94Ze6
zjoo10Hxi1h/7T//HFeTx1WtEJ5CTxHFnaMYdVY8g4qZjgK8uzRBWQNT5DUz
Rm4TY2Q3pn+bGiOPHn6NGYXlNhPfKY5Yp1CGXRXSSXmJeRZX5Zc4yiMGE+JX
SFqRTI5MpinPxgjw9CxOCqf07FeNs8fZaiTTUFPSYHTVlWUZ0Ls+vemTHNgv
S6dPVPhDb+y3KvGjT2XqE12elv9N+RQVskhBnC05LLuJyFY1/qtAdiMlW3Lt
eRHsl0lVZlmumpSfS/SfwhQVw0hkOY1l6apVFJlSLBXL+CexVBRprhT2exkV
6eX8g5j/ief/1kRiuqoo0jTFocU0dI/Upo4YRU8S6/RVpD7/T2Pj72Eq9TJ7
x2c8dM9p+9+VdU7BD1x7lYnLLzNxiZ4rr9i63TXXLKJ27VWWKtw1qzIProZb
bjm48zaLB/PHJQs3KOzuu2wpqxquv87CVRcWzy4hEsldd83CFTEM115nVePB
TX8vhYVKWYkrIn1dCqvAIX+/7ZaNG64SGy8ycf1tNmeLpbtI71dZvgq06V1i
pSbRrUgrGw+9cvEyIA/Hz8agaicC0WnR2OnMyxaqVZCGWF1Oq6pEirFxTSLH
anaTJHH7TRZnSSqWpJGN22+ZXCiEfuVqSoTFX0pz9z1J9g1nWU7KyN1/n42b
r2Xu1SpKRxJ4E9yg2t9itX8hS5LIyaw9p7S/SfGqLGm5VsT638JcpLDXIq3r
rpmVOVtVlAKnNmdCqip1jauvfqUuy5/1KiX3qjSk0yuEiXKValQN199QexJ5
ubaMm5v0TsIVKv+W5lqFNDfeicKuLtFmkrlHEqQyBJF9bWKfpfuJ+27PiX11
SilQtybTfiC7+MwYac0MkWVgiEIjQ2TQ36lN6V89CtM1RHpzQ6TRk8ne6cmh
dEXG9K5jWJllpIIz9CnIhKKkJL9k0zVUY4HEfQYLIurpOlIyfZFSto6hIJKq
inTKWmisIpVLHBUaspKaG1I7sOxplL2AkuTrS5QVvEBGXUlZrymxlaXXhOSR
0dyYws3ozYxpfvqlXLqmRJA/lJv9VqH6sTSmxDg9OqYKnpT8QQrK0KEgXTP6
20xNpqBnQsFNKW8zosp+a9FvU6LShJWLHMOmVLdmyGzejJhuxuPSmhOmGEp1
1jOswplXY4KUJSX8HpahDKvCxZVNFU1rYoivzUkkLLiGKEUSfp6eKN00Scqs
UUpMuJiEyhLZCnJSFpVH7Zmhw8UqiPJURzaFFZvyvL/QZKLPJe5LxBaq/A81
EElURx41XJGRlLVCdtZyefpS5Wsgj+TBLgt+cbAG9eZL1F8z6N9srnTvi4NN
OZL+Prpq4AYpXqbdrr5WaU5Zc115lomg2GLhX2BBvj4TGQVYvSYYltMjcTbm
h3IHQVIG+i8KgeXKONz6orpVkyi4OCeh9dhg6I8LgtHcCOz242tXgvyhiNIv
uZixgChOi8HdFPFoU3FcNibPprBZn/Ei76c0g6KHn7HpGLaYwld+xj1+0rkc
V07FwnJECAYdShMPPxfkYc6GMFjOi8L+UOnyjfISbNsaBYuJQdAfFoYFj/Lg
4pKErlNDMOTPTO4f5vumYsCsILRfk4AP8mfEyouwYmMELGdEYatHmVxbnzuR
qGzthcqjY/Dg6095oqQw5Cvs5wbBclMCXPKljUbV8S0rD7MXf4L5JBLC6Ajs
9SrEnSsxsBz/CX88zpe9/OjXibCcGYoWE4jHP5LxsVCeOaqO8tIfeHntMzrP
DoXl7E/0UP1mR+KAdzHyy5T7S10vRcNyXDAmXs5ii2wiZV2wmbAntxNgPT4Y
hiOD0X1nKlzDsjHnj2C0W5zEPfKcxEwMnkiSXZ4ML2kZKSEkHfbUapZrviBY
WtMN905B9zGsjqmqibyMHKza+QkmY6iCRMNo5CcseZDL1/mqST3Bh6TdeW4i
PKRJscLoTIyZGoGjEWXKBdBQ9y+wnhnPvgHL5nh5WMTzz+iyOQ7OefJanwIp
PqkYNjsQ+qOCYDg3Ers/flfGZQZlYNx8Mc5gViQ2epVJ16cboSQmAxPXhVNr
kvTm0jMlEns8CpDHl1Kf0sNmTjSwfYkamrZRQMNMgQEbFLh3RoGONgq0naLA
50QFwi4q0KmjAnoDFXgbpUA5hSFWgYQXCvTrq0BdltdCAZtVCnwIoLgvYpqk
uwo49FRAt48CN7wUlVkgYU55nAKHZ1FwawUm7VUgl5FLUiCGyE0hcpqWRK6d
Ai3HE7mPCvz8SuQo/kekAu7HFWhmrUAditegYpv3VuCKhwIFCRL5qvQr4Ju3
gGm9BDhsE5BB7+WJetXohxmd5fHG2Df3CkbtjhVYWBJTTA+90bqXM7Tb/0Vv
GvRbDRotH0BvmifcI5KI40+Y0N8FwzaFoDiRXchQzn+jr/qgg/VjtF4chKKk
JDUpuDz6PS6s14OOVXPU79CsClFsRk6URqum0OmnC7fPxihPNiURGiLmiQ66
92hGdaGnnQ40LCtjJDlbCWECiVHgJbEJNdcTAoy7CrjnIYdVge+fAlqMFHDO
nVWQVY3qrwWQOE+uVqBRZwWZbmJLMPEhWYFkTwW2ThJFx0Ss0VYBi0UKRJGY
i1gzJIrpvwcpsHqEAv03K/CFqMpN95NaNuWxArbUoh2ojO9S+vJkMW+cjwLH
qBfUaUW024vl1LNTYMM16kmhlCaVmlPK88SR3cdHvc1TajrqttTSZREK+JxU
oAl1OA1LkUVt6nhP3CnuKy9GTE4jJoU4oE7hdrQKeo5RI43rCv2xkTCYF4vz
AaX8Wmn5QFZZeCqGrInAnnDVBoRcvy/otjQCa7x/KMMQnYrua6KxO7Rc/FzB
v8NDQWQW+g39AKFjAFZ5fhNLa4yyj0loYEfm88Aw7AyWdHJhMVat+AjB2he1
Roahy5IItBjuC6FLALofz4LywA/p+Nf3YiBYUn4rP8x+XcI12oencajeioqy
DsCC99+UGJHulUjDgMIHheJgHIV9z8eUBYEQTD1Qg8z3p2xHR0oGOo/2htDt
I6a9pYJ+fMOObaFUhhcqDQnhvFhMCITCltLY+KPT8Ty+sTL8r3ho2bhDGBqB
m/KJiewcOIz2g9DpI0bfLRYFVxU/ikqwZi4Fd/UhEj6wOp/HPrYnr0rFuX6G
hq0HhDEROJ0orUfWBYryMGEGCcXKBxpjRaEYDQ8gCl4QegZjzpMSvvGjNDcX
/YcRdWs/NJpA6fanITpXIiOufSR6f0HX8SwJZbVg51aE1h+EVuJcYBdfaE4i
KPIvhrh54yfObSUZmX9Ai21fESOLnsLfP42HphXR6B2Idgsj0HVuKOrYUaU6
U9j8L2D7I6Op5zSyIJn3j8btOLF9vVwToWFONRwWi6cp4m4V10dxqNaCwv4/
9r47Lspje39vNDFRk5ue3MSbRFONNfYSe2+xERUL9q4oil2xd6UIqPRiQToC
gigC0ntbet+l975L2eX5nXnLQu6933tzf+W/H5/PJu677/vOzJlznuecmTMz
2kWIb1WjLL4coxbwfThoeybX3CHrqR7jojHEsAZFHUKT3uXUwN0uB5Ip2XCS
8UUURpbiuzEJ1P2tmuo+dyVVmZgJy5xODYkEWUvxhnY6zIpEZf+QuzcvugxD
SbJ/XZ3GFT1qE0l+WgoOvlQIqwm6UJJcgdFTY0hFebUYs4Wq92sKtvm0sL0u
eZL/Aeo2FZ455OPbWaQxY6OYrJnUIRlF36fF4eMjJUhntVSrcNd4LXqNl0Dy
uwS/HpNg1E4J3ma7BRJCf8evW0JCgAQfT+bv8RPmHcOfSTCIbae0gJ45Ts/u
l+DN+RK8s0MCrwb+HnmUBD+w/PWlElhWClMPn+DsYbYZqwQzbbnVvqhIluDH
ZfyrBtJvv+6lf4+VoM9GwlQhmcHwhgR/mU6flRJMZMXR54OFEpKkBGfTulM/
2NkmquZZOHtpFnYHzCLaX0DXyrjJJa4CTTh2NAcTrNs0M2E1ceV4Z3kaBuxl
Axa/HmfDfr8ezMdC2wZhmrgN01ZmYbRxK/PNNPspWFrK0HdaMt7YXAzvzu7N
eKmfDK8TdPyWgGFH03vTG9NJZX49nIYFN2RI4vY3bcUz53R8MieUUEDK7qBP
Icn/IPrNGoNvzk6AtGsW97JZVCdfj0nUHxNhXype640I14nopTMBt0tm0ZUP
xESM6hwJfiFZ9r/IpT+Kq9AyqSf+xpY+r2SiIuERoLPe/ju7tlyCg/HdG2Gr
W4ifN0gw5E6PnMLeOHWWbp1ArzHssbVLb7z2oz6fQ32/SoJJx4SXv4MRu/k+
7H1AAovs7k3bwsOo36nvghq7l3R3dUpw+wrdP1WCL3WFV/TG98t5jbud1aPA
vuR+SnD0PH/3d6Sskw88o08BxuikkKlG4m9nSpHYotlQsux1Eb4gcNIJFTP1
OmFxKZ1sIhqDzlVBPNqxObIIfZYnY8Or9j/FLTl1WLaKQGdKMk7FCNzyBTpS
SvD3hWRlKzNxg/P3uxDvnItek6Lw9vJsWOTwtahOImOfS4/PJw6K4x38rmYF
mUYC+s5PxNvzEzDpCZm0qhN2Rql4Z24C3qLrA6/WsJVWbwn0Uh1bjB8W0WuW
puFSFk8l87YwmKUqrMvEHXYcsqwSE1YTRM5Nwc4oKr6xHiu2k35OTMA8d352
uyauDCMWs9YkYYYN7xVn+cnw1YxIiiuy4SomndQ3YMl6YoCpKVjvqaGXupxy
fDMrnmqeQDWPw190ZEhu6RLppSi4EJ/NJhjakA3bYgFE3wPSCTB/o0LnpeF4
PI/JaW75eH9GFHft4Au+csqiKoxcSBWel4FLMZ38W0ejKruGHIs4Dp4l86RY
ZSyH3r1iHLrPPvkYtIDkMIZeRaZrkcW/3uFKKj0ajV+ulncHDF3teHRHylH6
u2er+FUabS04sDuBZBSLtw6Xc+nq+Yll+IaVtTwP7kU85scGF+Oz0VTGagoN
K/gygn2L8D5zDzbKkVSvQkZMBdbuScUgXRniBEWqS6vA4ImsmcQfpSpJT17x
epCLt2fnwEU4+K6I8cLkJByM6OaVlx75eGd6Fmxzu3klxD4d/TZm4r6sB6+0
t8PsbCL6LsvGIzlfuKqxGZt14tF7rxwxXFer4HA1GX0WZcIqV0jlU7Rg73Zq
/7ZCBFYJPfYjV3ROWDG+nkpiGB+ND/fkYS+JnIl91UEp3pzAs/nUh4STbV3Y
e8iYumcjxthv4Iy/lSx5OluFSlwy3IQHhEQfCQZMIiCn66/UErQUS7B0Pd0z
jiIEG266nqojwSlCK8kYQqWb/LaGZaESDGM8RQhmI+vOjmcJdRcP0vUREiyw
4lHtDEsjGU0O+VVhnVirBDfsJNAlhHucwX+/TWX9Smjzu7jOCzNhfGIX4YQ2
xt3YQVanR9fYp0VIKOrF8eepwxmYdq9BwyaVIQX4aBNnehJxr1uVsgFzlqdg
0q1axiDidLm6sgHrN6dgjVUBhlCwvf6ZuFiUJcu04/bpJLx3spItMhdNqTap
GmNIsQfqyeFWrNnR4IltGd6flQ+dZ91n3Po5V6DPjBI8KOimrMjHcvRfL4MJ
p/y+TGZ6XGH7ceHEaiLg7bDJ0+Mvv4+CuC34cZY2fjy0H3dixeZ/z4kn9RV1
03Ze/PZC1lxXjQQ71pE7YNhjyXJfZAYRrM8ejjemb8VPN3aTurHXHIL0+d/x
AYH4V7rkHcRoEhkUtRJcMZZgNNureRc5ES3dOT9BThL0o0hrISlPapuGQEpi
iQbIeei7gyMWURWMTtIbyCX53VGCgpZFgJhlVt0Kc/MsfDwzHuOM6zSLUcrD
ZBi0OhHbwgWqqKrDCgrthx7MwKBteXgkJNc1R8vw/upUbA3+r6nCIL5dpAqk
leIrgSpupnN+NE7sJw77JQ7jDas12eJs2MryEl0fFouFdrWcL9hWVY9fp8dR
mJeDybpp+ES/AgVVSno+AWNO5mDczjS8STbvU/sHqviRQfxCKY4lk8onlGH8
ynhMNcjGOyvTcZg1OqscI5czOCWqCKOWdFDYcJxBZgy+3JUPwzAGjq3YeYDc
zgkJmGb9z1Th9u+p4rVVBscyi6/Jsf4koS4h20lp5z9RhU42HMu7qYI4a4k2
4dGUOAzRl8Od0WhLHSZpEf7PkkI3QKAKGZnHYkYV6TAIbX9LKBQqFdxYwWzK
e0Umzvi3du8HMgRxvjJ8MY1+WpwFo3i+70WmGEVMIS44YOj8yjMffUdG4S3t
DKx3bCC2UMPvUQ53b+9D5ZyG/ddMQXQZLh61qmhHRnk73V+GnTcKsOZoJj5m
dVtAjPD/jCl6o7G0DpPnJmLJo8bu7bL6IPs1VXuqFEbpHVAomzFvYSJmWdWz
kww0j8riSjBgairORHLhoDj4xWLOi4dZ+BSFT8k/e1LSJRG3GFVVNxLyJeKt
1fmwjSFIVLfh9jUCqpH5+HhbEc4FsBwVa5w+c428yE8w1PifyYICNyS/lOBz
tme2lgTPqjW5zPJguo3il97kkwaTc1kd3s0VtjLNbT2pYiHBv5Ic32lsxRG5
s4fEvRWYqNmYnQV97Ohjy/2/vtgemSV3YWN1BluuR1FsS872mDxMvIUeKwoI
+evacNesANdCW9leyW8LPcDae+pw+j8Tx8YM3Mr5H4lDM5LNvMpnFAkvzIRd
tgI3TqRh+OlyVPUoGUoS6Zl4vHusBHHiwUJ8dBJITtZbY1NhlK3qrbmsgPbS
ZIy7Vs38S5FX/JwLiENyiEPUGl6JfJxFHJLJOEQzbJ4e0ILPRuVg6iNAcyxV
MyjUkpMfWo/gph7by3J5Prbcp11+F9MWn8E3t41QqaZrdRbEIGeIQUyIQfh7
2mrNsH3zGQw8+BrDNlXjh0vgl5vUANrbH6HvXmtEtJzlKaIXbl6iDiRikreK
+VW9oSyTYN0mCT46yS3i5bOL3kFmiATvUUSj5cqn07Jw9b1ZEix3ZQHHMrDM
er6FH3L25myagTcWS3FFcOLLw//IF9n+RfhBOwtWyY3YtDsNOt583N7azRf/
JV0cCVX0QlOrik2LEX4PWNCTLhTYu5PMa0wi5lo28tJ9n3NJPC3TOM938O0q
lHSxehaiz5gELHWown27PAxkgUhyFcZMS8JqlxqY3s1G/zmJOJyo5tXkp262
WJSGs5kqZBFUfT9XiktRFRQoSLHGRYHWggqMXiGwxWs+hqnKrcE8HXImp8ah
70opRmwnclpEjvj0pH/JFs7iuNUf2YK/VtuIZWzMaFEGbmcr4XwvmxvBGGLW
8E90sT4Ld3NVvKzeR0ubWlgZ3YXM8FIMXZqA3tPj8bE22ck2Kd6bTRQxPw0H
/h1tfIj2umbs20oVGBuH6ZZ1mkOuKrPZdEU6Ju7NwjRi3/4zqFuWZuFO4h+5
YyQfZYgb8ilaFDh3PhP9iMQkC1MwdHs6Bq5Koo6OxZv/SB0r8uDxj9SxpgAv
/gV1RLAFrtReX89izN6biW/mU3WGhHOsLSEXZ6xZLYo78WeYQy/yv2WOXiiK
K8Zbc8iBeCV6r2+hPq0G0+bFYgPhgjy3Ah+RsHf4aA49as6tw3zS5UUujUyo
Igg1lNdi6myKVKel4nBwG3/5E1SXK5FQollnh7qSeqzamYK3p1BMvKwMI7eX
4/PfyK+f5kZE8YLuiCSi8CSisCKicEMUfQ9/fhTvjuhLQVl/xDS8y1X+XeqT
lpT++HkpXV/RDxaV76I2sj8xBX1f0g/WMiYs9jlB4o0kqnAkqrDDQtsXUFb7
Y/waO9JrW3y6wQbDtlvTxwaj9j7CxC2V2OMEzoHrKgf2XqjB1M2lZJJZ1C8J
3PDpuwSgV5I1M5Zdtc3YtC4Cfc9UQvbnaOJm9n+mCaUSV08k4J2jZcgj+yz2
ycFbazJhnK3+I02cjqc4oxRpXRBLqa1WIjK9DQ2dYke/xSlFa6sK8shifDKL
vD/zehYsa95EP/s55xNfZBNfqLrpIhP9N5DKlPRwNsrrsGh5HD6mkDioVi1e
rkqtxPjZMZjp3MReLJqh7R16dHE9vxcCkcrOdTlEECoiCP4v2om8XK0K2Ccq
sPFAKgac47edrostw6iFaVgTyH1lpUSSVLpUc9CieJugQsJ9jp+S4C+7/kgY
MmKCIRSkbg/lhp74y30gTSaXo4QfE7U6Q2SxQQL32uUMvgTH7AOoCivw/W9J
+NWsgaOpSpEkIpipdcLkWjo+P1GJaqUavnel+EC/hEIZEl7cfx1UrFjDhnPj
0Xdpci98qpUs+RKfLEvEG9Po8hqRJdpw4gAFD6PJ0zergziVzPDikSHB1AgS
t1Utt3uP20VikzlSHI1UoSywCMO0kqBzPx+9l2TiWpIaMu88vD0zFmPMG7iN
HERA0XDFgjQYpCjha5eLd5bkw6+gCfs3JmG8cQ2y86owcaWGKyTiXEx7Wyde
BRRj1Iok/HUBzxNTLbt5YiDxhISiE0PRB29pxHKdpD/wRGFgId6bGo0PdhYi
nr4XvyjCF9Oj8M76fIS0dVsJI4sBiwheZibg3RXJb3AiI8EtTMKYcyVI1Bxq
0p/TZQV54rbWBfhhaRL6zorjhqT2+/8bwuiNOgKwKQzAZqTjUmSb+LZCQtdB
v4RCMpgNwxNo/0K+6+x03IjrwRdjI8k9KUG0eCrLAHR2qFEiq8WKzVJ8vjSR
44leB/+BJ37LhWcxD+LxoSX4G+MJrXy8rOZ5ItRfhg8YT2yQIa6tCxXp1A/z
ozl6ektLiqGbpBh7oRhPi7vE6f3/mR8SoRetEGE/xLsAff8MPRBa9FqUjqPB
3fTQmF6DmUtioe3bgkJpBd7/LQ27/DT00JpH8LAsBvMeNzIQFemhPK0cA6eT
bi/LgV2aip9IH4mONhViI8sw8fdkfMhcjWnpGGLISzaRAuABk1KJBiopXgCS
XpXi87HPyDziEFzPfA/2qUZ1VBIGzfPHG1pR8FWQcYanYMR8um9hMI4mVQj3
dTGrIRrII7PJJBpQQdnQgcnamaS2WfhQm9R1XRG+Jkr+cA4Fm4PjMO5GNfnD
ajhcZ8FnJGetX25Ox/DtGdDxamKHu2o8cFUbHNkw5Mx0XEvo+L9CAe+iobAG
k2YnYMUTfs6wvbwGI+dQ+G3X2L13DFGA4dkE9NtfhMeZbGlqagFb9J1aoESl
kj8c/g2NcnShUKZAar4Cbk5F+GlBHP7CpgM35MAwtbPnHMg/ccHbiHLKQr81
aTgWqmBlIDWvEXp7k/CXJVJCjg4x6siJKMHAuem4ntAhtPkDpJAif7MgAzYy
qlCrArvWxRIJVPHrHWvrsWxlAsYQwCnJLV5HzsGXAgnEk6P05TQpjHNE9euD
4rBcDFz6CL1n/YDe876BZPxASHZ/z400iVsURb2QoD8xgImU27eCu3bqwBcY
fHwl6YJCkPsHbHE9dLemYNzlKs4/rBbgfmccdV1VA1auS8BiD36vUjkFyh/P
z4BpOok+Tf6/C/eSsVG9SAMjCe4lY+gSmxbWZnDP22rMQ1KLCVH4aHMB/ISh
LXVJLRZqxXBzhfqvFZxW7dUh92ltFhyYCNNLMXx1HAYQDP9lay4elhFVZZRi
IPlwf91WiDClCPeDObj/iQ3bz5LigHsd7t9Ow1t6FahoJkIzS0GfQ3LYPSvH
ryw0mN8dGsiym+AZUoeQQvG03GZs3J3ITWnPdOQlxCB/EJsun5uCva8EspKT
L8nGeaak4HdnJYdPd9kEzoR4TLjbwFNaTR0WbCDXamoy1j9r+wPk/52Aho0b
SUZFvsGJ7QNIvg3H29sKEM6NdquRltgAr9BGpIjnVZRVYewyNmWSBj2xGnV1
mLCEn4W4lqDWFFFTVoMJxIqS2cSSUe0i5tcUNODUpVxonc2H1nn6GNC/r5cS
KfK9xGH+ZJLQqhw4FnWJaNlCfteLkFr4JCkFm/sSblaZHF73OV7BT0QkEfZP
iOECxEPC3FEKcd77bF58JllSOi/gUM989BtF1zYXI48ionji9D7sO5HW/QKe
HyoKGvH0dR28M9rYCc7/fngpphwjp8ZgAsUTYpDv5ZCFN6dkwTr7P7BAVDHe
XJiOI0HdLNBAQcKMxbFY96wFRekV+HBJGnY+07BACwUJC5fGYIFTI/P6RJws
Sy6j6JHFwbmMBd4W7LCsoBnewXUIyBGNRwH9o2xGMA4j7vI5ZIk+MmKDKGKD
PLyi9rcXNWDhGqaBGdjur9aAnOXNPLxFYfUXRylwAhsXJtBcSIY3NQ3zHDu6
BzLacIGNhI6Ix0IrBj1K7NicyA1vbnmu1FTjwJ5EbphzjQe71oqNO+iZ4RTH
nq/gd03sbENwbB28IhuRUKkWG9pS1Ij9LGdjdS7sEzpE8P8/JIRE3xwuYcQ0
TbDCtg7cPJSAj47IkSR6h0QIZtdJduNJzKOjqADJKO6/I8kyRyfieFyHRlad
1QoKPAvxORujHEG/D43C22vSMf9cAQyTOrrHl/5lcBDrkYO3Z/GlvMGV8g6V
EsUlK/TelIPLMUq0Ch2a/FqOTyal4XJCu4YV4p7J8MUUQvcCao1CybOCURW5
SF3wNEpHb20qjs2BdjRj5Q7GCtzOlgh0zcd7xNkOsk4NK1Sn1WPzBRkWnyjE
4tOFWHZaBm3HGtS27eTu0RLn0sP8JejzqwRmacLEBPtBi2vkcuzd7o/v9JpY
cKKhCBWjq2SMOFPOzTbXChShl6RCbhj5bFNTcTWRdyy7qpuwZX085lFkXJ5a
gk/X/FcUsXx1NLe0bupVeS+ccywj9DC4mYW/UlAl+V2ckSYVKmvAsg2xXFQw
9EgRTtuVUuREXvUvMfjqbDlyiCGaiBI+nR6LLyhG4/YuaWzA0k2JXFbOxwcK
8ZpVuKMJS7Xiuennq5ldAnr83E0R89OhY1qOfbvjMdGxiYuHEtxJAXUKcPh2
IcYvpq5ekEoUwU87pnvnU51Ylk4WDtuX4jQp9N/msSVqKTiZxDc5i7p80Lwo
LinpzWXp2GVdim2HpOjDDHtRGm5kkFsmq8H03xkmp+JsqujnqGBxMZ1r448G
5ZB3ac6hZyzxN+YUL5VimVnZG5zkPsI5m1KYvGhAqZp/2s80jRoXhU925OMM
1e6AQRr6TI7ilOxxVRfqs+tx/Q7VeC5JZE4yppyV4bR3IypauyfgmirrsZgR
0iQpTocpecjkJ1btLxMjsNBtVBx+1M/HCWqYcbACzdSYeb+xLDbiP/NSGNjK
8Ov6OK4hUx0auc1XsuNK8fWEWI5R3tiSi5PWcqxgaWZsfd/4aPSmKp+ykWHB
9iRma/jiWg238VlNRhVGTY/kiG7tXXq3vQxT19J7BkZhtHUd6jr/MyWMmUnP
T0mFlhl1mHURxrEJpLXke5SpNZQQ+i8ooTBCjjeIEo6FdFNCU3otZpF41viw
wKAcfyVK2O3fIzAg6VFgMPfRHwKDqvwqDGWUsDAL5kmdPCWMRn6wHB9OJG1a
kIl91F8GJrkYtIQ5QYnYHcZjXaJ3NyVwg4FdHXh8LxN9RlOjltJzZBmnDXPw
xRzSuPmZuJ3Ba6H8dSlGLKJr42LRe3EattiU4PTjWqQRHF5jkx7D4jD3fg03
WZfiVYB+5Ki9ty4Leg5UjxuZePvXaPRj2cVVgmayfL/RMRiwOx9n6Z4jFzPQ
e0w4FyaaFakloqoq5U3YtZU6XysHD4rV4m4Zf44UPvpHUuDNolOBQ1sZ2/Vg
ANLH9JeF+GRFJnnAKg0rGF9MIp8xE9usS6kEA/tSST8YkIgMyIl8XS4yShss
bjFDi8T3p+T0G/1uVQbv/E5Jz1mIf0EH0S7Z6LssGfMNS0lN2Ov74qxjGc49
KMH8LWx0OB3WQg/UplZh0sw46DxvZpEML6APOWG62ObgLwvzeOE2K7CDWGGc
eS0Ky2oxaWUi5joKo5wtTQIr8H5fQXAJBs9MwMnE9ncFhQRs6HMOKcGH8bdJ
u3E56TR9P88U8hyntefBTw1167XVmSz8fXM+wjqgiRK66uswZlkqppnznkgF
UcC32sk4TIGQo0kq/rJDjghxGpqw/cFdshfdUoS/KMbf1/9vzTRfTuteD5Ff
hq8XaZKS+Ip+goqcehhcz+RzWdnnV0Jp42oklvF5Sz5mmbz7dKUG3BAzQY3R
CYpQR8dh4m3xmgrmp1O43NV17q2Cnn4nMAAVSbYx5WQhZs5NxK5XvNgrkisw
RCsLK0/k8LPNHAMImtfejufPKGRj5swcAebTTkuCtlM9yoRbMokBviLQ+Qs1
R580YwrLnf2FsUQiljk3g/FMgAO5cKSA72yXg6hVHGGsCCnCX2dEode6bNjK
u3oSwKcsI5hcDq9Wgbj/ShyogJlVLnqzSoyK4qKtNxZKcfJ1K4ee6W7kRTCA
mU6Az6YUGGisK0JiVffygC5FG24bMGqNxc/GVZC1i7/9jKzQUujaVHOnK3UJ
VsexAFHb4FO5mLmb/v0dgcBqqlalGvm5VZi/IZFP52QDPWNiMcKgGBE1wtY7
saUYQNf76hbiglEWH19Q4PDGtlxcDaiHg1kGnxFF1z47VAi3YhU/CKDsRIJ/
EX5ZGcsLnQQnmUxmeLsKeU0CyPwPBBBJOLg4FTomBRi4kB7/mcSxIgPHIyme
UIsG8BYqsuqw52g+7LPbEeqaiXd5MhBtpiyzHJ/NkJL7r9BwQUVSJX6ZlgDd
CAWqKmvwHZH5WtcWUanrMqsxkQS//lkzo0BR3oraRqxZSX0xIQ6z7euZwyVY
5nBOWd2cinHEtwUKccc6VQeiQorx43yq/IgoYVV8AhZZ1aBImIeKf9qDJIQH
1XVKBJIifj8/jn+O5NZ7ZwFMY9o026HJQkoxlLkqy6RYapiLd5l/PCYeqz1q
cfIw9e3weI4kGoV6PPcrxdh50UI9YvCNQRkC8zrFbeIaiptxhakHG2/5RVBH
rVzci1F0b3LYzYrtpfVYSdHNyGtVbAOPNwVR/zmqeOdfUkVjajH6zkjCEvum
Hlv5vg1VTRM2bkzEAuJl/nCyNtxikwqny5DbnbzUVVyDuetjMOhSBVvCIx4I
1yV2hebvX08kPMpEf51M2Gis623Up5Tjl0XRGGLZwFFtV3kDVm+IwefXq9mI
HV/CR1QfBU4fSYBkfwkyWQUbiRQ2xGGqYQkOXsnEXzdQx4rb1f0DKXRkVWGK
VgxG2nKulkQjx7ZWmD+pwNMClYbWalO6MGVONqY4sdhQ6Ik+qMnpwh7zcrwS
0o/CHTPx1kopLqeLwwh9URpaiPeWJmOtMMLM5pZ/0knGBrdarF0Rj19tarvP
73wT+eGl+Jmw9ZJ9Hj7dnIZt/z1BaLJWe/9j1qpmr562TqTlK5BWQJ8iJSo6
u1mOTcpJ8xQoqFVrrjVUt9G9Ssgauq8p6ukau69G9YcJg5/Y8Mq8RHyyKhnv
rsrFY2FOvbO0ETrrU/DdFik+Xx4jksMfJqEK5Uq+ToXs08ZcQTG8bWvqQFZB
K9JLOzhIbahWcsWnyZRsyy7ur5qqmUIhTmalio2Jdk+FdXQim41tytpQofhD
dPAZc//WZsE4vaMXKuo6yNGoqO1EvUKt2fmSTbxniZWi/2eUtGtmW5RUq9SI
Enw3N45ztXe7NSKNaqhUCTrCtyv2eSH6MeMmIvvpeClCSzve4Er7CK89ZBi+
NJqD/KHXyhAnnH5UX0Xty1WguFmF+oYOZOS2IoVqUCyYbF01L36uVvT/0tYu
zSSHUtGJLLo/q17NZUjlytk9JLuq7kzpjCL+Wl6julePmpaVKXjN4BrbxuKE
PsJb/8gS/Js6WjuQI29Hq0qNsnIl98Y00qZOERvegrKyATt1k/EpQc7QDUl4
Z3MOrOQQE1k761uwfW0chlyogFyDE2p4WGfjjSU58CjpgpqQTW9zPL49WcpQ
R4MlAY9y0GtBFjuzTwMIqk54s2E1tjhiQRJWeTShqK6DhN0OV+cifMoSWWck
Y4l1Q3ceHlvGUtJD80jT61Td6hP3R5YQbUteLDxC4sqqE6TYDx0tncgtJDGQ
mjR2qlHI3phPnVHdiRqqibyiHVXEoD0VtKJYsEX6yBQaymMpY7wpCJpXoerW
acKse0Z5GH+sFCnK7rnaLiX0dJIw8ICcZSj8d9zw9h+4QTy31+dWGt78neLv
HKHpb3OerINpBvqsK0Q082672jVzzek9aKGwGrO0o/GLfXN36hkfI0R65WPw
/hwYZ2hoIMSTT0lyK+9OdY14xM8xW5T12K9VXoM5a8jRMazj11SqO/HYKpsb
Aj8Z1srNbGt2VGWzkCxKG59A/kSTcN52K3S3J+KDVUnosyQFui+V4o6qPSmC
U/DONhheTuOGKfTD2tCqOfqMX/yU8FKOv0+Kx6aXCi5xTkSWrsYWHGO0tLIA
T2UqMZmK4ZDZ6URufZpxLo8vzVW1mLooHt8cJ3evQUzG6ovG8nqsp+Ctv04B
XgmuCaOOYeQmTryUj36LMnAxul1TG/KOtuxNwk9bpeitnY5dr/8v0gZ3+IEI
78tj+bmKyVF4U78YYeLxMK0KXD7HFi0REs6ge5bw8D5IeCU3R7uYzaAmoM+i
xDfQf0kiXe6/JAH9qfA1D+rZ0PM7oorUN+C3VaykNFwUVwaQz01+u/F1KXqN
JX9rfBz6LE6U8G96E33mxPE+MPm3Om5NLEtdMlSjcX+ArveF16kILDxt8vDR
uEhuCYN1cc+FWyoEPc7GWyPjsepBDSIzWuDzXI4vx0XjR8NqFKh4nIrxyMU7
v8RhiVUVd8/zoBIMmhiNry5XILNNiDj6oUHWwDlSnHtHkWi/JYms3ug9h5u/
INc6DRcSOjlUEIXwD7gj1popXlWZEqnEdIW1nKMv7OvGm1ascy5FdzH48UrV
G6xKdPnujXRuDd8Cu0Zm1v8nqMAxHxt0XZeEv+2Ss6PzRG+oIKwE309LxNGk
Dg6eTM4moO+eAtgktjAvL72FXhWZ3sz+hYQSYWvppmYcOUpR1KQkHPRv5Cv8
ISIDZBQ2ROEvWwsRTF50W0M7kjP5R9krDE2z8ebMDJwNbOSvpdFvOUru2Ig4
lyz0Wy2F3ssWvtS+9NJGnL9CMhiXhJORSuFkU7avdhP2H0zkguHhVyv50vtx
JZw9ksSp0ze8S8v9qWsUOLQ7jgsl+uuXIr9V1Jf3/wAdop2p5XVYs5NsZUIi
ZpryOsTVNqMZjo4Ux1Jo8Y52PryKNGnSxXGVmLSAhc5ZME1u5mvUF3evpXMZ
cr9SFC/XTO92QepfiI+msUyKHBgGNYv9/dyrGMPnsQEyKU7HdIi+ZUWkHD9r
xaHvnHh8cLAIQY094UwFB5Ns9GLK+JsUe8M6/gyANGXWYuZ8imSHxeNghGY8
ryNBjn6TqQJz0nA+RQMglZHUrbMi+Tjoh0j8dKsSBZqXquDhSKr7fQQ/H0Ga
tC6wXbPva/6LPPSdStdHsiNoyY6oGC6e/ToGU81rGJtr0IPLDpRjEhHMEf82
zQ6ThMrm9vkYwyb7hrM5w5H8S6LQSzsL+k/qWFA5rAdmuFhTrD02Ew+KVB/0
uOxhQZHFinQYFUCcY2CqcZ+Q6a2JkXyoPCwKH+2TI1Amesx9iBXa4GCUjv6T
u+/pv0MGnzyVsAvm26jJrcfZM1K8OUVY3MlaOCwWg3RzcDFS2U+oRZRrIfr+
HEryzYZPazc0qJQ4sola91kkRlOMXydAGdfNra24ZZaLzyeIi3RJisPjMM24
HEmt3fvzsk0sDu5KxQijeg0olL+kflkhxYWM7j09VYp6jJuVgJ8v8gpfGVSI
PjNjMNZBHCyiO+saoLUxBn0v1KGluQOm5xPYNENvbrZ2AFWChPBzJN48XqXx
qCultdA3kPLDIEOF1a1DYzHsTCEs03ldyfYpwodjQ7lnuakpbs12FK827Pvg
MG4BlnO2GrlPWRcyYUfyc+tU+NAIbon32Ns1kDdDZGdFIZV8IwufT+6xrpb9
n6KxDfcpyKvq3itTXdWKHdr0mlHJOPFa+ccDwJobMWctS86rYoIRfQuVvBb7
rufwq/qGCBVlC5eJMEcclsFB2iYg/9tIflWODXqpfINYFZigJlB4blrBnD2N
d0MG+cJHhtnrCauGhQuy4hs39EAeTga3MrmKlS4PK8LH0+m2H2Ix+U4dG+nS
TF9UJJThxxkR3BLpjUEdf8LyOyj+8/Erh7FrNSIrNEOS6upm2HhVwNi3DvE1
XQMETVBUEOT50mU3+jhV4WVeO8N/sWolhU2wdCrnf/auxqsSlcbwm4obYfOU
PcoWGht7VFIpxh78a3zSuUGZfsKtZRVKxBZ2ChLnSy5MqoOpK93uXsl/qAjX
/M4RPbAiP7MeZh71yGnq0liLqg2+r+qR0mNDEHRQi19WwOgJfTxqEFLS1f2b
qgMvgsTfqhFQpBY2BCEr6GqDx0sq2aWCr/iTasTXqfuLos9vgo1LOUx8GyDr
hMaWu1SIDqmC0YNKeBADtfHxjRCpqREVWAkjahf7GD9lR8hpcjzZo5GhtXBL
7V4L3VrSCIsXtUio7zbhLmqkh281XBJ5gitPr4fF00q81pzm+BYHy9HRtTAM
bIGCwtq0hGrWkN4wcmcdYeTGalAJ61hlt4v/FhcQuPhSBanJ3C1udchXaUYF
G2TNcPAsZ0+S2bA3vcM6lv2L/5A4jPwakN/QhYZC1jnsFaz72b29hN8bIW/t
WVE1okWZCLVySNHMU3cpO/H6JWnY8yaKqbvXdHe0Uz9Xwzqaq78YtGcmVsPI
uYKvjHM57ryoZ4O5/cSy2pRw9OyW/x0STqs4L0zKTgXYsiq6CU3xrUeBQjN+
11reBAdvqgrpUGChSgwamMv0gkDGmNQnqFT9b0wQmj/f/3/T/7/pP940hvsn
A7V6yCulSC9JoW8ZpamkdRmlKUgrTkZ+PbdA+hfxVihRXZdFtyb/4Vb6jqzK
IjSp8TfuVj4e6WivQWltAWQ15VB2iZv1M3toRUVNAeS1RSim3+X1lex3sZSO
9iqUN1ZDQXF1yJ9thCIKVt67oftgI3075LSVanbIaTP222/EjajnLG+Qfz2z
KDlehJ+ErsMG6DltfUNz9xYceKCDk8/MkNImtIPfxThHegATjvTFDydG4UJi
IhvB5vaAZ/trKfPxxGc1xh1+h37+ED8d60e+z0Scj05EXQe6+USF3JR9+N1a
F6+b8J9adUdTeBdqKnxx318Xm+98jxE3tiK0TikW3twUA0f/izB/bQr7MDPY
BF3CAZOvKMb7DU75NT0Lz0nehWWWuohs+3eFB3D/7YOmMj/c97mC6EZGAe3I
yjDG9SBvlLZ1n4rUWhkEK5/zVJ8mroT8HHNcC3RFoSb8+QbKmgjY+RggsIof
Ci8usMS1F48gnIQHRWMCLJ7fwMsScbygnajkMo677MUp1z0442WKVAWLG9XI
zLCCfXwEarkAsQuywkewjfQT0jXUKM65S8/txgmXXTCOT+x2cT5Aee4DmPmZ
IZMf6EFU/FUYRoShUYiZymRuuBFgg5xmcUq7CM+DD+Ow824cdTuMeylpQpNI
g+tewthHF0eebMGZFw7IEkZma8uewCzIBqli02r9YPHqDqKElqlbIvAo9Bac
U0PwPCUA4uGEUDUiLuYcjjrvwin3s/ArlSMi/DQMqWmVHaSpEZdgF2WL256H
cIzKNE2O7R4AJzNrT4dz0BHS3m044X0dQeVirlZftCuTYe91AEef7MDdFA88
Cb2Pl2Vt6GzKhMvzLTjiY009oXxbeFWB1Ajn3XZwpdyKfsn21tE4goy5Y2Ku
wzYhgglWHIirL/aGRaA5MlqUGie4Qe4JE096+5NtOP/SEmmKbgcZ7ZV4HrQP
R6h/T7jpwlKap9kUqiLHEXdfPUJRlxh+8vpfLHfHdSeqlssenPU1QlyrsF6G
7ZfWipwcC5x9og+XIhknzgr5A5x3OgXvIn4JQW2RPU45H4NTRjI3eFeXZ4+r
Xnug/5jdE47AeBNc9TZGMlG+vNAF157shENuIR95qEoRGnseR1xvIa6xUegw
4uMX2hij/wUORqcJIdpHaCt3wyXPvSS9rbjw2lcze11R6gHbUDcUCN8bagPh
EGwHqZCTUJ5tgfPue3DSbTeOOV9EcGWl5vxkuhtRsVdwwfc8HFLjkPz6d/xw
bDiuxscSKhXD3e84boY4CaNOvBnkS41h4M7edQmvyqPxNPgibgQ+RFFHDaLj
r9FvFxBUy0Zxm5GcaoQzztcQ1djCyTIt9SbFu+fpuVKh5z/goonEmFMw8DNB
dDUPFTV5DrhGMjz8+CS8CsIRlGCKq09vIprT/UqEx9/AKaedOO9vjiRN9/fj
YCI3VQ8bLFfj6itT6rdtOOV9juoj1r8MAeG3qF9qNCMQ7RXuuOy5j5driDeT
q/C+UaROuXj6+jissgqESViCj3QL2CdEQ1xfjdZMcrMPQO/JXlx7dhWPI0xg
FhcIcdl6fuptDmpOkfxPut1EbCNv0FXFT3EzwJIMRA1VaxQeBFkiQTzDqj0F
LsF3EMnGoCpf4t7Tbbgc7IKUAjvcDX2CXGGQvL7CDeZBFkgSMKKt/iWsAk0Q
29JGkHofDolxbKz6DPvt34VV7AYlIkK2Y5zeV7iazxYn1OCp5yh8dnoJfErF
NOZ2xEcdxMQDn8MgoxBsaW6g3yR8enIOnIvKhXvIV086iSm6H+FIMsvz66SQ
YSY+O/4r7HLkQusqIS2KpyCYS5BCRpQ+Nlquxd20YETkBpEPuxI7nA2Q0KlE
8EstrHeygkwA4bjo7VhjcwkZbN+ZnMvYZL0M1+OCEJHzAKfsVuPQi+dCTF8H
d/eFGH18NOzY2hVVGoztB+HryzsQ38THHS1NuYiXpaG+owtdHWXw8VyOtY+O
wTMnCGEZtjhovx12WZWErKG4+Wgqtvo5Iyz7JRz8t2G17U1kNnegMlMX841X
s40ReOsruoDlhrPZtjS8NGqssNV8Ok6/sIeRz1GECuhdlnsNm+8th0nSK2qz
E64++A3TLg7HqZhccksicNp8EMZdX4o70lCEE27q2c7AidgkfnakIw+u3vOg
5XwTAdmB8I8+htV3D8BbXk/SrICd2zKstj6BUPrtUcBmzDo3CFdyalCQeQUr
biwmqE4j16FTM87KECcj/ix2PtSHX8YrhFMbA8INcPHlA8iUf9iH6snDcVjn
7siAjrffz1CdehbLby9GCEd25E4UPsTh+/NxO8qNpBUIv+iL0He7jljOYOrx
1GMFtj7Qx7Mc6u2ks9hisQp3kvM18561qfqYb7QCno1dmlTa+uqnOGipjYuv
3BFOveP7Ygt0XK8itlUlRJqDuB4PDl6Ob3e/D92YOO5dWQmb8dOuASTVSO67
LHYdBuz7BLsD/ck1eI5j5t/jxxOfYozBd1hgMgHTzn+GsVc2I0GtJE3fj1G7
JdB5Hc1np3em4u7DH/HhgYl4XCawa3sWrFwmYZD+R1jkcIelCPBC/QSq8ic4
ZjcdesHPSaC+uOO+DjpONqhSU+CfcRza9/QgLo4tld2Gjsk6PCczbs4xg+79
BbgY588Zg4f/Huy0XQ/38kYBMsk5ay+Bn89ijD75Pgaf+jtmGM7EbstfMfTY
CFyKiyZTTsah859jwp1diBSSR5oL72HdjQF0/+cYa/ATFpuOw/gTH2PmvQso
UefD9vEoDDw0GMbskFlUw8NnKr7ZNwp2ZTWcaP18JuD93T/CMEOqQW4qyNXx
7xh0YSYc2L549T7Qv/sDJ9HRBt9ivslETKdqjLm0liWvQUEMtv9mf3yp91dM
MqLmtnbPmBVmHMPcM99Cx9MUgaR/zwNWYanDEQTVMcNPx1XLSTgVW8AD8ySo
K1xwwm4aDgT5k3SfwdRjAzY8toBMmLJqkjlg83kJRtrbClstKuHnvwzrnR05
x6hLmQ1nlwVY73oJ/tnBCArajClnPsX8x4Zc9lRZ0gVst1gOw+Qgrhcee67D
jof78KKuHYrmfCQUScmEulBfZYUtxivgIiw7V7Z4QddkARyrFIgL3YSFJrsR
IMtBStx6zDXfhdcCUJdk6mGB0TK4C7uFNRffgNbtWXhU04zA579ho+tjdpr3
fwTuLwlhsuDgsQdrjEdhf0QU1E15sPOYjkkXp+BWUiK/05+6EC6+utA2HIXd
rwOhbCqDi/csTLw4GVdjwvkZ6a5S+Lw4jDW3fsH2IE80NtbC128e3TMB58MC
uDFd0ZPqUobinOUCmOSLmbb90NHBhiOVJMmN2EkIUSwAdlK8HrY/MkGmohLW
j+fgSFiKJmGgMeMUlpithheby+2Mxk0HHWibT8CpJELPmte49HACpl+ZB+v8
MgYPYvE1ZRbYQIhjnS86heOhUFSjrq0F4aHbsO6RkcYbQmsgTtyfhNNJKSjI
OYc1FlvxXEiMbJTfxIa7y/GoVMDqWkfssVgCh7RIPHh1Bg9yajhESw/fiGWO
tyGyYHXyHsw0+Q3OjOLVoThrPRo6PoGa+Zfq1NNYS3FYnLIdJbm3sMlqF9v1
V/grhKPTFKzx80K5KhVnzGbgfLyw8rjJG/r3f8Xt3BJIU45ji8NN5Ki7T9hC
Vx6e+GrjbLQowgHUCA8ctliDB/JiNDTkUrCciKTCSMQXBOOW3WSsdjyD2MoS
1LdUQ1aZgpSiKMTT7wFBe7HCaB6s0qJRomhGTNReHPB1RKlYTXUGzB8swqno
GFRXWGPjnfmwL+kSY7O86D1YaX8RmcKUVke1NbaYzcO9gg6JOFuvUjWhukVc
/8/+avDYdQWOhgSyMS8eKCeAcUJ4+AaM1h+I4wlJ3I0skh1/eBiuJPI4Xpy4
E0OP/oCjoaEol93E3HOfYK79Vcg7u4iByXQuvY/p1obkzXYgMe4opuu/i90R
8fwGC53psHEZh29PzINbBW+n9UWO2HntU4y/NIiQaAWcKniPQNUqR7osAjH5
YYgrzkKtkoDv2Qps9nKB5vTRakdsuzMT5rIy5OVcwQ7bU4gVEvvKi80JiHUR
2lyBx87zcCxSOIV8G9SdCnSo21BdlYCYggjE0SeztgaV5Q+x4fS7GHxnP4LK
qlHfFEVg9zN+ODIMl8kNb4MUp2/8hLmWhxErYHlRlA6GnhwAHS8HNKjV1Bu7
Me3s37Da3RXsJFZHt+n45fQE3C9u4aTu+3wxRh6dhSeVdZy4Xz6fi4H643E/
JwMtjVlILIxAbH4oksqLoejsgK/LcIy6uRQupJfq/IuYfe5jzLa9BDkhXnWW
IVZffh9Tra5zBlGYfhvLzryDpV5uKG1qQGml2L5IZNVWIUd6iJBuA7zKBPNo
z4OJ3XjoBr0iR00GM4f5uJQonErZ1QjfZyux0fNJ94Hu1Y+w3XQqrmWxZYUq
RIbpYpf5DCw23w//OiaQTgQGrscuKp9FwkWpB6FluQchYpqNSo6HhCPL3CxI
XfJgaj8Xl6WVIpZ0dihEuxVs6nPUVDlg/30deAk229bqh+MWq+FS04SQQG3s
eurD+ZhFyTuwwvoQIkSfLucUVt1bDx8BKFpK72CT+TK41rbg9at12PPUDRV/
CtS7Kp/j/KNtuPviKE68dEaBzBe3vfRxyWMvjgc85oco6sNw7THF6wHHcTLA
AdnFgTB9qoeLXgdx7JkluKTrlkQYPdkMI/9TOOVvAWlxGCye7sf5p0dx9Kkx
8tpEUP8AapkJVptMweFXtnCLdYALfVzjXYiNw1HSrsTr4E3/BOw7HpshrdIf
hyymwSRXoQF2VaMrdO/NhRVTILkd9B/shdULPZwKDYI8xxrnvAxw2XkTzkSE
g0xY7AwZOQFrrPbjtcYxYANRxGfkYm3yD4AYIJMjBwe32TgYFIL0zAvQtvwP
oE7uqF2RHMERl2AWE8E50bWy+9h7fw6OvbKhZgYjT3YLWy1XERSwh17jvM1M
XEyV8S36mDwgVxywWAa74gJEh6/Gigc3kKnpuFZEhGpjndN9ZLZKcc1mCe7l
i3lMmTB2+A3G2XKKfk9hu+M1SNu7p0y60/26U0BUMbj5gKwiLgovA5Zjys1Z
0PPUxQnXHdhgNAyzbk3H5cjnyMixwaZbg7HqAT+WpWc9EzOvDMcW5yPwr2jv
TgQsg+fTGdD2cUVG5lVokWb7t2j29KiI24/f7u9BhECY6o4UXLw3A6fDkiRi
hgUXumc44FGkPXwzIhErvY6T7lbMkxKCiIf41zC+HxMO/4CT5GOw4KBEgHF9
YoC21kicMf0CP5wdgpMRvghJvAjtW99iGvmj5ezcxn8H41UMjBsRGDAPg08v
hVP8eaw2HIdN3s84w1SU+sDEazv0Hm/C0Wf3CNfCYeI4HnoR6d2L1NWJuOUw
HedTcpCVfQ077f4Bxq0PI7IoBAZW47HhqVG3ScQ9wfP0AGTWlVMwehqHnHbg
iPNOmCfFIYtCl4lHv8bul081ixmy4rdiuP4Q8udjBCwfjHlWRxAvKI+y9Ak2
Xu2HwVdnwSjBDyFRBzD70nfQemJPbSnAg3/C8iWE5RNhVcy8jwYey49MgGVO
JmS5FjBw2Q59p404H/IM5QoVnrvxWP6ERdDNoThpNgA/GAzGiXBfBCddxjrD
7zDF3IBbl1qQwbC8L3ZESkkvO5EQdZJr31HnPbifkoDUxJPY/via5uhxNgAQ
/XIlFj82IbemFBaOPbBcFYvr9uOgGy7VOEZQJ+O2wxQcjy1GV3sOTB+txI1k
Cqg9luNYcCzrZLxiWP7UgxteifBbBR13O9RrymtEFJW3zN0GxRUe2Gs+Ebuf
3+/RN854kRWEvBZhXvhz1P6PWN6M0FfrsfepJ9dVBf/PsLw4+zYOPT6P+NpE
3HM/BLPXp3Dy6RPCa1vsstpHXmIb6optcPjBCUTXpcHaQw/moadxwt0BWaWP
sd9qO5FZK5ornXHM8SDCarNh76UHszADHHOxRAYJ4rCVDp6W1XVjeZExfjee
gB1PL+LOi8v0uQIjr6WYeW08rCuaEB26BXs8H7FjmTkISk44jJ2E5dIKX+jd
/yOWdzZ74tC9hbAv70BuwlHoeVlCWh4IQ48jMHl5FJdePoc06xo22Z9DXqdm
7x1uBD39GNbaUJUV6IbzHNi6TCQ4f9HtUaEED93nQ+9VMNIIztdSi18Ifc7g
XOceeWjC8JKq9gH23JsFi+IulKWxSQMb8NtadaEk/xGx4XnccduBvQ9+xRyz
lXBhVkJwfsF2Dq6myTVw3uCBQ5YrYCfPQ1TY7wTnN3vAuRKRhGQ6TveQ2cLD
+d08ARqQBkP7JT3g/CqD8/6C3KEMwhmrObiZWYDKkifUXxQyCpMAXq5zsNPH
lX9LZy4eua2FQUw897WJfFgd87WIbBbXvL4PdeMrHDYei1PxSWhujcc587E4
EZEoiCGTHJnp2Era2y3FTkQ8Xwotp5sso1mzwUZHHV75rcbv1IUGfpdwz+8A
9B4tgs7DS0jqELzwb9EN34NwOjmNe1++VA+T9b/ALgoZGaxWpuzm4PvQKx/+
TJnS5/CIvoljlkMx6GB/DDk1AHOMDyGDgC4p7hhmEHzvi07lx+PUWbB3m4BB
x+fCs7YRHcpUXDZ+H6PtbiJLUYGH1sMx9/4+xLaJcwKfcntkXbYdA73I9B4Q
kgojx1m4kJzNwfYu+zOIF/LkKkruYw/BdkQh64UxWOl0DKYvee2/83wbll77
Cnoxhb0FxS5K2YtRRwbiQPAz8GG5CvkpezBSg9ZpOHPjO8y4txvhSk3meHmh
G5wizmOH8df4Su9dDDn5DYVCxqgiCHzIgfUk2JS3cxL1C1iKX47+jGu5bNCh
BcEv52Pg4bEwz87oLXQzG3zzdh5GGL0MT4p4B7+hLIAEewvHrYaRYPtxgp1t
uB+p9FtRphGWE0ZvD4tjsT3/miHIST6AdQ4nEadZcNmEGILKhY+NiURKYUnQ
fCVZyHRXReOa/VgciJBqlhahSwpjx+k4m1SEqpLHJMctCCQbrE3YjeWWesjq
aifc24DdBM116i6E+mhhk4d9D2huQFTgKh6ay92wx3wcQbcBTAX0ueOzBvOu
DsaF9AZJT2zWtdgIb2HstE0RgJM9sHkPlSVi80obfUQJsSTD5tX3N+CZ8FxL
qSlhM4Urfxqb+WMA/871UdCLlVjtakUE2IEQ78XQsVkH/Zev6LcwiuxXw1Ge
i5jwzdB6bESSpADEbwW22azGPn/2llhctdXC/bwspMTtgZbjJWSxUeoXa7HT
diW2e3vRPSkwsl9KQUdGj+T7XuhqIb/57gLcymzp3iaq3Bw693choq0FUaFb
scaOiJWrthrRYWuw6qExMptl1FOzYRBXKD7Wln8ZK8y14V+VB1eP+dj68gVq
Ohvw1HUatKx24EZsArlwbkSE6+FW2y6625XFRlhjuBKPi8VkwYFcDo+qqwUv
X67FBhdbVIj+UnsELlpPhH5cPPJzL2Cp8Wq4CnvotZUZQstwDkzFWdf6R9ht
Pg13Chlee+CC/20kNnZCUf8aD8N8hHGUWoSEbcIC40VwYkG5io2jjMH2F9ES
EaSVOTexjqJz76Ymck3OYz3ZdpQmBiiFu8d0aHk/QXFnKq5a/zNIm+SUISvd
ADsJ3LNUgs/NttloRGjkZRh43UeeUoH2zjaUZVzHgcfnkNDcxVlkZNg+bHcx
Z6si4OM+B9u8HDW7NSqrnuKw9Rq4UfMbs65jvdkqBNU29xI6o7PSC5dc12Or
w1Zcex2MMgVvkpUyd9z10MaWBxtx2GE5ToS6IbtRxTf2PXBD5zJDou21cC8X
VZVILuc61hrPhbVMAPqOVNw0+xKTbY8jtuUf8Hsjxh39BAvcHqC5TYHMWHI9
j7yLBU8sUUoYmRW2Cj/rf0s860/4XQGv52dhEuKFwiYpQmPPQfvm1xh/U5c0
mPA7/hhmHnkPcx1vo4i6Wd0Qgcv3/kbu9yLyiSpRUWyIOUe/xIHXAVw4JYte
g5EXx+N6UnqPmb1KOLkvwg6/AM2KPzSQGppPxa18OekRNc10H0LqRbs+jTUU
ioQ1yGD5aDa9O0VjLWh/jiMUf1kWlmuGwStLLfD7iffwi8UpJDSqSXVzcc9h
BL7XDJ2k4fzt7/DT5bmwzObn41h4Y+txAraJwZDVxCIkdD9mn/8KC6wNSS8L
8ch9JoYe/xbbQ+K4oQMX75n49sin2BYcjc62Snh6jMM3+mNhltWN4F1teMoh
OHnZnC9SAs+AszAO9kRhcxpC4y5g3e1vMPb6HrbzOgozDDkE3xYawyYWeL1h
WzYQ/Uj3YZ6xDrzFybSuairxN2z39yb1k+OO/RwcDkkWfqyDs+dibHvmD1Hv
0ehJcfd0XEtLhr/fOmxzs+TnISke32G6FNbFJYh8vRG7vdw4vyEvfhdWkCIl
icGqqhyODsOxnJ4rbpOSVc3B2cTS7l6of4Cd90lBq1s0KF5f7YjtxlpwLOL1
XFVrjx3mv8G5rg2RwTrY5+PD1U+WugvzTLYhQPDEa/MNsOj2b3gg45W9o9wM
OqaL/zdQXN2aAkPb6TgcHsml2OcGL8XQ86MJIdmu9E147L4c+z1MccdxHnSD
X3EhoDxiHUadH4JDEZnMpOHp/Tt2uZrg7qOF2PnCh08tjtuBSRd+wM7gJA4U
/J/9Dh1Xe1R3diegsOsxgVuwynI3vEpzUVjugnMOC3HgZSTYGomI8D2Yc2Ys
rlL4VFgeCiPrUVjv785hYHmyPlbb6MAxNxcF1SEwergS20haLdUvcfweeZFp
/KxY+NOx+PriItjk0lNdRTC0m4lj4cndiY9ToG7Lx4NHc7DB3QSxVfS64oc4
4XgAHiTc9jpvnLKbBv3wCBRUZeNFmC6W3T2G2HoFavJPY9rJr7HJ9wFS6LeI
wNWYfH4UdL2tkV6Vg/jXO8kk9zH/B+xwe1PvM3hWXANVSzwu2y/HzfhI5NfI
EUkdtsJaF8GMAVThuGA1EtMM11PUmY/CqpcwcpqHjW5O3HY16nYprJynYYPP
I6RRGcmZBAMmG0gMlUQ94ThhPgvGOSLapuK61UxcSk5AcKQuNlgfxYuKcihU
4krXT7kuSAjZAq3bEygIIeW2W4rdbtcRVt4ItTC80tWZjHtOq3Ax6jUcyWh2
Pe3Gc27KOl6fnrHC88Tb2H5vdU88R1spMgr9cJtEuP25O3jTbCLd3oNdLqfg
JYtFSuIl7H28BQ9lwmPvQq3IxA2z4dgd4C9sbkWgGrwKCx5cQZam5HYkvFqA
KQzLFeJYynecab9+vRrD9fpj5JWRWGo0AbMufoVRF37CwjvTsNx4EmYYfIjv
Ls6DRaaclEQJP8/5mHjqE8wxmQlt0zEYc3YgtDzcqQQVYqN1MelAHwy7PArL
7kzBohs/4xcCzsk2N5DfUAp/91H40mAuHHJ5kGytc8XqE3/F3Ic3kCcuKf0E
iqJ72G01D1cT00mRUuHst4n8shso6lRBnncN849/R5jtj5zKLLi7zsDSh1e4
oYKqlHPYaLYMFkzPq0Jg4b4Y610eoKxDrcFylTIPj59MwuCTX2DK9fFYTkqw
8PJn+ObAdxQlRZHwUnDyxiAMPj4A067/gnnmexFUlk5KPx6jz3yFRaazoW08
FMPODcO+oGhqdB6snSfh+0PvYxy9b5nhL5h8dgDGXR2OJaYzsPz2aEw69R6G
GO5CSEVT967cLfD134j5F/6GsRe+w5TLU3Ax4TXcfNdg2ulPMEsj3UFY4+OB
4koyVZMfMPrcVxh/aQS07S8jUzTLoZxq5UkPY+rJT6HtZYG4ihykRO/BMsvN
8KpgoJuN6/cnYan1ecRXUczYqoBCZom9FENeSpCStKRw9Sd0sb+F5GJfHLgz
Fefic3jdUdfC4cF07AqwgCuZ31a3h9zmhZ31IcTUk3EixAP5BAXSWH3MOvsF
fne/x610zYs8AO17G+AkY73hg5uPFmCHzzO2y4UI6Q3U/1vP/YD1HnepWjmI
fKmNZRa7KJSVwc17OTY530dWQxWyKVqaQGS5J9ALmQxZ/BZj3NnxOPHyCXLo
udAX67Ha+iyyVUq8Ipf4z0O6oiESN9yPwLOQ9/Hrc42x3+0oAgWXPyvpGk67
HMUFuscljz9Go6XoPvRcD+BZJW/0BVJDnKF7LrodxoMsPh+jvcQBR133wl2Y
jZCnm+DsU0O2nZ1AaF8zBkNYyD5sc1iLvQ4rcDzouTCH3IaQ1zuwy3YbTrjr
Ya/NEhz0vk0+o7iuqxnSxNPYYqeNPQ6/41RwIMtXRWuFN864nUN4FSPILuQn
n8YuL+pQDoDUCA/Rw5VgH4ZHQh0GE2En4YH3Omyx18ZOxw04GxpCmMe3q730
IY47rccO2+XY43ETkcLy6ipSnEt+p2EeehenbClIcdwKG2k8klPJt7VdhZ30
LsvsEmHEuRMhL/VwJzmac9+UVaG477oC2+mePQ+3knLw23uiPRRX7CZih+sZ
nHi0FXspkDno/xgFmhzMD6BuCsGdpxuxhQKeXU8OwzlPGIrvTIKN9zF4loje
RRE8XhyGUZgh9EjpZ5BZbnI1RnqzQiKutGT+9A6nS0iqrUZdSw0a2js0ax1a
ZTbYdV8L2ndGY5evE3fgo2YZXDsF316b8bvJdKy03IKwOh7d6xoyIC0v0yzz
qSuywnKj5fBg69kp5D16dyqORqSL/s1TAtHt/vzInbgDAJeemrgPi4w240U1
v8QwPWorFtmeRYomfFYi6oUWljvfYTbWA8ibkZp6ETvurYN5jBHOOK3BalMt
3CYaamqPhbnr7/j9zlKce+WBanEmoLMW/gHrsP7+fPoswjbnW0hr7uRUJzPD
HAfuLsL1hGe477GZYsXZWGt/BC/KCbjVUvIPF2OPjylLieT/Oqrh7b0Em90M
kdggAPnHnNbV5Jlin+M6Ysvl0PW1RUYjr8UlRQ9gFHAJZq9u4qj1b9j95BD8
KoVVkyzPN+Ec9jpqY7f9Muz3sUVWc5cmm7AxAfaeWlhxdzH0A5yQkHgOG+5u
hENmBsksH1ZPtuKMqz5u+O6EFoWrj+W1hPtyOHktwZp7C7H2/m846GMHPqws
xrOQA9hpswNW8begZ7MY2ne3knJlorbOkxyaRVhltg73kmNZ5/Y4VqEVgUEH
sOLKFxhzaSiWmW+ETXYO3dNBkf4GQaoLOalmtamJ6ijuvDeCYGsAfr0xDbud
Tdhaf77zh3B2Is+zgRGFSqbBp6FrsxI7HDfjfpq4aYAc3gEXcC/gKLbZ7oBl
cgzXUY35ZtB90C3dHMKI9koHGHieQ6hmzEQNmfQGDIJM8Cj6Ju6EvUKNoASq
mjBYea4lLFmHE857cPbREmi5mvInx3QpkBCpjx2ET3vIBzsc4MHCO8FOPkdt
tROO3Z2PI94XcMie3Nr/RdlZgFWZbf/fe+c3fad7xi4Ele6QRlHCbgFFQbG7
URFR7MTGJlTsRlFsFAO7pUNCuuXz3+973nNgbs398zzjM+ecN/Ze9V1r77XW
3uPL/pRUXrxYg8/y9tgt78zMszu59XQVi84uJOziKmaGd2f43jFEPr1HQuJ8
xmzvzcjd3ux5UywrwNmzA/4H6y0fAiWPQ8oD8cL/0D7JXVKn3b97tIBZIih6
V92g7K/yEvO3C8hITFbKjD4S3tR4vHaE8LSWRpq2xbl7GLPZm+Ml6nulddJC
4k/3RGd6U3yORstnKark4Ady0nfgE/w9bZf6k1CoUofXSbPwDB3IWYUBKfdn
4Ro2knhpG1n41au2CQfy9CnVWmPNM5butGD8lfsKYaXsUhFx7fdgmAB+Kc+o
9N1BfEMMWZSk5G+UxbNgWxdC7j1rNEa+R5VgfDRSR7hxlsyO3UPsmxdSOb+6
wcvLhyF0ntYI36tJ0mtbawhYKuxJT9yjVkvtFL5QiJD/bidjNgkiFKgnqjpo
5cTpPow4tF/yrr9o8ITTZ/sz6v+LabGx/QS4h0u9DDUVGSJgn7R/MQ8LK+q7
rVVeYPYmPSbdfCHZBXXxWn5aOCvOb5ISqBW+fSqn9SzcZE2fHSMJOioA+/B4
Fl4+SW5lXf0UyhOZLXRw4MGdEgiqvpYS+oq4GT8E69BeXMxXtvOFubh4xp9R
wtmeJXB8wq7BrH/5TPHla8l6voXp213wOzSR+bttGHJkHfdkEX7F6WvzmRUz
iYViGMHHpzNuszHasw1EKC8wsbaEe9cmMGKbGxMOTmBeVD8Cr52UumvVc/ID
T5Km03X2NzSb0Ig26wJ5Wlynpklh/l3CI0UQevmCtHfVWENVgRZPtrL7bgKF
DZpzSx7+qa647FsumRs1g/Nytos4vR8x7xoyuIaUxwsJEVRLrWnA4BJOnOqB
b0wUWf8jgz9QUPCEZ++ypC4FGgZ/KCAl5w1FNQ3a6X14z9vMRF4VlTdksGRc
iyry5FYXGgYL/yE98zZXHh8n9vFJYh8d5fybp5TW1LfTKMpL4llullyuqv6O
ikxeZEhZdLX12fu1uTx4eYLTSce4kZEsX6/OJnqfc43Yh8c49zSOZE2rwTye
JZ/j9MPjf+f845ONPif+RTy3XsfxsKBIA1lpaec58+AYcS/vSasejcZp7Ecx
L5Ovc+vNFRLSX4sh19XnWlWmk1aUS1WdnGWFuswlO/smiempkq2p52WN4P5D
HuSkST6JmpfV1Vligk8QLkP9pOvek1dRJBcefdHgqfn5j3meK1cj/xdGovn7
q8qrdOV9ha+fkZKRLTcJ0dLIcQG3Y6PZtXMnO8V/h64+k3YBftQMp4qUe2fZ
tS+erDJ0lSfViBEe2HOQK4/eN+r7P7496/BCpq3fw5sK6QxhFRuldd/zK3vR
xtger4AAAgL8cO8lQHLLZfJq+EHDmnLuHV+Nt6MrUyOvUiiIqK6Qr0y7wCyv
/vQZHUxCDn3+x9GQe4RhMzZx922VMhpJtAq5eTqaM49LNWtcJYkrsdR2Zs2t
TOl8ddV176IZOGwR11IrGulq7s0lfOEYpoY/b/RfxqByJn+n7Ml5JtobYzVd
6Ku0oFr0mHVjbdBtr00Hw/6EndvCIGMjBszZKZ8NUPsiigGdjNHV0WLw4sPk
VhWzd5QrHbS10NJqRwezEUTdzpWF/P29A/gPnsTRpBK1pD0Mn4yLmRX2Tk6C
ZE7i318YMH6ViDfrKIxfTk8XW+lbvGdv4UjEOgY52BGWoMqOq34aw6T+ljiK
353su+K/7AqF5bnsnTWYiZvvKMa2hOPLRuC/6JR8SpimNlxoRtLecZjYiHud
7HGZuIkHSoCSGD0Ln9FhPKlssB1cy5XlXphaOjBrZywnwyfiH3hIU3N1W7pl
7EYRQUrjSiVidldsHJ3kodtaeRH5KIXK6iqKnhxg7GAn1ZCd7MRUV5BUpnjn
Zcnsa3BfJ2tvoh8lU6YuDG4iv+rJkTl4DJnNZSXEzLq6hl59R3FYyWcoexrB
kN6D2fFcjOTxXoZ72uAgHtdnVAgHD0fh72ApQsmncthUm3WNxX6dJOrj5OhI
75lHyS8p5txqf/wWHJMQWZE3Uyqe7MGnl708NLvuQ9kQny8/ozL/HJP6+RD+
QPEJa+6wwGsgK+MrqKsp4ECQP53sHHEd0p9xgbPwG72KJOHR3lzWDzMrF+ZH
XODoxrEEBJ9Cxdcaru2czNBJ4bxSKFOTFk/QMBvVOJ0c6NZzOlfeSafxZbJ5
/ABm7H2m7BAWsH++D+M33KYgP4t1Q8ywthvDoVtvST4XhLOjgzx+Jzt75u67
SlFtnUoQ9YSNfUn4tM50clQJhNPIzbzOURnwyudR+Paxl7lm130Iq+Ny5anX
FMUxbaA3W5Tzr6hLYpHPAFbdqKH0wQlGOVpg138dTwVGHA7pgZWd9GxPlkRd
YvOoLvQcvUbEmkJfpg1kSrgqW+VO5HR8xm/hmRIKPr+wlKG+S7hbVMq7M/Nx
cVamYG/HzJ2XKKhRL04Zy8vi51YPpqOOSveMPBdxJ1tVvFJydzfDu+mh006L
rkNnsy06CHsjE5ace0Lmwz04GZszeqV6h7mKx2eWYttRWzxHi3bt7Vl14aWy
uV3E4cV+mBs7sT1JkcEPL1g12gNjIz8uFauqFFOOraSXiY58v06n3qy9mq/p
K1OefIkZzmIsWtI4tTHrtYT7+SoaPo6ciU23OTzKrFWvudW9f06wmwjuV5yR
uVz1cAcerr1ZdlG1Q1cnItR5Qwax5oqStc4LVvoNZFlcKg/PhDLMbzl3lVXU
uvwkNox3xFZRwG7j95FbVMZ1IXHDpu5RdjHreHhiIT7+K6XFD9UwvubRxgC6
CEF2cupO4HRfXDvZMuf8U3LeROI/QESfmpzkKhLD+mM2YCbX8jQJbLWZ11k8
ohN2igy7ek7hYk6BjNwa3C25iJeVE8FnUzTLFpI+ZAnG2zuoGG/rGyS3h1AR
voJre+fhYm2Hk5srAYuD8B08g7jCUg7PG8KEsFsNlmu+kc3YoyML6T9oIN4j
R+MiCXTnbqy4WqxhjpTcemubP2adVIrgOn0nz/NrNbVruZdW0r+byioPHdyf
YT59Gb/5kmJti9g/qy8uw8IkXdZ066LyDRvG+jJr10P5qisbpuI1LUJ1cMj1
cIYOmcWlV5Uu0m//HZ6KEyJx+lg60XKNgP0aElc58VGjRnz7SwvatmlPs5/+
D3EzduP2iKd/IHa8ifz54x9b4B2ygkAvG/n6r1sYYGpqSONv/8EXrb2ITSsX
MX4RmelZFFd8UDPk4kxHmrTtx8mnyVKTruRkAU9pWXlUlSUwyVkL57lHSElO
5lLELNp/93e+9ljIU+FSVudeZpxNU5wmbeOJ+P3tTWFBPH0Jv36Ldf064jTj
gtJf7z1bRxhj5rVDcgA08JR9cCy6ZhYEHk8Wb73LUm9bWjsEk1NTS/zanuja
TCGhYbbSYyZYNMds7CFy3heyb4o1xn3W81rp4B67whM9+1ncr63h/Bx79F1G
cPiJ9Ohkoid3p9vAKdxLec7uab3wXhLNU/F9ckoCa3zNsBm9XfCyhjMz7NDv
7McR5b4o6b6+Y7j4ThHxvvKrEjb25CftHhxWtgbfHh1H4+YWhD1RfS66FYp2
C31WXnnFlqFGGPuu57F4XNLF1XT65TMamflxPrOSD9XPWdK9LSZDFnJTGs6z
c0zpO4jQ4zfZP8kK04FbpApZ+a8m7QwBzk2xnhnDa3Ht1ehJtGniwvr4XKqL
D9K5pS7zrygXV19gQPt2TD5fzKvDs9H6zoylZ5+S8vwMw1p9yT9sJnG9JJVp
Fs2wmXaad4X5bA8wxXzwdlRrs9UcC3JBz3k+D+ukTdUnYpxaWA1fyi1pnK8f
sKyvGX2mbhbXZzLPqTXui28rK3s5rOyvi9P0kzxK2ol5447MOJ5J8ZMI/Pv3
YfmZRzJpUxO30cPCkMkxr+q7wBhQV5fP3gBzOnQZyemXEhcSWTKsHwFrE6nJ
vcLkrs2wmBrNc/GIGzHT0GriwMrzwquuPIZbmw7MilP0qe4yXrrtmHQukxtb
fWjebgBHnuWTeWo6uvpOrLshPfsKQe4d+eTv3+C1K1lMOp15Lm3oMu+G/IgL
y9zQFRJ1Wwlx7kQNR89kFBdunWO6V08Wn7ivmsq9XfS10mdMxOMGWSUmyH7Z
TGs+/XsjPhW62apVMz4XevmlljdXXt9gSa9f5TO0m7Zug3bb1vz4udD5Rk0J
uficjNtBfCqutR69Q+i4iDr3jOL3r8TvH/8sntOKxl99xN++a8H46GzZIm0c
aiIfexp4WTnH+sNdRlv9JL4z40RVLUW3I3D9Q9z/yfe0EPf/9Kn4/99s2XSr
kJqS6/i2+US2IU11jYXN0Oabjz6jvecKqRsNlUUF5Imgv1ZjxZuT92QHOuL6
1oMWyteUHPGS77cOiFGJQeU5+mq3ZdwR9QrbPQJM2jAi+jnXdvmib+LPJck0
1qWz0VsfXY/JXJREK/kq8wXOzY28wulFrhh0DeFxtQqvrm0bhK5pAPFFirj8
JgPH3U0j0fvDVHgkL8Ttt9g82oTvvvyWqccf8/ruCszbOLPjtRpLUgkxkcis
T/BJ1VJRbflLVvbRxtx7ETekIbx5zKoBFvQcv5JnNfUpcPmx89D9phHtp8Zq
MpfLrizFwVwb3/AH4t2v2DXLkyYd/UnIq6Ls8S5sfmrLiPXXhKG5R7Dzr/xf
Y3v255cQ1k8bx6lyFr3KvjWWp3I73Es+i7DrnEiVhK/tTUvLHsIJUS3bv90z
HG0zO5aclSiVQFBfK9p1DZVNZtGdTXgYtMRn4wXx20uOznPkKyF5LvOPqDY9
ix6x0E5MXWc4FzI+aGCrrpr8rAxhUlWvKMvPJj27UOU6l70nIz2Hsqq6v4St
X0SwdgD374R499tEdnElpyc1FZP5Fa9NqiSJu3P1xOef8FohJVpWsNG1CX/7
4g9mxEvrd7dZNn0YI8cvIS7xBgcO7GakSztx/ZdCpTM1SwHx89xobz5eXo5U
JWd+CXnH6NFBm7En1ZkaL5jp9C1txx6RU12eH/KncWsPot7Wr2DUCbEL7WOI
+7xLijdYyM6xIkjw2yuVXdVnurxgXhdt3JbeqG9S/GAtJq3bs+R+Dte2eGHR
eTaJapiStijuM75TB3x3qEZzYKaIcoZs5q0CU3Hr+mPlvoiE56fpY2TMiofq
mXxeX3+gsmBE+OnRwW0J916fopehkPBH6gK0n+VnJQqFaGE8kOOKzqecnIpW
e0e2KpvaxXdWYazbic1xt5nj3B6PtbeVZxcT7tOUn3quQIqoiu4sQruJKaEJ
teoMmDrhIe2ZYIft0B3SCiSSw3d11QD0XCZyU5P39YIQj+aYTIjibe45+umb
E3JdDUGXGGpiwrxrOVxc3Zu2VlNQWkxxdX0ftO2mcK34DVPtdAmIlvJfqtkz
3hb74buVsz+rObXEEwvPJbwSn7JjJ2Nk1I8LGoWU8nxfMtdVj74r7irQ8471
PuZ4BJ7hvtAGZ0N39qaqiVnfe7b4KkPafkPv9Q8lPVbzujJ9H7Yt2zLqkLof
QRtBhSoSwrzRdwzgqmar4A0rerdCP2APyYWXGGxkyoJ4Nepcw8/cSIhsGvEb
B2LhtkhaMyY9vD/NhOV6oDzhw6VpNGvVnoU3pU9pBHvq0WPRLfm3S2v6YN51
gYZa9w6OwcLSj9j8OmkW9T3mym7jq/MVnstuSxGDuk3Ch+IzuAqg+LRZV6Lf
qAgZt3wMvYeMZcfR/QSYCxPwqSW73kq/5bDI7gsx+64cfPiegsRFfC+k0WXK
fqE5z/EXVPrbpzrMP5OmyFMo7T4SGt7Ol6TqSvaOseNjodHB15SS2w/3hcfY
QjyvC3EFKRycbSU0+GeGRajac5Td3sDogInsv5lCZUoMI71GMHtVOPF3zgiN
X4rjr5/z6Q/WHMymPqGkhjt7ZmPyRweMhw3ikHCxnm/14LfWLXHtOo4bEuFr
z+NlbMDUE+r86yQm2uozNuYlNyNGY2k7nhtCQD4kb8KkeUemni2ttwMVHA92
x7LncqVhTB03BTyZ201ExAuaFPWah8wUdsAx6Fx9ftfrKDy1fsQ3Mok399fh
oO/B3reqnwqTwvDU64CVrSPuU6Pke7LPz8REvzunypWWJr/IOnxqTj9s9dqi
ZT1X6sGI5C1v8THGamxkfTr5uyN0123KiJgnPI2bT0et7kSrOqCQETcH/Y7u
HMgrZqu3MW5zzktet6YWWIaVLQP4tl0PohUUpC6VNQP1sZtyjLKKt8xy0qHn
+gf1O7i3Fot3GAvn4Dm7Rlmi57OxvoXN++uMs/ge+7lHZaV7/1BEhoa/8UeH
PoQefCJpVC/psv+GFT9osOIL4cBn1tSRG7ccg38IyWxsxrAp05jYU1tIzjf0
DDwl5LeKLd2a8cn3LVmq5NyTc53wtfPxtvxe6mQpvUdETp6cVKW9ara0JLzQ
MR/Lo8oGeFGXy/F5nWlj0o3hoyawKSqaoJHC7Rm5XwbK2xsGCs93opz+rul2
zf+GF7knBd+bMmhHcj1eVMQzxLg9E4USXdni/We8+EMR1g4M3Sox9MO/4sX6
/lgLI3jzxHJ0W/yG4+CRBIwaxSjxX8C4ScxYtIqLipFLORfOjNEBws/uSvNf
WzHz1HOKrwTSuvHvOA0eJYYk7hLDlO8LWU28ptnx/wee6Jiw4m4JD8J96GBg
zaBRAYRuiGDTAid0PBfLzdmzTkxB37gvJ941yKgsqccT+WH57B5rTKseSxXF
k/5KiZxmi+mgjdxLO88Aw3+DJ1dziFvVR5AkhIfKfXejRwtNm8yV4rdMt9fF
f5+UOlX57/GkeyjS8YhvNrrx5W/t6TMyQCHLD4ydOJUFm2J4VZXBIo9/jytJ
d7fQ2bAbO1+px1zMuVUzGC3Y0desGS0sB3MyuURTnl9yZy3WenZsfqwWJh1Z
xaOmmNHcbaFmDtJ2zqG5Thj3XcPdrMt4G/87VEnn8qbBWHYVYdkH6aDi4wxz
aIlpbyEOo5dx9kwI1sbmLLwq3fS/ocp5OUIvF27JLMaIOQywbEVT4z4cflWo
3vSqEdag8d8+orVTkETKeo7mcHSOK98Kr/9HK2+mzRyPu9G3QhmN2XwrjZy7
i/lBKF3nGYeoKDqI5Y8f863WaCklS/lLIdDoaxp93YE1z7M5MMlBgMnPLL6p
dOtRwORvn7hx+s1dlvX+h3h2M9y8xjNjxgxmz1vE0qWhhJ1IlA1lxdMDhC4I
wKJJI41J+M15Hq9UizaK+kuVLKXsnuCM16ylzJg4mbUi2N4+pjfjgpbi1aUz
6+WyjUv/HVHsJnBT+MuVNxZhqu8q2f16S1H114giLk47zIAOukw8pu429o2w
HqcZYtZawOW9ekRRVrzjA7ti4beZhBOzsdDrz+m0CjJ29+Ufv7Sjl3+ARrXH
TpjKPKGOjwrV8vaLtJhIoEdnRoftZu6gbgRdkkzYQ8bYN8Fu3uX65Mu6Z8x0
1aHv+tvcOxeErYU3J5UM4exH63DW82R/btF/gJlqrgtPydBpAgnqHCOh86cC
XTHss5Q3WRfort+C4fvf1cNM0Wn6mZkwa9dZAp306L0itn6FriKJBW6t6TT7
qOwWP9o5lq5eQWxeNRavqZvIqP5rmPmFygdH6f69gJl+G1TdFATcP7l4lKP7
5mPxuyrilY6E7zxhjxwq7HJvLsPMMtlRy2fnCBPlmo/47AcDRgbt5tiNZD40
6AQhQYy2yUhu5UvHG5WXl4sgoLyigmolRYzCV1w4softW1cwy8uKlq2+x2zK
UZnqiRv70852DNfK/gw1SwTUeARdVXyNInaNs8VuxJ4/QU3+GXrqS1CTUg81
xSLoNmjHxHPpXN3yT1DTnH8HNbbe2xV7/IGLYQOw9ljMjdOrMGjdCu9F2wjf
to1t28LZPK8n337dlKB7pdw9sAizX5vRd3Yo23YIitx+IwfEklfbqmlrhoY0
uC+wB998/QfT4+v+BWlMBnNKEa/U09Np18GZ7crZHiX31mDcTp8F0kpMVRY3
T0ewY/t6Fo9worX2z7QZuFJ2rHNOT6G9XndiMpVZWslSt1sgjZ3vLmUxq4B9
E0xp3X2pautKoeneCeYYDt5EUrpAGiMLliQoP9VeZphAmsArAmlW98XSPZgH
ylJ0YsRILP4D0jioXAH+BWk2e/BdKxtmb97Bdokq4TsI8tbnk5YeHC96z4qe
evRf/UBZUshjw1AL3OeeVpDGjV2S71z3kjVD3enwuymzxTN27DvArez6NfXS
+2uxaG/J6nsN0hbFHA9Ms6RFt4U81qhGCQem26DXby33sy/jZWLGwmvq327g
L1Bm5gU1ysxDObiUd4/OEbl7O9sC/XC2acH3jTsS8h9iFwu3YJIUet0/NA4L
q9HEl+Wxc0JP2v9sxDQx/vC9+7mRUavpOFjzYDUtBcS0sJsjBaQqSWlK3YcP
qnWI3DdcPnmM3SH9+UZWR+m/liyOf0LGvaUyzLhMj6Gi/CR2P37CN62Gc089
K54wQedLYW8M2JqSL8PM34WujDyubgr3gElOImb5uCuXsp4Kp6T9xzJ6fMZP
/aUKrzfMNPpC9cq/fcJnbXuwavtR4p+8V0fitSKe9LOxIPRuGkeDJjFuvB8e
wn+MfXSD4N6W9F16VWBCgnBfDJl+Rn248kMm2ekz5uCfAaXq1iIMOziy7cWf
AWWhG1a9V6M6R6mOhD0jMLedIOSw3h5kn2SIvh5jDz3SFG3JgGLS8k+AEpGq
oolkCHz25otrhPjrNcdvx22e7hvKT83NmbFREdXtOwj2NeaTxrbsVkPcL5Te
2oSDqQs7bmZzLtgFu0mSvX3OZMdmMp5ozP+Hh0x2bkvvsETuxwbRyWwIx5VI
MStpNY4N8MQ9ME5uRt4QT26EDaa93WiuqmkmJPr4dAf0+60gJSeeXvotBZ7k
1uNJ3lE8jQyZGxFHcFdDPJeerW8xUPmABa4tsQuU2hLUsGmAAV2D71ByezGd
nIdyJrnyv+CJKhX6V+pqKkg7twXnbxrxuYjt72Xmk5a0E1cDU6btPMWj21eJ
nmErS4vTlGhKSnNZ6diYj79pysyzWbwvS8Df7FcxTROWx8URt38NPs66GHpt
IatE04nierAnfwijadLJXnyyt7cXr7Z37cOKi9JeZD67poxi6dG3qsGV3SDA
6kc6joqWd1uSz0lGuBNhSerR15CTlk5BVSrL+xrSsV+YUvSXw9JeLdDzi5C2
sTRdG2szCeuvj83UGE2kW30xkLbNjNn2tox7e3yx7hYklU00ql/yeskMRz38
96q2Sg/N7kwLq0mKFajj6AwLWrkGcz/rNsOMtITYpdY3ED06jg5WY0h6f4+5
9lpYz4ipT0GqKyA1I4+K/NP01W3HsH1pmsyQ90fG0d5sGHElfw5h7u304evG
ndh4T+VY552bxPfft2FWrGrRqubeCvRaGbH2RQlxK6cyZ4Pa/L0mpHcrmriH
yCFM2dP1GDXWEQpbqHp8Owoy0nhXlk/kFHua2y1E8cx4vHM0xp0GcTRNTa9E
xls1xm7uCbKLz9OtuRbDdyvxQlYUDm1aMUs4uRf/BVz8hVJP43ZtDoHOBow9
LDHggwAvW1o4LNYcjXV2sQcWHkuQSg/e312GcWtL1jxE7UVenNcVvT6ryf6Q
Q7CrtGqyRyl6ecuczk2wXRDHmxe76WbSg4PSmtarVbT/QZcliUUa6lYXpJBe
IOtx/Xd5J3Bv25z+W18o32lRmpMmrivnadRkTK17c1BNk9okpts1wWr6YbLL
L9OjtRbeW5XdsbxDdNZqwYzr+dzZNRQb4XFIt1W+PcykwbNRR/gvYibQ6ve2
Khfgn3DmigjRm7YfzFnFht9c7UYz6wlcu3UA+ybtmX81VzPu2veppOdXNFg7
M6Cu8hqDfhMW/RtjQmPTyMi4zlQXQ7SNfbn9oZKrG8diatCdXfcecePSAaa4
/SJ0ugUrrr4i+16oCnAmS1muIoYxl377kSGr48VzMkiKGsWPQv9/tg4kWfib
+8Y5yPagcf+tpGfkUlJ+j6ldWorBuAhczCV+bW+ks8Z7B20nTtiEiFVD+FJ4
lwPDrlD4/ihG4t7fjbzZL347sXosdub69Ai5rFkILr4wlfbtnTkglC8zJhAv
sz/4wXoZb6tyOD6nJw7DhbcsPD+fDm3ptVJZAC6/QO8OfzDiyGsSGqyQ1WVH
4NCiNb6R6eozK4qy0sgqLuJ0aE+aGflxXck/iFvkSFOb8dzUKKDAm7rXLO6l
jaHfbk2DtuzTIRh9+X+MinmkwSCpWVvh6YnotXEhRl5reM/W4eboDVjH3YQt
2GqZsuyOBtquLfKgg8dCXlTX94WS8OHiiv6YuM3jpTDUGcemY2XlL2C/ljPT
7DEasoK3auP/cjs2rVoyLfY1zy/Ox8b0P+GQIe0H7JTsnsq0SclINSRuH8wX
TR3Ycl8BhNrnzHUQwj1RGPjafNb21MVh3hlNW4SSk5NpLhy+qKepHJpmR6vO
c3mixDWVDyJx/eHvdAuN5V3+eQFhZkLxpFj+Mj6WVsw9/qbRX+LQpxS/PEqv
b9WOUCP+9q0p6y/cIMjxJ2khrJG0E9joO0c2X0nh2ly3Bk7Tx/RZEsHx7aNp
3Kg+Tm7U6G+YTokhr6o+rrk83412Rr5cSskVn3JzcwXVc3PzKan8IJul++Ez
cO4ymPADhzi6MxD7ji3x35Uor5jUFT9h7aCOmPQaw96YGHat8MXQ1J/jqcls
8Tblh++1Gb3xGDFbBNe0mzFy7x3pPhXVO1B2bSWdrdrhsSCGmJhteHW1w8l/
LwVZD1k+0oa2+r1YGnmJ5BJ1LUkxT25uw719UxxG7eD6k2RiQnrzy7c/029R
BDFR6+hh8DPdFp2UMfL+Jh9MTKwJjBDP3z0LSxML4f9I5imP/Qs8Mes9ne2H
D4l3hzGyW2usZu2XOkCStMkLE1Mb5kv37ZqJhaklI8Pvq4atSg1IDB8iHNqP
sRoeSrSYefCA1nzXWpcBAQuIEJ9XDNang+tcnkrl5CdX4ubkyfLtMRw+uJ7e
Jr/TfckpVR+HmiyiJ3XC0LkfG8V9MTuFhTXoTXjSG/ZPduKHT82YuWU/p+Ie
UFx0l6VeWrTtM5f94tq18/qiZRTAsUcV1JQfwfqjRjR19GOz+C18rMBi036c
ySvjbIgLOrazuKtQ8eZOb3T1+7LmzEF6dWyGy4RIEp6/Yvt4B3763JJZWw8T
e+0+e4Oc6GA3lyQ56Mti31gr9F0Gyc+PXjoYLRNPVscXyYgzzfJ3Pv/JjNnC
Z45ZPwYTHW1mHLjMwc0B6LUwZtyWi7x6eoJJ/WzoPmsPh6W5rg/A0tqMKcdS
GqYGyDVfy/tibOnIomhJMhZhb+jA7ENp0uoPa3y1ad1zpkzmDUH90TIYQUxS
KR+qTuLw2d/4w2YYYZIwTrShnWl3dt9JYMVIW7QM+7Lq9B0h3M9Z4tWZfuPW
EHP4KOv8jGjn4E+sbKGSmWXfFMfZqua1l9b15YvP/0H3OTvEkHcL3f1ZuExR
ZOcJN6a/FW7TdqimsnE8NtZGjDv4Sk781Xjrsqj40vZHtRJ+LG/f24zYKfy7
OrLOrsflx0aKMn8mDPpM7mdWU3QziG/Ftc6T9sgLCGVXVmGr843qsp/4Xs+F
9TdrZIMa5mMs6/znX0nZQj8wZMY8vJ0bi/834HB5LZXPLzDFtjGf/59iGz76
hF+6TicuvU7eIFg3oCN/+5ON+I1Re+XVO2UtTSoLqOLcTBua2QWqVlmfbMXi
B/Es1+1yFJB+cDqGHd2JeBTP6I6/0ljPg8UHYoic3ZU2us5EvCrg5o7BaOv5
Sp4ckod/aoEbBtbdWCGRb/9cbEQMvPbaS+LDfPj122/pHriDmAPbGGjyEw4z
o6Q6S3VgknJiOV2atmLE+kghHRuZ1PV3eenGf/99XiYuxbiFM9EZxYT3EY6e
21reKwCREjlauBpW7L73liOznTFwVCndgRU+tDN2Y+mFbMXZtaCuMJFJtsI2
hcSp8iPfnsLP0Vy4KcLJehMl3PkWWE0QQ4yJZuJgJwzcl5NcUcer0+PQadOd
GGWTOuPOYoyb2rPnXSFhffT45beuhOw5zIWbz+sbNEjZDXtG8s3XX2E1dCGR
Ykzb5njSwmIIe+4rVXUXgrE116Hf4hh5zv2dOtFlbJRM/uI7Ufjqt2VA8Ebx
WwSLB3fgq6//wYAVp7kc5oWW5XhUTlklh8ZY4jL7JKW1NOr5Vwj0C5Xvktjg
5UCTjxvxcTsnRs8J47FkRzLusn7yCIYPH87wEWNZHqHKhnsSswyXxl/y90++
wsRzNJtOPJKl9MDCaYyQrh0+Av95EbzNr68zUm3eiCHWoClKfBq9kOFeXnh5
+zBj+3n53AJNx5b3D9g63wcv+fexrD0lyWQOKwaY0mVEEBNHjVTdFy53hFcJ
cXve39zCUG9xi5e3bI4k6hfcj6KHSXN+bqyPu1cwV3LUaZeZHF47Cu1fvqW1
hTerD18lIrg7zj3GMGHqVPkZo0N380zDwipu75uBtzQkLx9mR9+vD0nF0GJW
TVd+8yZg8Q6eaELdSm7tna65b85+ucVAg/D4AylXdxMStoEtWzYzWlznEzCL
I4+zeHBstUwC7xFjiHpcpQmnMmI3Ml6Z59jlEXLDSdVv9nIX60Mr/ZX3DSdw
r5SpW82tw3uJXh/C6AA/Jszbp9oFLLzNytnDVe+YtJg4Je6pKrzLztVL2bw/
mmnSb0N92ZagCruentvE0rDTpCuSlJJ4kPUrl7JwyXi0f/qOtsI2rz9xjWun
ozmwIYRRI0cxa+VeYi+Fs3rTWTLUEliZwoFlfqpxDh1J2FX1Kk4up7csYcOh
w4T4+wk2D2V+9G3ysh8QOMiMX777A6teCzj3VPCxNIEFI4cqYuLD4mNP5HI1
TZa0CJeuhE/S8GXs+niq1OvSAmrXzh2hmvuEhZxTdmFrSpLYvSaUzQcPMEO6
z8eXHbdzSL8roNSkGT/9rofbuO28kHt1vWHHdG/VM4aPIfKR2ovJ59SmRWw+
o4qiXsTtYO2OXaxfspih4trhgWu5o96PyL9J8OhhmjksjEmSgrxG9Y0ma3l9
dgV+I4bLqjh24RFJVdSdMrLitjFF+cnPP5iTSaoy4cy4QBW8TNyt2Xwufn6c
qX5qjZ7OmdfqdYFSrkauZtKoqeyLXCF+9xeezE727NlM0LxwnpQpPMu6yoqZ
yv2TF3EuuU69Xl1VlMiykX7Ko/2YvOmapB2qzdsW8hsubFxEcPgN5aDQB2wJ
GcuKWBXVq99cZdWcRZy6d4Qxjsb0n7OBMTLxh7E6TrXrl5qwh2UrD/BSrZAf
8ondOE7D3Klbb8vEOhXaC/uuIxg/Y6b8/ciFm3lQoka6n0g9tYYxsvL4snzl
MpYtCyUqMZW89EusCQ3nQVYmB1bNZP35tPo9jLwbrA2aw0HpWPq6dxxdNVL1
Xh8/1sWre+e0pDbzERtDF3PmsbITU5XLueh17L6k2nSve36Q8X5eMrOHL4mU
anhUhH10iGVLdvJAqccrSo9jtTD1iSXl3Ny3jahNwfhIyrzuZIPeYDUkbPGi
g4UrYxYulQXL238yEUll6kM4ci6v19jDSTuuyMnVmg52b8+wYLy3/Nv8wEl4
ddbFdZ5wCyPXsHL/HbV7k3cngiU74yit/q9gckZ5I89Oyts0jdo4Mmr6fHZd
z6ovfxMWdKvrr8K+N2PVC75R3nBpThfamoyRVrY1tarSKkFID126LbjRSH3d
rW2DaGc5TYI5zQkG0nrVZBtthu9VUWX/VFssB2+XQtZG7ppnPWC0eXtGHy6W
V5bkNaena7Bt7yZiRdV5LfJS3aZ+mLnKWT7yzq58gGvcbBHBN8J+3E5Ji/6h
mcl7zmxfysxZW3lSXtNU/aYPFxig15Hp52rltTTVpZUcXeCKaffV0h6Gtebr
Gm6G9eYPI2/iypRjAqWvnzPfpQmWMw5KsN//rwleW5zKptGOfPt3yff7OxYz
LzYgeA0ZN08wvZ8tSxNq1YS8uaQPrX5uhY1LF/GpSxfVv92ZtCZeLvquH3oG
KwZZ0GvhZWlBV/W1qqVW4Z2d9DJvhql9Fybtu1/fR1Do+YNd45l1TO6ZwaG5
XXEatk3qJemueWqxiMPHMed0Tn33edVYb+9fwMT5UVJVw9fKWCvfXWfHitls
fyrtIqgvreP93W0ErdnO9XzN+eQSCEcsCCAo8rE0jWbK1xnxQfz62Vd0m7bv
Tyysvcto61/krNqDeRVqFtZVXsTXypxZp4salIrW8ez8KuEVbOJhOfXUreTU
EmFr+q/mWbVmxDlPo5gaMJ+4bFWlu2ZyW4WX1mk4Z97Vc7vsPkGe2jjPOyoF
s/+F22eVO2rknP900tMzyC4oV7tXH0rzKa6q0zBIXuQryScj5TVPHz8Wnx4r
/z7hTaZcwtmAy7UU5+eQV1Qpff+1WpGlr9+94fkTqStNaYM1N2n+5ZTIOFpH
eVEu7wpKJWPvoVG4cjGaD5pPahqW5KbyJjVXqpJViyIfyihRLe820miReFZV
TQUVtWpfUVXv+y71Fam5ZdJI1LytrVSRI7dQKp5ooJ7VFOZmCSrlUvGhTvPg
ukoKcnIorFDXIH1E+fsM3rzNks+C/6TBWCuK83iXXyK10dYQtDyXt69S5aLJ
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
7szmSqikhzfzznMpS62NJPHRYdHMmzNGs7mbohJrfxPVpWFgNpb93sYYvhAm
m8tLzZKp0KvvP50h9HfRkvYyoZdOZ72rq7QsoijyI9HDCt56HWDbg7lsdRQm
WZGkYq9i0f0FHLK9KgdhaM29xcp7K6VQ35ody3KBJgvY4+rWMZKp1PlY/w0s
Mr9MuroRzQQJ63+O1R0ymjO5/fgXtALTNNhWZcvu+2O4lFiivtaWd1uoSiPR
y2z6fTnWgyiPTP74czADhWB5/KYMgzvxfH8sC0dZ9rZh+zCF7mvSeOhRxgPz
DL6bGMxUxzoiwvIYtDYFC1UcqPom7mjHM0IrncdeooemafywNIyuh3OIkXg3
upA5O2NYbVmKjZDDt2+kMGpXEhZCmEW8zeSnDem8rOKKknfkFeYCe86bTWWp
yWpO2l7kqd9alpgcwk+pJdZXhXH/2XJhFq9hne4AtrnaUtzaSlLcWWadHMYZ
gUnHzDdikpqjisoa9XYj6x2tyBNFH7g7HbOsItqbX6P1n+SZ2VnC0pzYd38A
M4yW/1FazRNjvPfJCnY83YBFVrWSmLrR2pAk0/vih8vY/fgoz8JOsNFwFkZy
dD2FjNvtE/YbGbfe+VUHGSd6avOInMYyvNyXs8RoKdseHcAy7AK7TSZzLVY1
0g1E+Wxi5p0NuFWoPF8dOWwwjLNRBWoR1xbAhYfCjk0tIFKIuC0WtzQiLvEc
W/5/EZeGhd0Mdr3pQJTv0VpswKa7E7mX3qSGtaYaRw4ZLOFZdoYs4lY72f9G
xC0WYNFRxC0wPUtkfSXPHPdiWyhQoy2Jh9bD+OH4XFwrK1TR6doqQoT06su4
m6NZabyAzcI8GHSyJxsdrUWPY9GRJNvVXcQ3ZuDi+ivdD0/gWV6+olXLSYi+
zKzjH7LitRcZBc9YeexrVrtYqpcSNYItlNSY40w9/y2/3JwsRP081pssZ7/l
eo45aeMlCZ/KIB693Mhane50PfRX+p7qwi8P9uNdWEFpcTCecS95HfuCdzkZ
Qt09x8TT37PG1litcDXkXefXEz+w7ZXdbwTbS/W6YomwA2cz5Vof5hkuZqPR
RMZf6MoEvRPCUinE23spgw/34kK8QgWMDNnMsIPdOS6EsoQMKUFr6HXoR04H
+FBZnYB/wkvcYx3xTI2kVKjUIe6zZcF2JapEXmAM8NnG3Gtdhcq7hI0PpzPz
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
yPLjCqBd8lN3Jm88Q1RTA1b7htN/rp4sXLM8DtC323QslKcpCmN0GNb5Z25F
qyptpTDEjofPXlPQolGdaPVkprTd/z99uZegmez2PCx2fiufQ9tuofAXyvt/
pH0FXJRZ9z/22quuq2t3K5hgdwe2KCZ219qBiYqiKHa3GIjdjXR399A1M8AM
Awzf/7n3eeYZ3N13fd/fn88H5al7zz335L3nnvPlKAa1r6GfbGpk4PpT8NLN
dokGjkuaCJECkw7w+gRqmjQe31RzEK765P9cmzKIknB+Rlt0mXdBn/OuAgo8
rNGtUQNsfBZFg3OGS4Rcyv+T+X4t2rQYjzdkiZyYagiT9ayxIrzZPRTNei2H
a54gSMNf7Meo+rVQo+EknHUXFru+X5gDk2Hb4M0UavwljOo0HDeSlLizoi/G
bXuJiFAHTDLqiUPuBTonXx3tBlevsFLnEeugJPYllvRsh6l7hXpLkH3BuuGT
sXHbBgzoPQibeFyKBndX90WjvrvFDZ0UWI9vgVazziAkwx9r+7bHUvtk/fYY
meduZCcq87MR5PIV4dK2bz082dgLHU2PIzDzC6Yb9sQ+V4HKD002guk+F87f
SW/2ob/xEJzxE7GscoKFUUOMOvAeWaqPMOtGyv6bTqk6Y4mJIVbeT5HSHwBB
WNeNuKpKC1h56DN/kQntcmwQzXNlzD35kUQHmTo9mMqpi5mWD+Dk5ITb2/pz
OjBZdktw+UqCsNakEcpVKI9aHSfjfhyJgidL0ahaVRLkVXmcu1JCZwvysDyw
rG8DutEJl3jZi1jsn9qe2uyJ2ylFnK2s+dmjjrjoEYS3e5iU/w2Ttt6Cp7c7
rEb8xk+nT9z5mZ3Lx/Y+RMvl/4CluLEE/xPoSEqlRtul8BUpMIDMprplSBgQ
zXedeZSlTRBkUzcwFWfZrw7XpuY2r2mIX3DAtD3KVWyBHfccsXskY4oesLzr
DE8nR8xuwWReNxz/kAhN3EW0IJx2N7MD2+26vaAbR01Xi9McVW/tFqAeXdfp
s48GWYiXByeT6vwFG56LBXVJfRyZ3YW3dz8pE6HPtnEl1MzsAD76+OA1Sf5q
tRpg2WVf8kAcMaJJddTuMBZ2Lz/i7dsbmNmxFhGTMe4nanXqNfrVJlIeFTHB
kiUrjsDyllXJRTOCnZgJtejbDvxOmGg6YDtLQSBtleVH4fjkSjwAcd25d/Dy
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
WLJkq2By1Tzy2cnOE+G8y3rC3g32XH+LWkN/J0C6YtVeopVwgpK0ayyctJ6A
uCTuHNrC3iup8u8J1/Zi5xzIuxr1tp1QbZvM3OsaEN503Pbas3KjI3ckWJUn
cWzbDNUWfcKCzZ6kqBR+TUG/ulRB44vGqjB+ywmiH4fiOGMchx+8JefjXXZt
cCI0S3NVBTVZglZnaJBwylwX4qs0oTtvwo6KiZ3kuYJfmYkXsN+4D8WVRGHk
IQ3NTnW8wHt1/fu3T3BfMJ6x01x5nF7xN4W3vb4iwKpmKMuOkiy6KX9/DYf1
e3iQrY1hqErn0p7pmklNm+9GgqIIVSZd+GdKjbguKHE8J2OLqCt8z6nVYtRx
9txLlmBZSajHAhW4vmL8lG1EFWrkJyUxXiyaqrDCLZvYamfLgVvPGxgzqjsh
Yn3WNGCD67idVqAOLZHCZNR0OnfNIsYNHsa4dT4yVy1Pv8N6BeXWnzqF08bt
+ElV4vOfsn/9WJmApi3dw/3YWA7MG8/OgFg5CsN9/VZuis1+J7B+4ZqjpBZo
LjotTLrGhumruRijzvD+kTdBB1gy34XYXLXMKubWkc04no1Rgi+riPLdxQ6P
EN7liu5tt3JVTsDKws9xPfuClIie7ChcVtqocWv1bn+yVSDXVB567ruD5Ut2
kyDjXAa+TitYejiM0notky99eool09TAmor75RitZScp52855bCeo/fVFX9y
CBCywjXwlYoZ58ewf+0Y1Sz+zrJtPqQ30IBjfdY1Um+njc1abqVpkx1qX13G
dq5q5NVrNrBru/jzjZIvjZDrHv53+R53K5WWQr5fKdTK95jrKbQV8v1+eTVb
hHyffk3tMatih52Q3Yp877UolUCFJHKEfO8rdBvv1Eoh3xPof7r4n+X7/VR+
m/Qc+/vFBD8u4lZMMedPvabxmCQOpmnle/JJrNoY4BRVqJHvNcWXGdK6jbAV
1cc9UUzv2oyJp3Opy4lkg3UrLOfv5NqtW9w65cKoTu1Z6HGf3LI7jGjThuXX
1B73z4g/MR8TA1M2nRPvivddJvbG3Hocl9/WaCWoVAD/tj2G3QxYfVp6T4iB
fgZ8/7evGO0WI1VvZ12v5gywj9Jk3hc82McI/bZM3uMr9+tjNwsrXX1cQtIa
ZMZ2pCb2OJMGWrHU44r8XvCJFfS2GMC+J2XU5T9h6+C2WMy254q0lrPu2HRq
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
D6ZglXsHRwGS79PnUjHbug3Skmb8djYdC5RLcMywGPs1SjB/SzIWmTWS/erB
5TPp2OTWwWdF9EL9ZgYWmzZz14f0dELxSiom6NejVkiDGkWsNoAQh2IsOpqJ
g9olOHMjFzOOpmHsjUry1/qgciUD8vZtfI2cfgS55GO0Qg4O09DHTMqw52I2
Pt8lgUVuL7JDSvDZvjw488VUKhPL8fWOLGjzachdhTWYuDsTNxN6EPykCLMv
5uJ3LernXiF+vpwH5dgOZttKtrFE4+upSrDAoIkdPymwCBMUSvCCp2h+MkcZ
p9ohp6MIaZlBpZh2RIIdBONp0xLsu5GP7zen4iJZsOaWRqzakwVVfpd6sIfQ
vT8Dp6L6mXLdvPbtR2NpPLyfhJFp6hY1bacUSbHRyKvvl1sivtqNqpxIPPaJ
RjVfm1Pxn3jqM+SnVmDBsUJ48LnsTAmKVYfzYEWYy/MrwriLxfDlk9xaMqvw
07ZM3E3mqkI/fViGL5YmYqkbGUTyxh7bZkJufgoUXFvYs2PiEmJtI+SPZEAh
nB+/oxV7ThKDPOYLdQ524vK1TKyxb0aAexF+vFjOXTBNP8+NJZDbIoEu60l0
4colCXY/6hQZS/duFtZatbCZEs05ddi8Iw5yh8sRXj8gJH3Vkdswc3sGribw
w3e2Q+FUMr48V4YsIqy2chY2u7RzjNXZin3HMvBbIJ/r2taCLdti8f69epZ3
S0JL8L1CAdx5EaxKqcD4Azkw4vfeu4prMfdgFlQSepFA4h9QNiDYrTCXXPx4
vhwpvS/zlYlWNlabNbPDpxLfziGwQvklqMI0jjpudUP4qr8Ld28QL1oLd/F0
4ZpCAuSYvpkZtjRg/ZEcaOUIfEXYPpaFS7ECXw1n+aq1SoJgV3s89IsDKTh2
A4CrDhYKHeUbcMvs5ZmL80nqS1IR4GgD9xAJWxSY7fza/5HDjpKslBL1bmdg
gVWrrJjwQCfOXEzDKjfSUl3duKtViM238rHcrJpir07om+ZiMWm2vYbVyO6V
bfL8bxyWgdUOZFBCpJh0PA/WOT0oqSXDkV2JCYdzYFDI4fLq5VdxWCtr1xL8
yrHzTiE2XS+CRiS7GjkkahlEsmcBRl8olx2J/hZJD3Px7YVXcFp/J27eyMR8
kzpkkH1vJNNua5qFMeq17I1SRcRpP/wTpx2Q4GqKgLtB1NT0oCinBUcVkjFX
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
mncYh7YGzL6m5Jpc8ZxWO3zU1ur35D3air3Q9zZGqjUW7i2xo7HFFKKq8ljq
2BH7+XfqRqaH7hhIY203buSpi0rWyClbMzm6ch03lWrem2c76dG+HhYLFWme
nhwYTTu9cYQozwBEBQynftteHE5SUUQ22/q2ovPY3RRWvGZJdy1cNjxRF6Ul
fBWd2uixJeEd9/yH0t7Mh3Cl6Hq0Y4DQUicRWlrAKicdBu4QnSgXNqGzFRO3
PyDtzlI6duzOYbUvuopjbm1pajyOKNmvq4+xxyn1Vn7Ivk0cvK6M03p9gwm2
TWnRb52Muh8TNmMv1Nkj0iZg8RX6derA+JM56iiT+K0Yd+zKXnmnV2h0Tlp0
X3hD5gLFLP5A8bMj2LXXZfFNpZwpu8+Atu2ZcCBe1ixLQhfQpr5g3QgVCf4m
576v+1eYcYvNSw8oVbZ3XNs0nGaN27IoVDGVy/voYuZ9RjmkXNYP1sRQAG9u
HY8oRTcZqt+BkQfT1alYSduFpbat0ImF2KqKY+2gHvT0GE63bl7ckYm1iAub
1nE6XLGOH5JPMsTod7QnHpPTAMUeGMFv7Zw5osxr8ub6TBr/ZciaMIUYLH++
Eb32RviHp7N7bEcaOq+TS/fJf2nH6WNswqLraRSk7KarviunXqWyuk9HbP1u
14qvqmAGGxoy/XKSFCykGs7/4tLzs+2xn1CHSxtR+f4SvTvo4HlCmZ3jw036
67Zm0sU3vAj0RN9mHLdUFQ/E8q/r15rOE4NIfrIVs45WHMipJiloFqOt29PM
ahUJHzM5Ob0XNu47pc/U5mYtZMdoE3rOua2g/cPjaa8zkmvKiKH4kx607zyM
axnxzLBpT58ttS5q3h6nq64NOyNfcmZON5pbT5bMZ/VcCFKuLn7AeNP29PV/
qV7agqN062TGyjAVCbXifUYQtm0MmReslDGvj9FVU4clAnlv/AfkfRQbItCn
JQN2KX0N5fcZavAnZgvuKScljukOzem+NJgnZ8RSt7Fj5wuVlH9H0IgOaAkr
uOB9FBNNOzBgZ4LKL0vOIex0bNmVlk9E0DjaGXhwt0jBnCEretFYdwShhep6
KfJAa+EDuczY1f1s3/dAcfkxmiXDDWjQZaTCWi27qFjak0qvSZGaV2sZQMWs
SR/VEvHf4q9+dwIeR7KoqxamnnskQlfP/6dPfEjcg1V7A8nVq86CHDwbbeMx
hOclsNxFC6t5l9Q6/YfwPdj9/h0jAp7Ju2b/BX5V0fclmYW4zX7F1kiVD+RX
3kbnM3hWCsdTFOxTVVTC8s2JmHvGYTcjgXEXPlCsTutQzeGNCTiueKOod15S
wkS/BIacLVVo8U3JjMih5+x0bmYrHg8+lIDOkmwpGl+e672bknALUhzwzHqU
Tfdp4jMe8bjty+Po+df0nprAwcwqkqJyGLYym4fK4WYn5+O2KIPLSndHTtQb
zDxTuPpelRlCCJ2KKh5cSKXVoCiaSP/6R6E7/zVh+VXIZz2FTF63MgG9ia+4
pIrvqq7mybU0DEY/5y+nl4w/lcOiba8wck/m5rsqbl9MR6vvSxY8VGw6PL+T
iVafWJYozbzEW2nifgw+l4rl/MJVeSXMnvGS5gPE9wc8p71vFndyq9W6nqSm
aHZ5xF/LMpm1PoWOfSNpOTFJ2MGV6hpqVXmlLFsQTQupjYEv6BlUSK6Soy6c
SKPTwFi2xFZq6MpttqA8RehmFj/K+kmDxs1o16YVv8ougkYsvpvAW8HF+vL1
l/za8C/a2S7g/vN7eGiK3774kbaaHdH88zsh0VvhtVeAR/UDBnZQtPdNgxY0
a1RP/v/f/forfwmAaf5Hffn6S8NpROVUqXaGJSP42da+tLHsjf+deOLjL+Ju
2wUr92MUFKay1s1IaPWruZ+cTamqglEHAbC76Pj1Z9QXFtKeh+K1q0swNWiH
+xFJmJYS4GXJjz/2ZP/9l7xKz+djxlW8ezTHfOZx4uLjub7fkzYthV38KEvY
yNsEJOoz82QKucVlRO9zR1fHjHXBUnduMXugEZ1H7RMSpZoIoTnoGEwgVNJx
Co9iovEZ7fvM545o88H63rTSsmJ/bIV6g60yiyOT9WjZewaXX4rmIrZj36EL
ozY8EQuXynTjlvzZeTLBsYlk5splcZUCojflry4xzqQZzn6H5S7fOz6fHk4+
gklKuT7HBYshy3iRkETag+306PgXYw9IKloN4UFj+VmjI/NPhJOYnMnjwxP5
4YefcZwVwDPRTtghH9p3tGXFDYVwyj7ujY6xGX5npeHex2+gBdrOGykWRB66
Zyy//fgbY3eGiHvhQitshO74XSQ83oG5pj0HUsrlb95d4oKj1y4Sc7JZbNcK
u3HreCK+lXB8Fm1//IKGXTx5KfSQzX21+bX5CM5GJpCWnceTHZMwsxvJ5bAE
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
bdJhJg6dwgVVEcBvqCmMYaePA9YOyi509eRyep6ULVtDFZX7Mf42M3qaYu26
guBnZ5kzxoOgl8rZqYhgkdsw/MOFIZN2Fd8hFvImp+uoORy7eBHf7mbMOhbJ
26JQZg0bx8GYuu8NZ0toicoBUV2QxMZhJljYeHL6mTTUInYPt2XY7MOKRPWZ
FxnZ24VZZ1KV057IevfBLD2vKh7/iayrS3HtoRQz3Uez9UKSsD6khc/gqJ+T
eqatLUdzIjaDj6rdj3pUi5nY4dNV8YjTCLafu8P6oeYMW3RE2NolvLmymO5d
FYTX1daGOYG3KaxSBre0pDrrCm6WRnQdtpAoieQ/PMTHxQ773ouR81Hl3cJn
oClG1tN5Iuy1qvQbzBysj46AHWuXKey/vImeRkb4HnrEu8oXTDc3wmzoLO4o
w50Lbi0SgsmIcctOq9P2V2ceQEfg91cGo6X0e8r4zQ7UlCdwcL6L3LamZkcc
xu4mtUxhv7wJWUdfm8501NRhhN9adu6cjpWhA0EvsogPXksXIRwXn1RVsS7m
XtBsjHS0ZKmnY9Kfg1EFSt7IYqdnPyxMh3IxUwmCJWHM6GuPjZMfClKs4sX+
GXTV7Sje10Knl6eY9QpVKHX+kxN4mOmiJQlUTW16TtxPRkXNl8oFqUq7ydwR
CnJyGTadI5euMbunGZP3P6SqrJAnAd6Y2yp3b616seFmgqSsqdJW1JS95uQi
FyzkR1xZc+Iuuyf2oJ/3eqmutgzC/x3Haz7VCJ3kE6XqesiS66KaIvGbmE0l
jgvtQfxWWCTMaWFCfKn8TTLJ3xZXUVRWozxto1B+CsRzBe+r5P9997FGY6Kq
3btzaddMizURxXWKun7gzHRrdLu7cy42hZSUFA5NcabnsFlEZcSzf7oro1af
IE78npr6UI4LtZ4cQHZ1JYW5uRSWqmoq/EVZ4hlGG7dgwMpTJInnUx6ew9va
iEl77vHm5UHsdHSZcS5VfOMZO726U+9rDayW3aFU0EFe8EpspYMqgjSlPtzf
O5++QxZz/8VJBmtrM+u6Srt9yOhOrRgdmKnmiooM9oxsr9Ayf2lGO20djNo0
kiHcec5pIY8TGdP4az6vb8k5pcT/eG8pHX4Vmuk3DWnfuo2YlgZ8IUXNtnQn
QVhmeybIijCTzktyoIoLS6QTRd/jezlevg6eryPfd/MPlpNa1yrlnygIXoZh
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
Zw9VyYrp6Rmb0GpegumNQTpNPqHf3A4f9Iy+QMgRb9PEHuMftfjFzBMs1TA/
esHhe/b9h08MLB8wwrvSB7d8Cj5HQAy46dXAQ5c9q/OsObzafykChhm4F+hp
Uufc830sHN6W80da0tf74VFxWY3hU/QFnx2A1+TZewG8iOHXqV/cZ3+Jjde/
AfPQmuB7H9B3wXTgk1DnZcHn3RINwQLf/DFo3ySD44kwKB8Ngzp+G5xafofe
M7ET2sNPwta4C7q3wrD+lzBoo3fCY7OLCN2KIZ6Kb8JkdOF4yhw+89sBPjX1
LwYR9nsJdtSYxVU1hrP1RT3+wHLJ3cpnWv1FuApSq6Ai0dgrjXjqn+N8Jqs7
J/B8syOYVsSLrGOz+OG7Ki4Vr8fiwL73ZriMWGE/HcRX3l5FVOEqbn6MVHJj
ACa5Hr/9qwR7ul1hPLauhVdtw3N/n8CjZWbeV9XjRsq+cXz6jVV0BPebVIsa
fPuhWRzoCa42EmcoOb2MK1ncw5/zbTo2ZBdXOc/lLuLbL6xi0Cr6R7Pu7mld
w/W/C4ZLvHUQP4jTYsQSCMVk9buRkbeG6DanCPMPAbjAcgS0L4Zh7bkbYR41
iKxgeic0z9Fgbv81yzwrOmGyY6Cz2TDs/iQU99NYPkAl/xwGVcQLsM+viSGt
1bnQ7wzDxn663PA6tFTT2n3846pDL8Ipm2A07v6PGJTDHHk1IerTMJQUCxj0
LiRB+1QYFG88DJfKLMbHWEqE7lVW+Z9Igd3MeYJFGn7749h453l4PS54Z/ZA
8/xH6fetMKY+js3MP0LzbBg0WfHw2QNi2ImtOBQOxrjMdrz3FsPXBO7Yu3wR
l1Pja3h8lwQfu2MUfzhp4Sw5x5oBf35kABc/IsNfWQaQ/TJc95sBfPeQFqsM
G24HDr45hksfmMFDdP+Rd6e5ZLJvdLm5CZeyZwZffYOlMOQDO3/yt+O4a98y
nqBnf/1iMPnbX+XospEptqDDj+6ZwlvtLhGJG1b87f4R3HvSxJkHLH3y/X8b
xsUPLiCun1/iUM2pcN2dM3in080hbej4HMJ+O4xv71zmkpb8kWV4vHMK7/by
ftfVaXO47rFl9FpE93VF6yqu/v0wvrdjiaPsiWOL+P69I/ifXVyEO4Ejmpb0
+PWf+nDVbg2WvR8SjKSuND4M9fM0us99FsbqBi7qjnh0HTY4Tv4Wqofp/qsE
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
fhZX4xmFdY1tBj0iDRTp9eJDBBYaP5qfnIfpfsEF5cLVObAQvsbt3RUC+1to
qRd13oG8DuWu0vrEELLYzJnM8svO9zKvtyCTaXnR4oDGNoTyxk5OoRMv1UPQ
WZworhFY04kyg/hcjJ3Y9S4ldk7N0uNEYVU7nlXpxQp88BCTYOBC7ST8pKLk
ZRIry7Mo53FZjPVRmY2Q60X06g2SRx5acY7JJXre0g8Di9I+MgeTVVy3QxZ7
fnOv+FgxarWDsMgmmUaL2sA4dbJRnlSY0GCbpo9ckOd2mnrkvfCs+5iUav5c
lkVmqQaq3g2cnVHwMq4Z1wC+Vimq4UnVIBZCx4in3yC0vYhCgbOVamSK5hxg
XKNivqQsCqanFZ0obLGhxjIEtW2KlToBFbtDLLHKOiVjsbmm0NjGfRWyOhVI
+liubHHXOvZJDy2iUqt0pId3IT4t0UE9c4jrRAqHqTgGzWaKFYoZYXtbJ7DL
fanUN3BPDyOzuBMD/gtq90k8Kn6o8g7k0m7OegJwEVOFnh/0JvHq7lreKje3
0gqVsYobujFBejjYmEUetX32Q0X9Vt4nzGt2wXN+ie0ZJ1dMI6Ehu7wd+Xrq
Gzq2ucE+ui7Rl1oUaIbvUXIOHXTyj8o4RfUUNsWz0OF92Gx9KFcPooVN0WBx
oYvZsbIpyhv0KGY12u7hrUqo1/txvla7YJHQNgc9K09kXVTDiyYbGs39KCHa
ZpMe1kkPC/1dMq1sCtIDI80Q2cpAWYf9/0cPfy1b51mNBb3ihvfRJiqoXkSL
5DX1whn8Dt9fn2J+2Ckn+rikE03DB7i5DcOk1ZIehNDs+OBneFTazitKZGA5
PqJ9cHhucXW0RlqhpS1qZ0Jk8LQsYtz/LHnhK1rBXu817g42UFVJ3yWSybGf
lLaLK+JJuVjz9/6ukBOUC/Gc5fq0rF0Z+mPZsc+r3/3LKn8X1lPSxBM5vE55
XSVKRLnko1K5n8cqpSmo4XHpw2vtAnPvQ/5vklKy1LNgphBdGkYeO0wggyjZ
Z+Kuz0gQ316n4DTokV2vPMMk+EMZU6uMWdSM/1PeBYefAm9/FZWVTDe5hPE+
hCtmnfPeVASmPnkIl0CVxSw+hCua8/1wCQj3nfRfJFUUOTyIRuKYGuqHSutA
ja4PTnZC+jwKu1bHzujF/OkNPNMOdlKztBDvZ1mE/+xtKr+QFKTEpWWnidVS
v12dx+UKUIpzsgT9latl6t9L8/254lE0Kwrr9ErqypVVf/r+dd5b5cz7uT8W
1cFjH5fLTr2v4J8r4F/rwJL8+QbRlnYeqxGViVx6g12C7Pa0i+BPTqvWvVca
v3iba7HsSokoyiKb5z4Wua5S/s4SJVSueYhXOf3Dt4e8a6i/UXBfPYGA/Nml
Sww77HhWqpbDPCPGq4Y94vcrAKEmSGNCTeRUvpfG94bNUSlgJtL8+F0T3C//
nz00wdvlv0+dEsrfKnBfokFV77r85WO8PoFeY6LQUGb9jEO1ryrfqJfcX8KL
+8y/3wQiHLmqNJyiFzPLlGYSKyqnzuLlCn3wkJJ3FfKQEgXvS6ybODoPoO2n
8L5YB81cUP48y/cJ0uFDWqrErQYT7IffyOdEd+ZGkVnUhhKnjxr8FKNOh1LV
nf0YClzQTgTR1cGqLjXDJZ7Y5Dm+OZecp4g9m3g/E3uN8Pb8j/H+5/d4Pywf
JPLOD+Cre7zPEnhvmMYhfekS7YCykrr3YO/nsmFEQzwq6IRxLQb/2gQKypu5
n6tarjTC47dN8D5k/vWPcCv7vVV+aCb5KFmdfPYR+dUMuXYE26kbrA78B/C+
kK4vr84oLBLXQmz/k9TUWbUW9GwcY3Z8GDklQmmR4mtM0CyEceTbRFu7VgpU
IYtKxHPFvj15U4Ak+JG8zJ8pJVJhhnYygI2FKZRVtwsN+pcPL3OUx5TH6mk/
tuamUFopsek390GIhX3KFq2yr2A3zEWj5MyShaaTfk7Ax/NGJ2Z3A3Ba+9A2
tovJ0UG8ULULGPnZe6M8qupC55wf7pkJFFfIUT6TL38k5cJTNniJZgqrocjP
xAeSxE/UHu6gtdEg8SuznEZmzY/RPpt8bypbpfuv8uyPZaKe1zox7Paix8DD
2XfKa38pXxNvVQ3shrCxvoBS0aMqWRXIaXZgeOcYrj6HrBbO6X/I034uBX5+
s/gQWAxHnnU0tjBLAoHEtBn7k5ZRLHhPEdhZQgkLippH3Nzjub+QKRPSrdQw
ibWTmHz2WgiAzArtfco68LxzEb7gKVbnxC1Vjeizv72fjRi6UDeDqY1lVAvn
rNKyBX+8GvXOdXh56bVxp+RI2YIih2zpst4dHJ2EMex0ShX9pEyH8s4ZrD3k
9Rfw0gw2EdOFi35WYYR5OYAdVlNtlUZKJKXyzOhZE5U3guelAuh0n97nVOCm
eNx2YvsAY05CeJni7Z+xA3M7hjDpOYaj2/aQ048flonzzuYCd1spiGrUksz/
Sr72F3Jiz5jfYu0MZt1urnobnqj6MLTpR7/FJJPCS12JwzMEX2aI78zIOEzd
98+LenHrwiAajckS208lS0mI5oyUf+wT0bQlAqa1P5OHfchh2cvSbWipvpV9
gsgeM3qxrL+Q+z5STi9TLsn9//Sj04UC0siDtHIJ1fccqJGv878Ktt5f5um7
y3x+fxmRU6l+SgXiELbZNE8eLnEf/FMptDT//eGUSsUlisD/5r2rP7kHsMx3
c8y6l2oiyF89HCr2lSjp4KEfvt2tzOdR6XvxffR2mnL3w9EfSkXwqETO5oPP
HvZJpdHxo+RlvjtO7FdO/0RS1CMlecoSVSgs+i4Ln/y7LGgV8aEs4QcPYby3
1CymP53zh+/v43hiQT59bwGfKNen2BX7/kyW21Ml1LcppQC5ES9niLbJEJ+o
ZfmllfIraFAe1SWOkSnE9kPpHrOVf5zLn+775Cf2/dVP7Pun/+BxvxTbj8Su
//0Tr/7Pn9j30U/s+1xsfyZ2ffz2//7Xj/f91NzkuD91PYjtbxXGY2FkiK9q
ede2T8pb8SVlwu8Lmngkt3LTJzYZ+Nf8BlJltSHjMJlOiMPRZh6A1bUIo1N8
9xq3ctMnNhnQ909nwDntzkheXcvvjdOvrs3Y1zcW7CsrPFxs5aZPbDLsyyvT
Gfbt7ZWMpuurEA/P+H9/pvhr\
\>"]],

Cell["\<\
This time, we have to go down the results page to find the answers, but we \
have two that agree. There are about 9 calories per gram of fat, and that\
\[CloseCurlyQuote]s good enough for us to find out whether the original \
information in the nutrition label pertains to the advertised \
\[OpenCurlyDoubleQuote]Serving Size\[CloseCurlyDoubleQuote] of four ounces or \
to the implied serving size of one ounce.\
\>", "Text",
 CellChangeTimes->{{3.543519050232112*^9, 3.5435191694860363`*^9}, {
  3.543519335719658*^9, 3.543519369063992*^9}, {3.5435774670229454`*^9, 
  3.5435775193069353`*^9}, {3.553596012973114*^9, 3.553596031124516*^9}, {
  3.553772449038525*^9, 3.5537724501912947`*^9}}],

Cell[TextData[{
 "Write a new expression and chain some new rules to keep careful track, \
inline this time (meaning we don\[CloseCurlyQuote]t need to assign these \
rules to a variable). Extract just the ",
 StyleBox["TotalFat",
  FontSlant->"Italic"],
 " from the label data, convert those grams to grams of fat, then convert the \
grams of fat to calories:"
}], "Text",
 CellChangeTimes->{{3.5435193715992455`*^9, 3.543519391273213*^9}, {
  3.543519459220007*^9, 3.5435194865417385`*^9}, {3.5435270555520153`*^9, 
  3.543527096605015*^9}, {3.5435775280354347`*^9, 3.5435775385880384`*^9}, {
  3.553596040460918*^9, 3.55359606951462*^9}, {3.5537725283255653`*^9, 
  3.553772531741194*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", " ", "@", " ", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
     "TotalFat", "/.", "\[IndentingNewLine]", "burgerNutritionFacts"}], "/.", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"gram", "\[Rule]", 
       RowBox[{"gram", " ", "fat"}]}], "}"}]}], "/.", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"gram", " ", "fat"}], "\[Rule]", 
      RowBox[{"9", " ", "calorie"}]}], "}"}]}], "\[IndentingNewLine]", 
   ")"}]}]], "Input",
 CellChangeTimes->{{3.5435193971017957`*^9, 3.543519430181103*^9}, {
  3.5435194900800924`*^9, 3.543519503577442*^9}, {3.5548377476246457`*^9, 
  3.5548377519900823`*^9}}],

Cell[BoxData[
 RowBox[{"81", " ", "calorie"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "Ok, looks like the nutrition label reports the number of calories from fat \
in the ",
 StyleBox["implied",
  FontSlant->"Italic"],
 " serving size of around 1 ounce."
}], "Text",
 CellChangeTimes->{{3.543520983806802*^9, 3.5435210028468018`*^9}, {
  3.5435775542439337`*^9, 3.5435775618193674`*^9}, {3.553596081090721*^9, 
  3.553596081881918*^9}, {3.553772965571978*^9, 3.553772968564826*^9}}],

Cell[TextData[{
 "We need different conversions for different nutritional components: \
carbohydrates and proteins. A little searching gives us ",
 ButtonBox["this page",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://answers.yahoo.com/question/index?qid=20060927203122AAv1MpR"], 
    None},
  ButtonNote->
   "http://answers.yahoo.com/question/index?qid=20060927203122AAv1MpR"],
 " [",
 ButtonBox[Cell[TextData[StyleBox[ButtonBox["18"],
  FontVariations->{"CompatibilityType"->"Superscript"}]], "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{
         RowBox[{"http", ":"}], "//", 
         RowBox[{
           RowBox[{
             RowBox[{"answers", ".", "yahoo", ".", "com"}], "/", "question"}],
            "/", 
           RowBox[{"index", "?", "qid"}]}]}], "=", 
       RowBox[{"20060927203122", "AAv1MpR"}]}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00003F86"],
 "], which we encode in rules as"
}], "Text",
 CellChangeTimes->{{3.5435195249115753`*^9, 3.54351955576066*^9}, {
  3.5435195921703005`*^9, 3.5435196488139644`*^9}, {3.553596111682316*^9, 
  3.553596112861734*^9}, {3.553772575931807*^9, 3.553772596783884*^9}, {
  3.55377356319103*^9, 3.5537735632258043`*^9}, {3.5537736110809793`*^9, 
  3.5537736111285267`*^9}, {3.553783667969174*^9, 3.5537836749867477`*^9}, {
  3.553783869199394*^9, 3.553783869249645*^9}, {3.553799066728407*^9, 
  3.5537990667921133`*^9}, {3.55379910977669*^9, 3.553799109823119*^9}}],

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", " ", "@", " ", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"fatRules", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"gram", "\[Rule]", 
        RowBox[{"gram", " ", "fat"}]}], ",", 
       RowBox[{
        RowBox[{"gram", " ", "fat"}], "\[Rule]", 
        RowBox[{"9", " ", "calorie"}]}]}], "}"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"proteinRules", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"gram", "\[Rule]", 
        RowBox[{"gram", " ", "protein"}]}], ",", 
       RowBox[{
        RowBox[{"gram", " ", "protein"}], "\[Rule]", 
        RowBox[{"4", " ", "calorie"}]}]}], "}"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"carbRules", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"gram", "\[Rule]", 
        RowBox[{"gram", " ", "carbs"}]}], ",", 
       RowBox[{
        RowBox[{"gram", " ", "carbs"}], "\[Rule]", 
        RowBox[{"4", " ", "calorie"}]}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", ")"}]}]], "Input",
 CellChangeTimes->{{3.543519664024485*^9, 3.5435197502211037`*^9}, {
  3.5536018680821877`*^9, 3.55360192556285*^9}, {3.5548377580126843`*^9, 
  3.5548377615850415`*^9}}],

Cell["and apply as follows", "Text",
 CellChangeTimes->{{3.543519759026984*^9, 3.543519766539736*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", " ", "@", " ", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"TotalFat", "/.", "burgerNutritionFacts"}], "//.", "fatRules"}],
      ")"}], "+", "\[IndentingNewLine]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Protein", "/.", "burgerNutritionFacts"}], "//.", 
      "proteinRules"}], ")"}], "+", "\[IndentingNewLine]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"TotalCarbohydrate", "/.", "burgerNutritionFacts"}], "//.", 
      "carbRules"}], ")"}]}], "\[IndentingNewLine]", ")"}]}]], "Input",
 CellChangeTimes->{{3.543519768702952*^9, 3.5435198736594467`*^9}, {
  3.554837767399623*^9, 3.5548377723691196`*^9}}],

Cell[BoxData[
 RowBox[{"165", " ", "calorie"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "Notice the operator \[OpenCurlyDoubleQuote]//.\[CloseCurlyDoubleQuote], \
shorthand for ",
 StyleBox["ReplaceRepeated",
  FontSlant->"Italic"],
 ", because we must keep applying the rewrite rules until nothing changes any \
more. The /. ",
 StyleBox["ReplaceAll",
  FontSlant->"Italic"],
 " operator just applies rules once."
}], "Text",
 CellChangeTimes->{{3.5435198869697776`*^9, 3.543519955637644*^9}, {
  3.543527151235015*^9, 3.5435271720340147`*^9}, {3.543577586858799*^9, 
  3.5435776072369647`*^9}, {3.553601965770178*^9, 3.553601975408662*^9}, {
  3.5537726156353073`*^9, 3.553772635931169*^9}}],

Cell[TextData[{
 StyleBox["Not only does the implied serving size underreport the declared \
weight by a factor of four, but it underreports the actual calories in the \
underreported weight by 5 calories",
  FontSlant->"Italic"],
 ". "
}], "Text",
 CellChangeTimes->{{3.5435198823693175`*^9, 3.5435198826253433`*^9}, {
   3.543519960029083*^9, 3.5435200336974487`*^9}, {3.543520065666645*^9, 
   3.5435200889169703`*^9}, 3.5435201335344315`*^9, {3.5435212274916215`*^9, 
   3.5435212396138334`*^9}, {3.5435776157994547`*^9, 
   3.5435776169885225`*^9}, {3.553772665346223*^9, 3.553772668337638*^9}}],

Cell["\<\
This is why we suspect that the reported 160 calories in a serving is really \
the result of incorrectly adding 30 grams (the implied weight, not the \
declared weight of 4 ounces) to 130 milligrams (the reported weight of the \
small stuff). Doing the arithmetic on the implied calories results in 165, \
not 160.\
\>", "Text",
 CellChangeTimes->{{3.5435776200256968`*^9, 3.5435777182903166`*^9}, {
  3.553772691353581*^9, 3.553772694121667*^9}}],

Cell[TextData[{
 "Let's compute the calories in an actual serving of 4 ounces and ",
 StyleBox["then",
  FontSlant->"Italic"],
 " decide whether we want to eat the burger. This time, we won\
\[CloseCurlyQuote]t ",
 StyleBox["ReplaceRepeated",
  FontSlant->"Italic"],
 " because we want the fat and protein separated"
}], "Text",
 CellChangeTimes->{{3.5435198823693175`*^9, 3.5435198826253433`*^9}, {
   3.543519960029083*^9, 3.5435200336974487`*^9}, {3.543520065666645*^9, 
   3.5435200889169703`*^9}, 3.5435201335344315`*^9, {3.543520251140191*^9, 
   3.5435202741814947`*^9}, {3.553772734104712*^9, 3.55377273435233*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", " ", "@", " ", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{"calorieBreakdown", "=", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"TotalFat", "/.", "burgerNutritionFacts"}], "/.", "fatRules"}],
       ")"}], "+", "\[IndentingNewLine]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Protein", "/.", "burgerNutritionFacts"}], "/.", 
       "proteinRules"}], ")"}], "+", "\[IndentingNewLine]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"TotalCarbohydrate", "/.", "burgerNutritionFacts"}], "/.", 
       "carbRules"}], ")"}]}]}], "\[IndentingNewLine]", ")"}]}]], "Input",
 CellChangeTimes->{{3.5435202365407314`*^9, 3.54352023942902*^9}, {
   3.543520392853361*^9, 3.543520403222398*^9}, 3.543520464084483*^9, {
   3.5548377870125837`*^9, 3.5548377905479374`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"9", " ", "fat", " ", "gram"}], "+", 
  RowBox[{"21", " ", "gram", " ", "protein"}]}]], "Output"]
}, Open  ]],

Cell["Divide by the total weight to get separated grams per ounce", "Text",
 CellChangeTimes->{{3.5435202996620426`*^9, 3.54352030193427*^9}, {
   3.543520361481224*^9, 3.5435203864187174`*^9}, {3.5435212563265047`*^9, 
   3.543521259629835*^9}, 3.553627623407111*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", " ", "@", " ", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{"calorieBreakdown", "/", "totalOunces"}], "\[IndentingNewLine]", 
   ")"}]}]], "Input",
 CellChangeTimes->{{3.5435204107421494`*^9, 3.5435204527443495`*^9}, {
  3.5435208814858017`*^9, 3.543520884260802*^9}, {3.543523531595023*^9, 
  3.5435235419870625`*^9}, {3.5435247606470118`*^9, 3.5435247696230116`*^9}, {
  3.5548377963975224`*^9, 3.554837798810764*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"0.940922668436774`", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"9", " ", "fat", " ", "gram"}], "+", 
     RowBox[{"21", " ", "gram", " ", "protein"}]}], ")"}]}], 
  "ounce"]], "Output"]
}, Open  ]],

Cell["\<\
Multiply by ServingSize, retrieved from the original block, and apply just \
the calorie rules:\
\>", "Text",
 CellChangeTimes->{{3.5435204738061447`*^9, 3.5435205014743776`*^9}, {
  3.543520616880836*^9, 3.543520618648659*^9}}],

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", " ", "@", " ", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"calorieRules", "=", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"gram", " ", "fat"}], "\[Rule]", 
        RowBox[{"9", "calorie"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"gram", " ", "protein"}], "\[Rule]", 
        RowBox[{"4", "calorie"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"gram", " ", "carbs"}], "\[Rule]", 
        RowBox[{"4", "calorie"}]}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
   ")"}]}]], "Input",
 CellChangeTimes->{{3.543520622657258*^9, 3.543520704205103*^9}, 
   3.553627638864071*^9, {3.554837811764059*^9, 3.554837820486931*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", " ", "@", " ", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"4", " ", "ounce", " ", "*", " ", 
      RowBox[{"calorieBreakdown", "/", "totalOunces"}]}], ")"}], "/.", 
    "calorieRules"}], "\[IndentingNewLine]", ")"}]}]], "Input",
 CellChangeTimes->{{3.543520516601865*^9, 3.5435205818983345`*^9}, {
  3.5435206928562374`*^9, 3.5435206959659266`*^9}, {3.543520894438802*^9, 
  3.543520929595802*^9}, {3.5435212775046225`*^9, 3.543521281152987*^9}, {
  3.554837827848667*^9, 3.5548378299368763`*^9}}],

Cell[BoxData[
 RowBox[{"621.0089611682708`", " ", "calorie"}]], "Output"]
}, Open  ]],

Cell["\<\
Uh, oh. That is a different story. Perhaps the salad with lemon would be a \
better lunch.\
\>", "Text",
 CellChangeTimes->{{3.5435207105784655`*^9, 3.5435207180577173`*^9}, {
   3.5435209069948015`*^9, 3.543520924337802*^9}, {3.5435212872155933`*^9, 
   3.543521287271599*^9}, 3.553772850309524*^9}],

Cell["\<\
We note in passing that the burger NFL does not report any weight or calories \
from carbs, but the expressions we wrote are general and would handle other \
nutrition fact labels that do have carbs.\
\>", "Text",
 CellChangeTimes->{{3.553772797342209*^9, 3.553772878980307*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["WITH STRING KEYS", "Subsection",
 CellChangeTimes->{{3.543521566756544*^9, 3.5435215705569243`*^9}, {
  3.55377311887856*^9, 3.553773120502441*^9}}],

Cell["\<\
It\[CloseCurlyQuote]s equally possible to do the entire scheme above using \
strings with embedded spaces for keys instead of using symbols in camelBack. \
Consider the following:\
\>", "Text",
 CellChangeTimes->{{3.543521598846753*^9, 3.5435216460724754`*^9}, {
  3.553772890876157*^9, 3.553772895995453*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"jacquardEvalHeldExpression", " ", "@", " ", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{"(", 
     RowBox[{"burgerNutritionFacts", "=", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"\"\<Serving Size\>\"", "\[Rule]", 
         RowBox[{"4", " ", "ounce"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"\"\<Amount per Serving\>\"", "\[Rule]", " ", 
         RowBox[{"160", " ", "calorie"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"\"\<Calories from Fat\>\"", "\[Rule]", 
         RowBox[{"81.0", " ", "calorie"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"\"\<Saturated Fat\>\"", "\[Rule]", 
         RowBox[{"4", " ", "gram"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"\"\<Cholesterol\>\"", "\[Rule]", 
         RowBox[{"60", "milli", " ", "gram"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"\"\<Sodium\>\"", "\[Rule]", 
         RowBox[{"70", " ", "milli", " ", "gram"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"\"\<Dietary Fiber\>\"", "\[Rule]", 
         RowBox[{"0", "gram"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"\"\<Sugars\>\"", "\[Rule]", 
         RowBox[{"0", "gram"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"\"\<Total Fat\>\"", "\[Rule]", 
         RowBox[{"9", "gram"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"\"\<Protein\>\"", "\[Rule]", 
         RowBox[{"21", "gram"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"\"\<Total Carbohydrate\>\"", "\[Rule]", 
         RowBox[{"0", " ", "gram"}]}]}], "}"}]}], ")"}], 
    "\[IndentingNewLine]", ")"}]}], "//", "gridRules"}]], "Input",
 CellChangeTimes->{{3.5435216485487227`*^9, 3.5435217194078083`*^9}, {
   3.5435218274136076`*^9, 3.543521830685935*^9}, 3.5536276639227247`*^9, {
   3.5548378398418665`*^9, 3.554837843902272*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"Serving Size\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"4"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"ounce"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"Amount per Serving\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"160"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"calorie"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"Calories from Fat\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"81"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"calorie"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"Saturated Fat\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"4"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"gram"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"Cholesterol\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"60"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"gram"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"milli"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"Sodium\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"70"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"gram"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"milli"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"Dietary Fiber\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"0"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"Sugars\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"0"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"Total Fat\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"9"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"gram"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"Protein\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"21"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"gram"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"Total Carbohydrate\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"0"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]}
       },
       AutoDelete->False,
       FrameStyle->RGBColor[0, 0, 1],
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxBackground->{"Columns" -> {
           RGBColor[1, 0.9, 0.8], {
            RGBColor[1, 1, 0.85]}}},
       GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Grid"]}
   },
   AutoDelete->False,
   FrameStyle->RGBColor[0, 
     Rational[2, 3], 0],
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxBackground->{"Columns" -> {{
        RGBColor[0.88, 1, 0.88]}}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output"]
}, Open  ]],

Cell["And our first computation as follows:", "Text",
 CellChangeTimes->{{3.543521726565524*^9, 3.543521734957363*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", " ", "@", " ", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
    "\"\<Total Fat\>\"", "+", "\"\<Dietary Fiber\>\"", "+", "\"\<Protein\>\"",
      "+", "\"\<Total Carbohydrate\>\""}], "/.", "burgerNutritionFacts"}], 
   "\[IndentingNewLine]", ")"}]}]], "Input",
 CellChangeTimes->{{3.543521737517619*^9, 3.543521776313498*^9}, {
  3.5435218109409604`*^9, 3.5435218414200077`*^9}, {3.554837852611143*^9, 
  3.554837855739456*^9}}],

Cell[BoxData[
 RowBox[{"30", " ", "gram"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "All the rest can be done similarly. This works because Jacquard and ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " do not overload + for string concatenation, but rather use a primitive ",
 StyleBox["StringJoin",
  FontSlant->"Italic"],
 " function and a different infix operator, namely <>."
}], "Text",
 CellChangeTimes->{{3.5435218484107075`*^9, 3.5435219120380692`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["ALICE USES JACQUARD", "Subsection",
 CellChangeTimes->{{3.5435200472738066`*^9, 3.5435200533694158`*^9}}],

Cell["\<\
We hope that the advantages of automated arithmetic over symbolic units and \
dimensions are obvious at this point.\
\>", "Text",
 CellChangeTimes->{{3.5435207819688015`*^9, 3.5435208308868017`*^9}, {
  3.543527310931015*^9, 3.5435273123870153`*^9}, {3.553627688060416*^9, 
  3.5536276884040737`*^9}}],

Cell[CellGroupData[{

Cell["An Exercise", "Subsubsection",
 CellChangeTimes->{{3.5435232763203955`*^9, 3.5435232797923956`*^9}}],

Cell["\<\
We leave it as an exercise to the reader to reproduce the computations above \
in native JavaScript, including at least some of the symbolic manipulation of \
units of measure. It will take you quite a lot of code just to catch errors, \
and if you go all the way to doing arithmetic with units, you will have \
implemented a decent fraction of the core capability of a general \
symbolic-computing system. Our suggestion is to begin with a version of the \
nutrition-facts data block similar to the following:\
\>", "Text",
 CellChangeTimes->{{3.5435207499575267`*^9, 3.543520778049802*^9}, {
  3.5435213002078924`*^9, 3.5435214057334437`*^9}, {3.5435219199508605`*^9, 
  3.5435219412479897`*^9}, {3.543528854680015*^9, 3.543528855926015*^9}}],

Cell["\<\
var burgerNutritionFacts003 = 
{ 'Serving Size'       : [  4,   'ounce'     ],
  'Amount per Serving' : [160,   'calorie'   ],
  'Calories from Fat'  : [ 81.0, 'calorie'   ],
  'Saturated Fat'      : [  4,   'gram'      ],
  'Cholesterol'        : [ 60,   'milli gram'],
  'Sodium'             : [ 70,   'milli gram'],
  'Dietary Fiber'      : [  0,   'gram'      ],
  'Sugars'             : [  0,   'gram'      ],
  'Total Fat'          : [  9,   'gram'      ],
  'Protein'            : [ 21,   'gram'      ],
  'Total Carbohydrate' : [  0,   'gram'      ]
};\
\>", "Program",
 CellChangeTimes->{{3.5435214536752377`*^9, 3.5435215364975185`*^9}, {
  3.5435237763304944`*^9, 3.5435237938052416`*^9}, {3.543523870346895*^9, 
  3.543523871954056*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Just Use It", "Subsubsection",
 CellChangeTimes->{{3.543523285024396*^9, 3.543523291111396*^9}}],

Cell[TextData[{
 "Alice doesn\[CloseCurlyQuote]t want to do this exercise because she has \
access to Jacquard APIs in JavaScript. Assume that we have a JavaScript \
object ",
 StyleBox["jqd",
  FontSlant->"Italic"],
 " whose methods are those APIs (documented elsewhere). She does her \
computations as follows. Starting with her original JavaScript object for the \
nutrition facts, she gets a rules form:"
}], "Text",
 CellChangeTimes->{{3.543521547267596*^9, 3.5435215553804073`*^9}, {
  3.5435219464725122`*^9, 3.543521976569522*^9}, {3.5435221542195005`*^9, 
  3.543522198828039*^9}, {3.5435241849390116`*^9, 3.5435242237530117`*^9}, {
  3.5435242758470116`*^9, 3.5435242758870115`*^9}, {3.553773187909218*^9, 
  3.553773190389098*^9}}],

Cell["\<\
var burgerRules = jqd.RulesFromObject(burgerNutritionFacts001);\
\>", "Program",
 CellChangeTimes->{{3.543522241109811*^9, 3.5435222755203695`*^9}, {
   3.5435227796573954`*^9, 3.5435227857213955`*^9}, {3.5435228719003954`*^9, 
   3.543522872868396*^9}, 3.5435232967753954`*^9, {3.5435242423490114`*^9, 
   3.5435242683840113`*^9}}],

Cell["\<\
She now gets a symbolic form of the weight-extraction expression:\
\>", "Text",
 CellChangeTimes->{{3.543522290030918*^9, 3.543522357670396*^9}}],

Cell["\<\
var totalWeight = jqd.Expression('\"Total Fat\" + \"Dietary Fiber\" + \
\"Protein\" + \"Total Carbohydrate\"');\
\>", "Program",
 CellChangeTimes->{{3.5435223634943953`*^9, 3.5435224628253956`*^9}, {
  3.5435225846433954`*^9, 3.543522600130396*^9}, {3.543523300847396*^9, 
  3.5435233015993958`*^9}, {3.543523877346595*^9, 3.543523891250985*^9}, {
  3.5435242430360117`*^9, 3.543524285230012*^9}, {3.543527746205015*^9, 
  3.543527801091015*^9}, {3.553627754355187*^9, 3.55362777399364*^9}}],

Cell["Next, she applies the object to the expression", "Text",
 CellChangeTimes->{{3.5435227401243954`*^9, 3.5435227654893956`*^9}}],

Cell["\<\
var burgerImpliedWeight = jqd.ReplaceAll(totalWeight, burgerRules);
// or jqd.Expression('totalWeight /. burgerRules')
console.logJacquardFullForm(burgerImpliedWeight)\
\>", "Program",
 CellChangeTimes->{{3.5435228043203955`*^9, 3.5435229070753956`*^9}, {
   3.5435229720563955`*^9, 3.5435229733033953`*^9}, 3.5435233073833957`*^9, {
   3.5435242450210114`*^9, 3.5435242689110117`*^9}, {3.543527819323015*^9, 
   3.5435278365600147`*^9}}],

Cell["which produces the following on the console", "Text",
 CellChangeTimes->{{3.5435229096983957`*^9, 3.5435229149703956`*^9}}],

Cell["Times[30, gram]", "Program",
 CellChangeTimes->{{3.543522924250396*^9, 3.5435229489443955`*^9}}],

Cell["She now encodes her unit conversions", "Text",
 CellChangeTimes->{{3.543523035741396*^9, 3.5435230412043953`*^9}}],

Cell["\<\
var unitConversions = jqd.RulesFromObject({
  milli : 1/1000.0, 
  gram  : jqd.Expression('ounce / 28.35')});\
\>", "Program",
 CellChangeTimes->{{3.5435230512673955`*^9, 3.543523192156396*^9}, {
  3.543523321351001*^9, 3.543523328582724*^9}, {3.5435242456760116`*^9, 
  3.543524305989012*^9}, {3.543527851200015*^9, 3.543527866991015*^9}}],

Cell["and applies them", "Text",
 CellChangeTimes->{{3.5435231959963956`*^9, 3.5435231979643955`*^9}}],

Cell["\<\
var totalOunces = jqd.Expression(
  'totalWeight + \"Cholesterol\" + \"Sodium\" /.
      burgerRules /. 
    unitConversions');
console.logJacquardFullForm(totalOunces);\
\>", "Program",
 CellChangeTimes->{{3.5435232095233955`*^9, 3.5435232589293957`*^9}, {
  3.5435233375196176`*^9, 3.5435234495888233`*^9}, {3.543523897924652*^9, 
  3.5435239020530653`*^9}, {3.5435242468840113`*^9, 3.5435242695330114`*^9}, {
  3.5435243147090116`*^9, 3.5435243152920113`*^9}, {3.543527877175015*^9, 
  3.543527964938015*^9}, {3.553627799968964*^9, 3.553627817168297*^9}}],

Cell["Producing", "Text",
 CellChangeTimes->{{3.5435234527811427`*^9, 3.5435234538292475`*^9}}],

Cell["Times[1.0627866, ounce]", "Program",
 CellChangeTimes->{{3.543523463534218*^9, 3.543523477038568*^9}}],

Cell[TextData[{
 "Side stepping the intermediate, exploratory computation with ",
 StyleBox["ReplaceRepeated",
  FontSlant->"Italic"],
 ", she creates more components of  the computation:"
}], "Text",
 CellChangeTimes->{{3.543523596676531*^9, 3.543523602389102*^9}, {
   3.5435239901118703`*^9, 3.543524014521311*^9}, 3.543528170216015*^9, {
   3.5435282674270153`*^9, 3.543528278115015*^9}, {3.543577882482708*^9, 
   3.54357788461983*^9}, {3.553627833528969*^9, 3.553627834007536*^9}}],

Cell["\<\
var fatRules     = jqd.Expression('gram -> gram fat');
var proteinRules = jqd.Expression('gram -> gram protein');
var carbRules    = jqd.Expression('gram -> gram carbs');

var calorieBreakdown = jqd.Expression('
  (TotalFat          /. burgerNutritionFacts /. fatRules) +
  (Protein           /. burgerNutritionFacts /. proteinRules) +
  (TotalCarbohydrate /. burgerNutritionFacts /. carbRules)');

var calorieRules = jqd.Expression('calorieRules = {
  gram fat     -> 9 calorie,
  gram protein -> 4 calorie,
  gram carbs   -> 4 calorie}');\
\>", "Program",
 CellChangeTimes->{{3.5435236142532883`*^9, 3.54352362787065*^9}, {
  3.5435236605939217`*^9, 3.5435237015620184`*^9}, {3.5435239037482347`*^9, 
  3.5435239864004993`*^9}, {3.5435240199628553`*^9, 3.5435241637640114`*^9}, {
  3.5435242491610117`*^9, 3.543524268277012*^9}, {3.5435243248210115`*^9, 
  3.5435243952400117`*^9}, {3.543527990411015*^9, 3.543528147641015*^9}, {
  3.543528179616015*^9, 3.5435282479020147`*^9}, {3.543577876588371*^9, 
  3.5435779131864643`*^9}, {3.553627843295912*^9, 3.5536278775830517`*^9}}],

Cell["And finishes up with this:", "Text",
 CellChangeTimes->{{3.543524413048012*^9, 3.543524423711012*^9}}],

Cell["\<\
console.logJacquardInputForm(jqd.Quotient(calorieBreakdown, totalOunces));\
\>", "Program",
 CellChangeTimes->{{3.543524431902012*^9, 3.5435247351440115`*^9}, 
   3.5435249496130114`*^9, {3.543528301747015*^9, 3.543528350263015*^9}, {
   3.543528456323015*^9, 3.543528456913015*^9}}],

Cell["producing", "Text",
 CellChangeTimes->{{3.543524742119012*^9, 3.5435247431110115`*^9}}],

Cell["(0.940922668436774*(9*fat*gram + 21*gram*protein))/ounce", "Program",
 CellChangeTimes->{{3.5435247783260117`*^9, 3.5435247813090115`*^9}, {
  3.5435283536070147`*^9, 3.543528354639015*^9}, {3.543528461458015*^9, 
  3.543528508071015*^9}}],

Cell["and, playing with various options", "Text",
 CellChangeTimes->{{3.543524805796012*^9, 3.5435248060040116`*^9}, {
  3.543528539189015*^9, 3.543528545077015*^9}}],

Cell["\<\
console.logJacquardFullForm(
  jqd.ReplaceAll(
    jqd.Expression('4 ounce * calorieBreakdown/totalOunces'),
    calorieRules));\
\>", "Program",
 CellChangeTimes->{{3.5435248261230116`*^9, 3.5435248818000116`*^9}, {
  3.5435249268300114`*^9, 3.543524945317012*^9}, {3.543528536319015*^9, 
  3.543528593731015*^9}, {3.5536278973832607`*^9, 3.553627904310177*^9}}],

Cell["producing", "Text",
 CellChangeTimes->{{3.5435248859600115`*^9, 3.5435248870320115`*^9}}],

Cell["Times[621.008961,calorie]", "Program",
 CellChangeTimes->{{3.5435249032790117`*^9, 3.5435249217660117`*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["CREATING NFL\[CloseCurlyQuote]S ON-THE-FLY", "Section",
 CellChangeTimes->{{3.553773204646352*^9, 3.553773215364349*^9}}],

Cell[TextData[{
 "We spent the first half of this paper demonstrating that NFLs mined off the \
web are untrustworthy, as an exhibition of basic technique in symbolic \
computing. Now, we change philosophy altogether and pursue a different \
agenda: using mined NFLs to generated new NFLs from recipes. Imagine an app \
that can OCR a recipe from an image of its text or even deduce a recipe from \
recognition of an image of a dish at a restaurant or market. Now suppose that \
the app could immediately report an NFL even if it has never seen the recipe \
before. This is a much more adventurous use of symbolic computing, involving \
metarules that write rules that rewrite expressions; vector-space operations \
like canonicalization and normalization; and monadic operators like ",
 StyleBox["SelectMany", "Code"],
 " and ",
 StyleBox["Fold", "Code"],
 ". "
}], "Text",
 CellChangeTimes->{{3.553788778790607*^9, 3.5537889860874243`*^9}, {
  3.553867448032886*^9, 3.553867463216404*^9}, {3.5538675463977213`*^9, 
  3.5538676463627167`*^9}, {3.553867700030083*^9, 3.55386780160924*^9}, {
  3.5538678585299315`*^9, 3.5538679491369915`*^9}, {3.553868190856161*^9, 
  3.553868219241999*^9}, {3.5538682602961044`*^9, 3.553868433535426*^9}}],

Cell["\<\
To be clear, the following does not present technology for OCR or for \
recognizing images of meals -- that's the imagineering part. We show below \
just the technology for synthesizing NFLs given recipes. \
\>", "Text",
 CellChangeTimes->{{3.553788778790607*^9, 3.5537889860874243`*^9}, {
  3.553867448032886*^9, 3.553867463216404*^9}, {3.5538675463977213`*^9, 
  3.5538676463627167`*^9}, {3.553867700030083*^9, 3.55386780160924*^9}, {
  3.5538678585299315`*^9, 3.5538679491369915`*^9}, {3.553868190856161*^9, 
  3.553868219241999*^9}, {3.5538682602961044`*^9, 3.5538684371937923`*^9}}],

Cell[CellGroupData[{

Cell["Mom\[CloseCurlyQuote]s Secret Recipe", "Subsection",
 CellChangeTimes->{{3.5538646471139097`*^9, 3.5538646522584243`*^9}}],

Cell["\<\
This following is your mom\[CloseCurlyQuote]s secret recipe for Pasta \
Primavera. It doesn\[CloseCurlyQuote]t have a published Nutrition Facts \
Label. Can we compute one on-the-fly?\
\>", "Text",
 CellChangeTimes->{{3.5535409252897463`*^9, 3.553540948056746*^9}, {
  3.553781976731471*^9, 3.553781995936749*^9}}],

Cell[CellGroupData[{

Cell["Reset Jacquard\[CloseCurlyQuote]s Brain", "Subsubsection",
 CellChangeTimes->{{3.55483841933681*^9, 3.5548384245203285`*^9}}],

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", "[", 
  RowBox[{"Quit", "[", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.554838391314008*^9, 3.5548384053484116`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Load the Recipe into Jacquard\[CloseCurlyQuote]s Brain\
\>", "Subsubsection",
 CellChangeTimes->{{3.554838430713948*^9, 3.554838438210697*^9}}],

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", " ", "@", " ", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"myRecipe", "=", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"1.0", " ", "Tablespoon", " ", "\"\<olive oil\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"16.0", " ", "Ounce", " ", "\"\<zucchini\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"3.5", " ", "Teaspoon", " ", "\"\<salt\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"1.5", " ", "Pound", " ", "\"\<eggplant\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"1.0", " ", "\"\<onion\>\""}], ",", "\[IndentingNewLine]", 
       RowBox[{"2.0", " ", "\"\<bell pepper\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"14.5", " ", "Ounce", " ", "\"\<stewed tomato\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"0.5", " ", "Teaspoon", " ", "\"\<black pepper\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"0.5", " ", "Teaspoon", " ", "\"\<dried basil\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"0.5", " ", "Teaspoon", " ", "\"\<sugar\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"12.0", " ", "Ounce", " ", "\"\<pasta\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"0.25", " ", "Cup", " ", "\"\<parmesan cheese\>\""}]}], 
      "}"}]}], ";"}], "\n", ")"}]}]], "Code",
 InitializationCell->False,
 CellChangeTimes->{{3.5443620540864058`*^9, 3.544362219111907*^9}, {
   3.5443684706175194`*^9, 3.5443684766695194`*^9}, {3.5443685871715193`*^9, 
   3.5443686086105194`*^9}, {3.544372018764181*^9, 3.5443720425355577`*^9}, {
   3.5443745690292053`*^9, 3.544374596102913*^9}, {3.544374756734974*^9, 
   3.5443747834076414`*^9}, 3.5443907471010656`*^9, {3.544390783275066*^9, 
   3.544390872118066*^9}, {3.5447286544053726`*^9, 3.5447286575893726`*^9}, {
   3.546629022248646*^9, 3.5466290336626463`*^9}, {3.5548379382187033`*^9, 
   3.5548379416500463`*^9}}],

Cell["\<\
The recipe is expressed as symbolic multiplications -- products of numerical \
quantities, symbolic units of measure, and strings that name the ingredients. \
We will use patterns and rules to reduce this to an NFL in a sequence of \
rewrites: first, convert everything to a weight in grams; then, mine the web \
for unit NFLs, one for each ingredient; then multiply each unit ingredient by \
the quantity in the recipe; then add the NFLs component-wise. You will \
recognize this as constructing a vector in NFL space wherein the basis \
vectors are the unit ingredients.\
\>", "Text",
 CellChangeTimes->{{3.553541119670106*^9, 3.553541204090547*^9}, {
  3.553782008239954*^9, 3.553782234160693*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Mining Density Facts", "Subsection",
 CellChangeTimes->{{3.553864697636962*^9, 3.553864701592357*^9}}],

Cell["\<\
Some of the ingredients are expressed as volumes: Tablespoon, Teaspoon, Cup. \
Let\[CloseCurlyQuote]s mine some density facts from the web:\
\>", "Text",
 CellChangeTimes->{{3.5537822517598658`*^9, 3.553782304753305*^9}}],

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", " ", "@", " ", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"density", "[", "\"\<olive oil\>\"", "]"}], " ", "=", " ", 
     RowBox[{
      RowBox[{"Mean", "[", 
       RowBox[{"{", 
        RowBox[{"6.68", ",", "7.67"}], "}"}], "]"}], " ", "*", " ", 
      RowBox[{"Pound", " ", "/", " ", "Gallon"}]}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"density", "[", "\"\<salt\>\"", "]"}], " ", "=", " ", 
     RowBox[{"5.69", " ", 
      RowBox[{"Gram", " ", "/", " ", "Teaspoon"}]}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"density", "[", "\"\<black pepper\>\"", "]"}], " ", "=", " ", 
     RowBox[{"2.1", " ", 
      RowBox[{"Gram", " ", "/", " ", "Teaspoon"}]}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"density", "[", "\"\<dried basil\>\"", "]"}], " ", "=", " ", 
     RowBox[{"1.0", " ", 
      RowBox[{"Gram", " ", "/", " ", "Teaspoon"}]}]}], ";", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"Jacquard", " ", "erases", " ", "1.0"}], ",", " ", 
      RowBox[{"requiring", " ", "more", " ", "rules"}]}], " ", "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"density", "[", "\"\<sugar\>\"", "]"}], " ", "=", " ", 
     RowBox[{"4.2", " ", 
      RowBox[{"Gram", " ", "/", " ", "Teaspoon"}]}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"density", "[", "\"\<parmesan cheese\>\"", "]"}], " ", "=", " ", 
     RowBox[{"88", " ", 
      RowBox[{"Gram", " ", "/", " ", "Cup"}]}]}], ";"}], "\n", 
   ")"}]}]], "Code",
 InitializationCell->False,
 CellChangeTimes->{{3.54438388322441*^9, 3.544383948586946*^9}, {
   3.5443839933904257`*^9, 3.5443840561547017`*^9}, {3.5443841005651426`*^9, 
   3.544384117055791*^9}, {3.544384175978683*^9, 3.5443841762507105`*^9}, {
   3.5443910263040657`*^9, 3.5443910566860657`*^9}, {3.5443911059160657`*^9, 
   3.5443911067470655`*^9}, {3.544451638851782*^9, 3.5444516545239153`*^9}, 
   3.544531335073104*^9, 3.5447276705999327`*^9, {3.544729411517495*^9, 
   3.544729415844928*^9}, {3.5447538320897217`*^9, 3.5447538703279095`*^9}, 
   3.546629010113646*^9, {3.546629055373646*^9, 3.546629100304646*^9}, {
   3.548695590412958*^9, 3.548695595813958*^9}, {3.5498987387381067`*^9, 
   3.5498987408302345`*^9}, {3.553782324305854*^9, 3.553782346223418*^9}, {
   3.554837959760857*^9, 3.5548379648453655`*^9}, {3.554841352074853*^9, 
   3.554841378018447*^9}, 3.5548414704606905`*^9, 3.55484150106175*^9, 
   3.5548417151981616`*^9, 3.5548419320668464`*^9, {3.554841995694208*^9, 
   3.5548419967263117`*^9}, {3.554842142033841*^9, 3.5548421531079483`*^9}}],

Cell["\<\
Here, we represent the facts as a lookup table just for variety. This is very \
similar to the way we would write it in JavaScript. This could also be \
represented as a list of replacement rules as we have been doing all along, \
and, indeed, it is internally. Since we don\[CloseCurlyQuote]t need to apply \
these rules to expressions, but only need to look up the values corresponding \
to each ingredient, we can write them in a form more familiar to the \
JavaScript programmer in this case. \
\>", "Text",
 CellChangeTimes->{{3.5535413531934557`*^9, 3.553541407668903*^9}, {
  3.553782371458651*^9, 3.553782550704871*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["FastConvert", "Subsection",
 CellChangeTimes->{{3.5548380174626265`*^9, 3.554838025925473*^9}, {
  3.5548381596528444`*^9, 3.554838179348814*^9}}],

Cell["Optimized for this scenario", "Text",
 CellChangeTimes->{{3.5548381818770666`*^9, 3.5548381863655157`*^9}}],

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", "@", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"FastConvert", "[", 
      RowBox[{"item_", ",", "Gram"}], "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{"item", "/.", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Milli", "\[Rule]", "0.001"}], ",", "\[IndentingNewLine]", 
         RowBox[{"PoundMass", "\[Rule]", 
          RowBox[{"453.59237", "*", "Gram"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"Pound", "\[Rule]", 
          RowBox[{"453.59237", "*", "Gram"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"OunceMass", "\[Rule]", 
          RowBox[{"28.34952", "*", "Gram"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"Ounce", "\[Rule]", 
          RowBox[{"28.34952", "*", "Gram"}]}]}], "}"}]}], ")"}]}], ";", "\n", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"FastConvert", "[", 
      RowBox[{"item_", ",", "Tablespoon"}], "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{"item", "/.", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Teaspoon", "\[Rule]", 
          RowBox[{"Tablespoon", "/", "3"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"Gallon", "\[Rule]", 
          RowBox[{"256", "*", "Tablespoon"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"Cup", "\[Rule]", 
          RowBox[{"16", "*", "Tablespoon"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"FluidOunce", "\[Rule]", 
          RowBox[{"2", "*", "Tablespoon"}]}]}], "}"}]}], ")"}]}], ";", 
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"FastConvert", "[", 
      RowBox[{"item_", ",", "Cup"}], "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{"item", "/.", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Teaspoon", "\[Rule]", 
          RowBox[{"Cup", "/", "48"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"Tablespoon", "\[Rule]", 
          RowBox[{"Cup", "/", "16"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"FluidOunce", "\[Rule]", 
          RowBox[{"Cup", "/", "8"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"Gallon", "\[Rule]", 
          RowBox[{"16", "*", "Cup"}]}]}], "}"}]}], ")"}]}], ";", 
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"catch", "-", 
      RowBox[{"all", " ", "rule"}]}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"FastConvert", "[", 
      RowBox[{"item_", ",", "unit_"}], "]"}], ":=", "item"}], ";"}], 
   "\[IndentingNewLine]", ")"}]}]], "Input",
 CellChangeTimes->{{3.55483818841372*^9, 3.554838208094688*^9}, {
  3.554838457026579*^9, 3.5548385376626415`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Converting Density Facts to the Recipe\[CloseCurlyQuote]s Volume Units\
\>", "Subsection",
 CellChangeTimes->{{3.553864675995798*^9, 3.553864693292527*^9}}],

Cell["\<\
Given a target volume measure and a density fact, the following is a rule to \
rewrite the density fact in the form of Grams per unit of a desired volume \
measure. The purpose is to normalize densities to the units of a recipe\
\>", "Text",
 CellChangeTimes->{{3.553541420829219*^9, 3.5535414771838536`*^9}, {
  3.5537825632091103`*^9, 3.553783057742498*^9}, {3.553783222590746*^9, 
  3.553783257402886*^9}, {3.5548407946570363`*^9, 3.5548408215194073`*^9}}],

Cell[TextData[{
 "The rule is written in functional notation with a patten on the left and a \
replacement to the right of the definition operator ",
 StyleBox[":=", "Code"],
 ". The pattern will match any expression of the form ",
 Cell[BoxData[
  FormBox[
   RowBox[{"g", "[", 
    RowBox[{"t", ",", " ", 
     RowBox[{"d", " ", "*", " ", 
      RowBox[{"w", " ", "/", " ", "v"}]}]}], "]"}], TraditionalForm]]],
 ", where ",
 Cell[BoxData[
  FormBox["g", TraditionalForm]]],
 " is the literal symbol ",
 StyleBox["gramPerTargetVolumeFromDensity", "Code"],
 ", ",
 Cell[BoxData[
  FormBox["t", TraditionalForm]]],
 " is the pattern variable ",
 StyleBox["targetVolume_", "Code"],
 ", which will match any expression, ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]]],
 " is a number, ",
 Cell[BoxData[
  FormBox["w", TraditionalForm]]],
 " is the pattern variable ",
 StyleBox["weight_", "Code"],
 ", which will match any expression, and ",
 Cell[BoxData[
  FormBox["v", TraditionalForm]]],
 " is the pattern variable ",
 StyleBox["volume_", "Code"],
 ", which will match any expression. The replacement is ",
 StyleBox["(d * Convert[weight, Gram]) / Convert[volume, targetVolume]", 
  "Code"],
 ", wherein the appearances of the pattern variables without their \
underscores will be substituted by their values from the pattern match, and ",
 StyleBox["Gram", "Code"],
 " is a symbolic constant. ",
 StyleBox["Convert", "Code"],
 " rewrites to a more generalized form of the units conversion operators we \
used above in Alice's task, and its definition will be omitted here for \
brevity. We've also transitioned to capitalized names for units of measure in \
keeping with standard practice in international standards. "
}], "Text",
 CellChangeTimes->{{3.553541420829219*^9, 3.5535414771838536`*^9}, {
  3.5537825632091103`*^9, 3.553783057742498*^9}, {3.553783222590746*^9, 
  3.553783257402886*^9}, {3.5548407946570363`*^9, 3.5548408009642973`*^9}}],

Cell[TextData[{
 "We need a separate rule for the case where there is no number. Jacquard \
(and ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ") are very aggressive about erasing 1\[CloseCurlyQuote]s and 0\
\[CloseCurlyQuote]s, and we must often work around that."
}], "Text",
 CellChangeTimes->{{3.5548421663122683`*^9, 3.554842203819019*^9}}],

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", "@", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "gramPerTargetVolumeFromDensity", "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"gramPerTargetVolumeFromDensity", "[", "\[IndentingNewLine]", 
      RowBox[{"targetVolume_", ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"d_:", "?", "NumberQ"}], " ", "*", " ", 
        RowBox[{"weight_", "/", "volume_"}]}]}], "]"}], ":=", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"d", "*", 
        RowBox[{"FastConvert", "[", 
         RowBox[{"weight", ",", "Gram"}], "]"}]}], ")"}], "/", 
      RowBox[{"FastConvert", "[", 
       RowBox[{"volume", ",", "targetVolume"}], "]"}]}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "A", " ", "special", " ", "variation", " ", "of", " ", "the", " ", 
      "Rule", " ", "for", " ", "when", " ", "1.0", "s", " ", "are", " ", 
      "erased"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"gramPerTargetVolumeFromDensity", "[", "\[IndentingNewLine]", 
      RowBox[{"targetVolume_", ",", "\[IndentingNewLine]", " ", 
       RowBox[{"weight_", "/", "volume_"}]}], "]"}], ":=", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"FastConvert", "[", 
        RowBox[{"weight", ",", "Gram"}], "]"}], ")"}], "/", 
      RowBox[{"FastConvert", "[", 
       RowBox[{"volume", ",", "targetVolume"}], "]"}]}]}], ";"}], 
   "\[IndentingNewLine]", ")"}]}]], "Input",
 CellChangeTimes->{{3.544372844767008*^9, 3.5443729744140415`*^9}, {
   3.544373018176665*^9, 3.5443732274228926`*^9}, {3.5443733213308926`*^9, 
   3.544373325595893*^9}, {3.5443733780798926`*^9, 3.5443734087978926`*^9}, 
   3.5443735646148925`*^9, {3.5443737002118926`*^9, 3.5443737254688926`*^9}, {
   3.5443737845798926`*^9, 3.544373843319893*^9}, {3.5443739317318926`*^9, 
   3.5443739472908926`*^9}, {3.5443740785021577`*^9, 3.544374109367244*^9}, {
   3.544374952753574*^9, 3.544374958226121*^9}, {3.544375018484146*^9, 
   3.5443750235486526`*^9}, {3.5443751694202385`*^9, 
   3.5443751753498316`*^9}, {3.544386894041546*^9, 3.5443869071499233`*^9}, {
   3.544531292731119*^9, 3.5445313049951177`*^9}, {3.5445417998467007`*^9, 
   3.544541802725989*^9}, {3.5445465489764476`*^9, 3.5445465857150984`*^9}, {
   3.5447298104909935`*^9, 3.544729824923437*^9}, {3.544885181302472*^9, 
   3.5448851862994723`*^9}, {3.546629200692646*^9, 3.546629236667646*^9}, {
   3.548695409684958*^9, 3.548695415308958*^9}, {3.548695463298958*^9, 
   3.5486954732929583`*^9}, 3.553782577857584*^9, {3.55483855585594*^9, 
   3.5548385756399612`*^9}, {3.554841678966539*^9, 3.5548416802116632`*^9}, {
   3.5548417327749195`*^9, 3.554841872730913*^9}, {3.5548419041660566`*^9, 
   3.554841923744014*^9}, {3.5548420136260014`*^9, 3.5548420278184204`*^9}, {
   3.5548421060122395`*^9, 3.5548421198776255`*^9}, {3.554842411113746*^9, 
   3.554842425994234*^9}}],

Cell["\<\
Test this by converting one of the densities, say the one for olive oil\
\>", "Text",
 CellChangeTimes->{{3.554840770280162*^9, 3.554840773776861*^9}, {
  3.5548408296750383`*^9, 3.554840848155734*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", "@", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{"density", "[", "\"\<olive oil\>\"", "]"}], "\[IndentingNewLine]", 
   ")"}]}]], "Input",
 CellChangeTimes->{{3.5548408511573343`*^9, 3.55484086083727*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"7.175`", " ", "Pound"}], "Gallon"]], "Output"]
}, Open  ]],

Cell["\<\
into a density expressed in terms of a desired unit, say Tablespoons:\
\>", "Text",
 CellChangeTimes->{{3.554840872735649*^9, 3.554840886239274*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", "@", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{"gramPerTargetVolumeFromDensity", "[", "\[IndentingNewLine]", 
    RowBox[{"Tablespoon", ",", "\[IndentingNewLine]", 
     RowBox[{"density", "[", "\"\<olive oil\>\"", "]"}]}], "]"}], 
   "\[IndentingNewLine]", ")"}]}]], "Input",
 CellChangeTimes->{{3.5548385822622986`*^9, 3.5548386384336815`*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"12.712989276367187`", " ", "Gram"}], "Tablespoon"]], "Output"]
}, Open  ]],

Cell["\<\
Dried Basil is the hacked ingredient\
\>", "Text",
 CellChangeTimes->{{3.5548419651251516`*^9, 3.554841977768416*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", "@", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{"gramPerTargetVolumeFromDensity", "[", "\[IndentingNewLine]", 
    RowBox[{"Tablespoon", ",", "\[IndentingNewLine]", 
     RowBox[{"density", "[", "\"\<dried basil\>\"", "]"}]}], "]"}], 
   "\[IndentingNewLine]", ")"}]}]], "Input",
 CellChangeTimes->{{3.554841703009943*^9, 3.5548417056712093`*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"3", " ", "Gram"}], "Tablespoon"]], "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Converting Quantified Densities into Weights", "Subsection",
 CellChangeTimes->{{3.553864728782076*^9, 3.553864745063704*^9}}],

Cell[TextData[{
 "The next rule matches a quantified ingredient line in the recipe -- the \
pattern of a numerical quantity times an ingredient name times a volume from \
an explicit list of symbolic constants -- and produces a rule to rewrite this \
quantified volume ingredient as a weight in ",
 StyleBox["Grams", "Code"],
 ". "
}], "Text",
 CellChangeTimes->{{3.5535414982889643`*^9, 3.5535415641015444`*^9}, {
  3.5537831626205273`*^9, 3.553783212535033*^9}, {3.5537832649464006`*^9, 
  3.553783542158533*^9}, {3.553783606906815*^9, 3.5537838091405993`*^9}, {
  3.553783867783228*^9, 3.553783948927845*^9}, {3.553799066826982*^9, 
  3.5537990669554358`*^9}, {3.5537991098601933`*^9, 3.5537991099956417`*^9}, {
  3.5548409037380238`*^9, 3.554840955637213*^9}}],

Cell[TextData[{
 "This is a meta-rule: a rule producing a new rule. There is an additional \
catch-all rule that rewrites anything that does not match that pattern into \
the emtpy list, ",
 StyleBox["{}", "Code"],
 ". The reason for this catch-all is that we run this over the recipe via ",
 StyleBox["SelectMany", "Code"],
 ", the composition of ",
 StyleBox["map", "Code"],
 " and ",
 StyleBox["flatten-once", "Code"],
 ", also known as ",
 ButtonBox["flatmap, concatmap, and bind",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://en.wikibooks.org/wiki/Haskell/Understanding_monads"], None},
  ButtonNote->"http://en.wikibooks.org/wiki/Haskell/Understanding_monads"],
 " [",
 ButtonBox[Cell[TextData[StyleBox[ButtonBox["19"],
  FontVariations->{"CompatibilityType"->"Superscript"}]], "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"http", ":"}], "//", 
       RowBox[{
         RowBox[{
           RowBox[{
             RowBox[{"en", ".", "wikibooks", ".", "org"}], "/", "wiki"}], "/",
            "Haskell"}], "/", "Understanding_monads"}]}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"000035D7"],
 "]: ",
 ButtonBox["the mother of all monadic operators",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://community.bartdesmet.net/blogs/bart/Default.aspx?PageIndex=2"]\
, None},
  ButtonNote->
   "http://community.bartdesmet.net/blogs/bart/Default.aspx?PageIndex=2"],
 " [",
 ButtonBox[Cell[TextData[StyleBox[ButtonBox["20"],
  FontVariations->{"CompatibilityType"->"Superscript"}]], "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{
         RowBox[{"http", ":"}], "//", 
         RowBox[{
           RowBox[{
             RowBox[{
               RowBox[{"community", ".", "bartdesmet", ".", "net"}], "/", 
               "blogs"}], "/", "bart"}], "/", 
           RowBox[{"Default", ".", 
             RowBox[{"aspx", "?", "PageIndex"}]}]}]}], "=", "2"}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"000048B7"],
 "]. "
}], "Text",
 CellChangeTimes->{{3.5535414982889643`*^9, 3.5535415641015444`*^9}, {
  3.5537831626205273`*^9, 3.553783212535033*^9}, {3.5537832649464006`*^9, 
  3.553783542158533*^9}, {3.553783606906815*^9, 3.5537838091405993`*^9}, {
  3.553783867783228*^9, 3.553783948927845*^9}, {3.553799066826982*^9, 
  3.5537990669554358`*^9}, {3.5537991098601933`*^9, 3.5537991099956417`*^9}, {
  3.5548409037380238`*^9, 3.5548410151241612`*^9}}],

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", "@", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"SelectMany", "[", 
     RowBox[{"list_", ",", "func_"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Map", "[", 
      RowBox[{"func", ",", "list"}], "]"}], "//", 
     RowBox[{
      RowBox[{"Flatten", "[", 
       RowBox[{"#", ",", "1"}], "]"}], "&"}]}]}], "\[IndentingNewLine]", 
   ")"}]}]], "Input",
 CellChangeTimes->{{3.5548410461522636`*^9, 3.5548410666733155`*^9}}],

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", "@", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
    "ClearAll", "[", "weightRuleFromQuantifiedIngredientVolume", "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"weightRuleFromQuantifiedIngredientVolume", "[", 
      RowBox[{
       RowBox[{"quantity_", "?", "NumberQ"}], "   ", "*", "   ", 
       "ingredient_", "   ", "*", 
       RowBox[{"volume", ":", 
        RowBox[{"(", 
         RowBox[{
         "Teaspoon", "|", "Tablespoon", "|", "Cup", "|", "FluidOunce", "|", 
          "Pint", "|", "Gallon"}], ")"}]}]}], "]"}], ":=", " ", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ingredient", "*", "volume"}], " ", 
      StyleBox["\[Rule]",
       FontSize->36,
       Background->RGBColor[0.88, 1, 0.88]], "\[IndentingNewLine]", 
      RowBox[{"ingredient", "*", 
       RowBox[{"gramPerTargetVolumeFromDensity", "[", 
        RowBox[{"volume", ",", "\[IndentingNewLine]", 
         RowBox[{"density", "[", "ingredient", "]"}]}], "]"}], "*", 
       "volume"}]}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "A", " ", "special", " ", "variation", " ", "of", " ", "the", " ", 
      "Rule", " ", "for", " ", "when", " ", "1.0", "s", " ", "are", " ", 
      "erased"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
     "weightRuleFromQuantifiedIngredientVolume", "[", "\[IndentingNewLine]", 
      RowBox[{"ingredient_", "   ", "*", 
       RowBox[{"volume", ":", 
        RowBox[{"(", 
         RowBox[{
         "Teaspoon", "|", "Tablespoon", "|", "Cup", "|", "FluidOunce", "|", 
          "Pint", "|", "Gallon"}], ")"}]}]}], "]"}], ":=", " ", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ingredient", "*", "volume"}], " ", 
      StyleBox["\[Rule]",
       FontSize->36,
       Background->RGBColor[0.88, 1, 0.88]], "\[IndentingNewLine]", 
      RowBox[{"ingredient", "*", 
       RowBox[{"gramPerTargetVolumeFromDensity", "[", 
        RowBox[{"volume", ",", "\[IndentingNewLine]", 
         RowBox[{"density", "[", "ingredient", "]"}]}], "]"}], "*", 
       "volume"}]}]}], ";", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"weightRuleFromQuantifiedIngredientVolume", "[", "___", "]"}], ":=", 
     RowBox[{"{", "}"}]}]}], ")"}]}]], "Input",
 CellChangeTimes->{{3.5443761551167984`*^9, 3.544376347594044*^9}, {
   3.5443835577508664`*^9, 3.544383567438835*^9}, {3.5443924123064775`*^9, 
   3.544392418695755*^9}, {3.5445313853461*^9, 3.54453140875459*^9}, {
   3.54454664764571*^9, 3.544546662616715*^9}, {3.5447299767546186`*^9, 
   3.5447300022161646`*^9}, 3.5447300334762897`*^9, 3.544730696745364*^9, 
   3.5448855752011414`*^9, {3.546629278356646*^9, 3.546629287084646*^9}, {
   3.5474911879954276`*^9, 3.5474911941974277`*^9}, 3.5486953492349577`*^9, {
   3.5486954535099583`*^9, 3.548695455633958*^9}, {3.548695613173958*^9, 
   3.548695616272958*^9}, {3.548695706225958*^9, 3.5486957227209578`*^9}, 
   3.553783158352597*^9, {3.5548410743450828`*^9, 3.554841090758724*^9}, {
   3.5548413109777436`*^9, 3.554841338553501*^9}, {3.5548414005466995`*^9, 
   3.5548414159172363`*^9}, {3.5548414489315376`*^9, 
   3.5548414566313076`*^9}, {3.5548415099806423`*^9, 
   3.5548415138060246`*^9}, {3.554842239100547*^9, 3.5548422522818646`*^9}, {
   3.5548424427269073`*^9, 3.5548424670003347`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", "@", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{"weightRuleFromQuantifiedIngredientVolume", "[", 
    RowBox[{"1.0", "*", "Teaspoon", " ", "\"\<dried basil\>\""}], "]"}], 
   "\[IndentingNewLine]", ")"}]}]], "Input",
 CellChangeTimes->{{3.5548423122588615`*^9, 3.554842320656701*^9}, {
  3.5548423517698126`*^9, 3.5548423974173765`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"\<\"dried basil\"\>", " ", "Teaspoon"}], "\[Rule]", 
  RowBox[{"\<\"dried basil\"\>", " ", "Gram"}]}]], "Output"]
}, Open  ]],

Cell["\<\
Here are all the volume-to-weight fules from the original recipe. \
\>", "Text",
 CellChangeTimes->{{3.5535415771888533`*^9, 3.553541632420376*^9}, {
  3.5537839633165607`*^9, 3.5537840470076933`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"jacquardEvalHeldExpression", "@", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{"(", 
     RowBox[{"volumeRules", "=", 
      RowBox[{"SelectMany", "[", 
       RowBox[{"myRecipe", ",", "weightRuleFromQuantifiedIngredientVolume"}], 
       "]"}]}], ")"}], "\[IndentingNewLine]", ")"}]}], "//", 
  "gridRules"}]], "Input",
 CellChangeTimes->{{3.5443767318664675`*^9, 3.544376750833364*^9}, {
  3.5443836744545355`*^9, 3.5443836868717775`*^9}, {3.544386363259926*^9, 
  3.544386366096938*^9}, {3.544387062438284*^9, 3.5443870928282843`*^9}, {
  3.544730054429385*^9, 3.544730057858728*^9}, {3.554841133531001*^9, 
  3.554841138954543*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"olive oil\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Tablespoon"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"12.712989276367187`"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"olive oil\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Gram"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"salt\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Teaspoon"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"5.69`"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"salt\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Gram"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"black pepper\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Teaspoon"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"2.1`"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"black pepper\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Gram"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"dried basil\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Teaspoon"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"dried basil\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Gram"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"sugar\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Teaspoon"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"4.2`"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"sugar\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Gram"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"parmesan cheese\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Cup"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"88"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"parmesan cheese\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Gram"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]}
       },
       AutoDelete->False,
       FrameStyle->RGBColor[0, 0, 1],
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxBackground->{"Columns" -> {
           RGBColor[1, 0.9, 0.8], {
            RGBColor[1, 1, 0.85]}}},
       GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Grid"]}
   },
   AutoDelete->False,
   FrameStyle->RGBColor[0, 
     Rational[2, 3], 0],
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxBackground->{"Columns" -> {{
        RGBColor[0.88, 1, 0.88]}}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output"]
}, Open  ]],

Cell["\<\
We hope that the brevity, clarity, and flexibility of the rule - and - \
replacement paradigm has by now impressed you. The equivalent in JavaScript \
or C # would be a very considerable amount of code.\
\>", "Text",
 CellChangeTimes->{{3.553784050241888*^9, 3.5537840587324657`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Converting Itemized Ingredients to Weights\
\>", "Subsection",
 CellChangeTimes->{{3.5538647527994776`*^9, 3.553864774296627*^9}}],

Cell[TextData[{
 "Let us do likewise for ingredients expressed as whole items: mine the web \
for typical weights and convert the ingredient lines into rules for \
converting their units and identifiers into weights. The technique will be \
exactly as above: using a rule-pruducing rule and ",
 StyleBox["SelectMany", "Code"],
 ": "
}], "Text",
 CellChangeTimes->{{3.553784078249112*^9, 3.5537841790070343`*^9}}],

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", "@", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"wholeItemWeight", "[", "\"\<onion\>\"", "]"}], "=", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1.0", "/", "3"}], ")"}], "Pound"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"wholeItemWeight", "[", "\"\<bell pepper\>\"", "]"}], "=", 
     RowBox[{"0.5", 
      RowBox[{"Pound", "/", "4"}]}]}], ";"}], "\[IndentingNewLine]", 
   ")"}]}]], "Input",
 CellChangeTimes->{{3.544387208533284*^9, 3.544387255917284*^9}, {
  3.544391130305066*^9, 3.544391168415066*^9}, {3.544392315430066*^9, 
  3.544392315656066*^9}, {3.544546764611312*^9, 3.544546770626109*^9}, {
  3.546629627639928*^9, 3.546629645211685*^9}, {3.5548426901294703`*^9, 
  3.5548426938960934`*^9}}],

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", "@", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
    "ClearAll", "[", "weightRuleFromQuantifiedWholeItemIngredient", "]"}], 
    ";", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"weightRuleFromQuantifiedWholeItemIngredient", "[", 
      RowBox[{"_", "  ", "*", "  ", "_String", "  ", "*", "  ", "_Symbol"}], 
      "]"}], "=", 
     RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
     "weightRuleFromQuantifiedWholeItemIngredient", "[", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"_", "?", "NumberQ"}], "  ", "*", "  ", "ingredient_String"}], 
      " ", 
      RowBox[{"(*", " ", 
       RowBox[{"do", " ", "match", " ", "a", " ", "pair"}], " ", "*)"}], 
      "]"}], ":=", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"generate", " ", "the", " ", "following", " ", "rule"}], " ", 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"ingredient", 
      StyleBox["\[Rule]",
       FontSize->36,
       Background->RGBColor[0.88, 1, 0.88]], 
      RowBox[{"ingredient", "*", 
       RowBox[{"wholeItemWeight", "[", "ingredient", "]"}]}]}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "special", " ", "case", " ", "for", " ", "when", " ", "1.0", " ", "is", 
      " ", "erased"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
     "weightRuleFromQuantifiedWholeItemIngredient", "[", 
      "\[IndentingNewLine]", "ingredient_String", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"do", " ", "match", " ", "a", " ", "pair"}], " ", "*)"}], 
      "]"}], ":=", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"generate", " ", "the", " ", "following", " ", "rule"}], " ", 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"ingredient", 
      StyleBox["\[Rule]",
       FontSize->36,
       Background->RGBColor[0.88, 1, 0.88]], 
      RowBox[{"ingredient", "*", 
       RowBox[{"wholeItemWeight", "[", "ingredient", "]"}]}]}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"weightRuleFromQuantifiedWholeItemIngredient", "[", "___", "]"}],
      "=", 
     RowBox[{"{", "}"}]}], ";"}], ")"}]}]], "Input",
 CellChangeTimes->{{3.547554704237761*^9, 3.54755477343468*^9}, {
  3.553784187608062*^9, 3.5537841910481653`*^9}, {3.554842702804203*^9, 
  3.554842792972185*^9}, {3.5548428727912025`*^9, 3.5548428913163495`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"jacquardEvalHeldExpression", "@", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{"(", 
     RowBox[{"wholeItemRules", "=", 
      RowBox[{"SelectMany", "[", 
       RowBox[{
       "myRecipe", ",", "weightRuleFromQuantifiedWholeItemIngredient"}], 
       "]"}]}], ")"}], "\[IndentingNewLine]", ")"}]}], "//", 
  "gridRules"}]], "Input",
 CellChangeTimes->{{3.544387407004284*^9, 3.544387443379284*^9}, 
   3.5443903347825484`*^9, {3.5443921217640657`*^9, 3.5443921440230656`*^9}, {
   3.5443921874290657`*^9, 3.5443922328110657`*^9}, {3.544392382290066*^9, 
   3.5443923868823934`*^9}, {3.5447301743873796`*^9, 3.544730179613902*^9}, {
   3.5548428099554863`*^9, 3.554842814371045*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"onion\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"0.3333333333333333`"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"onion\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Pound"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"bell pepper\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"0.125`"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"bell pepper\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Pound"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]}
       },
       AutoDelete->False,
       FrameStyle->RGBColor[0, 0, 1],
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxBackground->{"Columns" -> {
           RGBColor[1, 0.9, 0.8], {
            RGBColor[1, 1, 0.85]}}},
       GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Grid"]}
   },
   AutoDelete->False,
   FrameStyle->RGBColor[0, 
     Rational[2, 3], 0],
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxBackground->{"Columns" -> {{
        RGBColor[0.88, 1, 0.88]}}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Converting the Recipe to Weights", "Subsection",
 CellChangeTimes->{{3.553864788096007*^9, 3.553864800097207*^9}}],

Cell["\<\
Now, let\[CloseCurlyQuote]s apply the all the rules we just created from the \
original recipe and the mined volume and whole item facts to the original \
recipe to produce a copy of the recipe with all items as weights: \
\>", "Text",
 CellChangeTimes->{{3.553784214332418*^9, 3.553784321849042*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"jacquardEvalHeldExpression", "@", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"myRecipe", "/.", "volumeRules"}], "/.", "wholeItemRules"}], 
     ")"}], "\[IndentingNewLine]", ")"}]}], "//", "gridRules"}]], "Input",
 CellChangeTimes->{{3.5466319253602386`*^9, 3.5466319558652887`*^9}, {
  3.554842923571124*^9, 3.5548429286726136`*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"Times"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`],
          
          FrontFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          BackFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          GraphicsColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          FontWeight->Bold,
          FontColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
         StyleBox[
          TagBox[GridBox[{
             {"12.712989276367187`"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"\<\"olive oil\"\>"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"Gram"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"Times"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`],
          
          FrontFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          BackFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          GraphicsColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          FontWeight->Bold,
          FontColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
         StyleBox[
          TagBox[GridBox[{
             {"16"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"\<\"zucchini\"\>"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"Ounce"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"Times"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`],
          
          FrontFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          BackFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          GraphicsColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          FontWeight->Bold,
          FontColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
         StyleBox[
          TagBox[GridBox[{
             {"19.915000000000003`"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"\<\"salt\"\>"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"Gram"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"Times"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`],
          
          FrontFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          BackFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          GraphicsColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          FontWeight->Bold,
          FontColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
         StyleBox[
          TagBox[GridBox[{
             {"1.5`"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"\<\"eggplant\"\>"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"Pound"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"Times"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`],
          
          FrontFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          BackFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          GraphicsColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          FontWeight->Bold,
          FontColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
         StyleBox[
          TagBox[GridBox[{
             {"0.3333333333333333`"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"\<\"onion\"\>"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"Pound"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"Times"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`],
          
          FrontFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          BackFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          GraphicsColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          FontWeight->Bold,
          FontColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
         StyleBox[
          TagBox[GridBox[{
             {"0.25`"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"\<\"bell pepper\"\>"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"Pound"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"Times"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`],
          
          FrontFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          BackFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          GraphicsColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          FontWeight->Bold,
          FontColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
         StyleBox[
          TagBox[GridBox[{
             {"14.5`"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"\<\"stewed tomato\"\>"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"Ounce"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"Times"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`],
          
          FrontFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          BackFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          GraphicsColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          FontWeight->Bold,
          FontColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
         StyleBox[
          TagBox[GridBox[{
             {"1.05`"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"\<\"black pepper\"\>"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"Gram"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"Times"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`],
          
          FrontFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          BackFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          GraphicsColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          FontWeight->Bold,
          FontColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
         StyleBox[
          TagBox[GridBox[{
             {"0.5`"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"\<\"dried basil\"\>"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"Gram"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"Times"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`],
          
          FrontFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          BackFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          GraphicsColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          FontWeight->Bold,
          FontColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
         StyleBox[
          TagBox[GridBox[{
             {"2.1`"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"\<\"sugar\"\>"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"Gram"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"Times"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`],
          
          FrontFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          BackFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          GraphicsColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          FontWeight->Bold,
          FontColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
         StyleBox[
          TagBox[GridBox[{
             {"12"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"\<\"pasta\"\>"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"Ounce"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"Times"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`],
          
          FrontFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          BackFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          GraphicsColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          FontWeight->Bold,
          FontColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
         StyleBox[
          TagBox[GridBox[{
             {"22"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"\<\"parmesan cheese\"\>"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"Gram"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold]}
       },
       AutoDelete->False,
       FrameStyle->GrayLevel[0],
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxBackground->{"Columns" -> {
           RGBColor[1, 0.9, 0.8], {
            RGBColor[0.88, 1, 0.88]}}},
       GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Grid"]}
   },
   AutoDelete->False,
   FrameStyle->RGBColor[0, 
     Rational[2, 3], 0],
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxBackground->{"Columns" -> {{
        RGBColor[0.88, 1, 0.88]}}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output"]
}, Open  ]],

Cell["\<\
and then convert all such weights to Grams by mapping a function over the \
result above:\
\>", "Text",
 CellChangeTimes->{{3.5537843267519608`*^9, 3.55378434739003*^9}, {
  3.5538648042816253`*^9, 3.553864805162713*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"jacquardEvalHeldExpression", "@", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{"(", 
     RowBox[{"recipeInGrams", "=", "\[IndentingNewLine]", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{"Function", "[", "\[IndentingNewLine]", 
         RowBox[{"ingredient", ",", "\[IndentingNewLine]", 
          RowBox[{"FastConvert", "[", 
           RowBox[{"ingredient", ",", "Gram"}], "]"}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"myRecipe", "/.", "volumeRules"}], "/.", 
         "wholeItemRules"}]}], "]"}]}], ")"}], "\[IndentingNewLine]", ")"}]}],
   "//", "gridRules"}]], "Input",
 CellChangeTimes->{{3.5447307679703646`*^9, 3.5447308306703644`*^9}, {
  3.548696269294615*^9, 3.548696279830668*^9}, {3.55484295297956*^9, 
  3.55484297429156*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"Times"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`],
          
          FrontFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          BackFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          GraphicsColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          FontWeight->Bold,
          FontColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
         StyleBox[
          TagBox[GridBox[{
             {"12.712989276367187`"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"\<\"olive oil\"\>"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"Gram"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"Times"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`],
          
          FrontFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          BackFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          GraphicsColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          FontWeight->Bold,
          FontColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
         StyleBox[
          TagBox[GridBox[{
             {"453.59232`"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"\<\"zucchini\"\>"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"Gram"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"Times"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`],
          
          FrontFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          BackFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          GraphicsColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          FontWeight->Bold,
          FontColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
         StyleBox[
          TagBox[GridBox[{
             {"19.915000000000003`"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"\<\"salt\"\>"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"Gram"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"Times"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`],
          
          FrontFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          BackFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          GraphicsColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          FontWeight->Bold,
          FontColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
         StyleBox[
          TagBox[GridBox[{
             {"680.388555`"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"\<\"eggplant\"\>"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"Gram"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"Times"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`],
          
          FrontFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          BackFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          GraphicsColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          FontWeight->Bold,
          FontColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
         StyleBox[
          TagBox[GridBox[{
             {"151.19745666666665`"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"\<\"onion\"\>"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"Gram"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"Times"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`],
          
          FrontFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          BackFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          GraphicsColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          FontWeight->Bold,
          FontColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
         StyleBox[
          TagBox[GridBox[{
             {"113.3980925`"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"\<\"bell pepper\"\>"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"Gram"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"Times"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`],
          
          FrontFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          BackFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          GraphicsColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          FontWeight->Bold,
          FontColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
         StyleBox[
          TagBox[GridBox[{
             {"411.06804`"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"\<\"stewed tomato\"\>"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"Gram"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"Times"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`],
          
          FrontFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          BackFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          GraphicsColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          FontWeight->Bold,
          FontColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
         StyleBox[
          TagBox[GridBox[{
             {"1.05`"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"\<\"black pepper\"\>"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"Gram"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"Times"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`],
          
          FrontFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          BackFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          GraphicsColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          FontWeight->Bold,
          FontColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
         StyleBox[
          TagBox[GridBox[{
             {"0.5`"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"\<\"dried basil\"\>"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"Gram"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"Times"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`],
          
          FrontFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          BackFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          GraphicsColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          FontWeight->Bold,
          FontColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
         StyleBox[
          TagBox[GridBox[{
             {"2.1`"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"\<\"sugar\"\>"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"Gram"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"Times"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`],
          
          FrontFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          BackFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          GraphicsColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          FontWeight->Bold,
          FontColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
         StyleBox[
          TagBox[GridBox[{
             {"340.19424`"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"\<\"pasta\"\>"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"Gram"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"Times"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`],
          
          FrontFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          BackFaceColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          
          GraphicsColor->RGBColor[
           0.33333333333333337`, 0, 0.33333333333333337`],
          FontWeight->Bold,
          FontColor->RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
         StyleBox[
          TagBox[GridBox[{
             {"22"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"\<\"parmesan cheese\"\>"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold], 
         StyleBox[
          TagBox[GridBox[{
             {"Gram"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          FontWeight->Bold]}
       },
       AutoDelete->False,
       FrameStyle->GrayLevel[0],
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxBackground->{"Columns" -> {
           RGBColor[1, 0.9, 0.8], {
            RGBColor[0.88, 1, 0.88]}}},
       GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Grid"]}
   },
   AutoDelete->False,
   FrameStyle->RGBColor[0, 
     Rational[2, 3], 0],
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxBackground->{"Columns" -> {{
        RGBColor[0.88, 1, 0.88]}}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output"]
}, Open  ]],

Cell["\<\
Just for fun, let\[CloseCurlyQuote]s see how much Pasta Primavera the recipe \
produces. We\[CloseCurlyQuote]ll do so with another pattern that strips out \
the string identifier, keeping only the quantity and the weight, adding it \
all up, and converting the result to pounds. \
\>", "Text",
 CellChangeTimes->{{3.5537843593819733`*^9, 3.55378448651371*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", "@", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{"Apply", "[", 
    RowBox[{"Plus", ",", 
     RowBox[{"Cases", "[", 
      RowBox[{"recipeInGrams", ",", 
       RowBox[{
        RowBox[{"q_", "*", "_String", "*", "u_Symbol"}], "\[Rule]", 
        RowBox[{"q", " ", "u"}]}]}], "]"}]}], "]"}], ")"}]}]], "Input",
 CellChangeTimes->{{3.544446109883408*^9, 3.544446110584408*^9}, {
  3.544735658524254*^9, 3.544735660020339*^9}, {3.544884393011835*^9, 
  3.544884393683835*^9}, {3.5548429909485598`*^9, 3.55484302551656*^9}}],

Cell[BoxData[
 RowBox[{"2208.116693443034`", " ", "Gram"}]], "Output",
 Background->RGBColor[0.88, 1, 0.88]]
}, Open  ]],

Cell["\<\
The recipe produces almost five pounds. Let\[CloseCurlyQuote]s assume it\
\[CloseCurlyQuote]s designed to serve six. \
\>", "Text",
 CellChangeTimes->{{3.553784490679582*^9, 3.553784510603777*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Mining NFLs for the Ingredients\
\>", "Subsection",
 CellChangeTimes->{{3.553864821994396*^9, 3.553864832661463*^9}}],

Cell["\<\
Next, let\[CloseCurlyQuote]s create a constructor that will build an NFL \
object as a list of rules, from facts mined off the web. As a side effect, we \
will keep a list of names of the NFLs and a lookup table that can retrieve \
any NFL given its name. This will help us below when we write the code to \
perform the vector sum from the recipe. Note the style of this constructor \
could be improved considerably. Its parameter list is purely positional; it \
does not leverage pattern-matching to be robust against mistakes in the order \
of arguments. We present it this way just to show an example of ordinary \
procedural programming style in Jacquard.\
\>", "Text",
 CellChangeTimes->{{3.553784519868849*^9, 3.5537846279621687`*^9}, {
   3.553785222159253*^9, 3.553785225110817*^9}, 3.553788658911065*^9, {
   3.5537959987475767`*^9, 3.553796132203883*^9}, {3.55484310833856*^9, 
   3.55484310889856*^9}}],

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", "@", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"nflNames", "=", 
     RowBox[{"{", "}"}]}], ";", "\n", 
    RowBox[{
     RowBox[{"createNutritionFactsLabel", "[", 
      RowBox[{
      "name_", ",", "\n", "servingSize_", ",", "totalCalories_", ",", 
       "fatCalories_", ",", "\[IndentingNewLine]", "totalFat_", ",", 
       "totalFatPercent_", ",", "saturatedFat_", ",", "\n", 
       "saturatedFatPercent_", ",", "transFat_", ",", "\[IndentingNewLine]", 
       "cholesterol_", ",", "cholesterolPercent_", ",", "sodium_", ",", "\n", 
       "sodiumPercent_", ",", "totalCarbohydrates_", ",", "\n", 
       "totalCarbohydratesPercent_", ",", "dietaryFiber_", ",", "\n", 
       "dietaryFiberPercent_", ",", "sugars_", ",", "protein_", ",", "\n", 
       "proteinPercent_", ",", "vitaminAPercent_", ",", "\n", 
       "vitaminCPercent_", ",", "calciumPercent_", ",", "ironPercent_"}], 
      "]"}], ":=", "\n", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"AppendTo", "[", 
        RowBox[{"nflNames", ",", "name"}], "]"}], ";", "\n", 
       RowBox[{
        RowBox[{"nfls", "[", "name", "]"}], "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<name\>\"", "\[Rule]", "name"}], ",", 
          RowBox[{"\"\<serving size\>\"", "\[Rule]", "servingSize"}], ",", 
          "\n", 
          RowBox[{"\"\<total calories\>\"", "\[Rule]", "totalCalories"}], ",", 
          RowBox[{"\"\<fat calories\>\"", "\[Rule]", "fatCalories"}], ",", 
          "\n", 
          RowBox[{"\"\<total fat\>\"", "\[Rule]", "totalFat"}], ",", 
          RowBox[{"\"\<% daily total fat\>\"", "\[Rule]", "totalFatPercent"}],
           ",", "\n", 
          RowBox[{"\"\<saturated fat\>\"", "\[Rule]", "saturatedFat"}], ",", 
          "\n", 
          RowBox[{
          "\"\<% daily saturated fat\>\"", "\[Rule]", "saturatedFatPercent"}],
           ",", "\n", 
          RowBox[{"\"\<trans fat\>\"", "\[Rule]", "transFat"}], ",", 
          RowBox[{"\"\<cholesterol\>\"", "\[Rule]", "cholesterol"}], ",", 
          "\n", 
          RowBox[{
          "\"\<% daily cholesterol\>\"", "\[Rule]", "cholesterolPercent"}], 
          ",", "\n", 
          RowBox[{"\"\<sodium\>\"", "\[Rule]", "sodium"}], ",", 
          RowBox[{"\"\<% daily sodium\>\"", "\[Rule]", "sodiumPercent"}], ",",
           "\n", 
          RowBox[{
          "\"\<total carbohydrates\>\"", "\[Rule]", "totalCarbohydrates"}], 
          ",", "\n", 
          RowBox[{
          "\"\<% daily carbohydrates\>\"", "\[Rule]", 
           "totalCarbohydratesPercent"}], ",", "\n", 
          RowBox[{"\"\<dietary fiber\>\"", "\[Rule]", "dietaryFiber"}], ",", 
          "\n", 
          RowBox[{
          "\"\<%daily dietary fiber\>\"", "\[Rule]", "dietaryFiberPercent"}], 
          ",", "\n", 
          RowBox[{"\"\<sugars\>\"", "\[Rule]", "sugars"}], ",", 
          RowBox[{"\"\<protein\>\"", "\[Rule]", "protein"}], ",", "\n", 
          RowBox[{"\"\<% daily protein\>\"", "\[Rule]", "proteinPercent"}], 
          ",", "\n", 
          RowBox[{"\"\<vitamin A\>\"", "\[Rule]", "vitaminAPercent"}], ",", 
          RowBox[{"\"\<vitamin C\>\"", "\[Rule]", "vitaminCPercent"}], ",", 
          "\n", 
          RowBox[{"\"\<calcium\>\"", "\[Rule]", "calciumPercent"}], ",", 
          RowBox[{"\"\<iron\>\"", "\[Rule]", "ironPercent"}]}], "}"}]}]}], 
      ")"}]}], ";"}], "\n", ")"}]}]], "Code",
 InitializationCell->False,
 CellChangeTimes->{{3.5444519771587067`*^9, 3.5444519919801893`*^9}, {
   3.544456412207389*^9, 3.544456419523389*^9}, 3.544884438129367*^9, 
   3.548695829895958*^9, {3.553784633648183*^9, 3.553784785941805*^9}, {
   3.55484306671356*^9, 3.55484307658156*^9}}],

Cell["\<\
Let\[CloseCurlyQuote]s demonstrate this constructor on one ingredient, \
inspecting the resulting object\
\>", "Text",
 CellChangeTimes->{{3.553784803792807*^9, 3.553784821551076*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"jacquardEvalHeldExpression", "@", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{"createNutritionFactsLabel", "[", 
     RowBox[{"\"\<olive oil\>\"", ",", 
      RowBox[{"216", " ", "Gram"}], ",", 
      RowBox[{"1910", " ", "Calorie"}], ",", 
      RowBox[{"1910", " ", "Calorie"}], ",", 
      RowBox[{"216", " ", "Gram"}], ",", 
      RowBox[{"332", " ", "Percent"}], ",", 
      RowBox[{"30", " ", "Gram"}], ",", 
      RowBox[{"149", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", "\[IndentingNewLine]", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"4", " ", "Milli", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", "\[IndentingNewLine]", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"7", " ", "Percent"}]}], "]"}], "\[IndentingNewLine]", ")"}]}], 
  "//", "gridRules"}]], "Input",
 CellChangeTimes->{{3.5447309643203645`*^9, 3.544730968898364*^9}, {
   3.548695781697958*^9, 3.5486957833379583`*^9}, {3.548695813440958*^9, 
   3.548695816617958*^9}, 3.549904265201522*^9, 3.549904348114783*^9, {
   3.553784826775584*^9, 3.553784830640869*^9}, {3.5548431606985598`*^9, 
   3.5548431659625597`*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"name\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"olive oil\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"serving size\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"216"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Gram"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"total calories\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"1910"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Calorie"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"fat calories\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"1910"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Calorie"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"total fat\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"216"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Gram"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"% daily total fat\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"332"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Percent"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"saturated fat\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"30"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Gram"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"% daily saturated fat\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"149"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Percent"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"trans fat\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"0"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"cholesterol\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"0"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"% daily cholesterol\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"0"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"sodium\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"4"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Gram"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Milli"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"% daily sodium\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"0"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"total carbohydrates\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"0"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"% daily carbohydrates\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"0"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"dietary fiber\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"0"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"%daily dietary fiber\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"0"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"sugars\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"0"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"protein\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"0"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"% daily protein\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"0"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"vitamin A\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"0"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"vitamin C\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"0"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"calcium\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"0"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"iron\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"7"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Percent"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]}
       },
       AutoDelete->False,
       FrameStyle->RGBColor[0, 0, 1],
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxBackground->{"Columns" -> {
           RGBColor[1, 0.9, 0.8], {
            RGBColor[1, 1, 0.85]}}},
       GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Grid"]}
   },
   AutoDelete->False,
   FrameStyle->RGBColor[0, 
     Rational[2, 3], 0],
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxBackground->{"Columns" -> {{
        RGBColor[0.88, 1, 0.88]}}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output"]
}, Open  ]],

Cell["\<\
Let\[CloseCurlyQuote]s run the others for side-effect, but save space by not \
presenting the results:\
\>", "Text",
 CellChangeTimes->{{3.553784986582541*^9, 3.553785042088628*^9}}],

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", "@", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"createNutritionFactsLabel", "[", 
     RowBox[{"\"\<zucchini\>\"", ",", 
      RowBox[{"124", " ", "Gram"}], ",", 
      RowBox[{"20", " ", "Calorie"}], ",", 
      RowBox[{"2", " ", "Calorie"}], ",", "\[IndentingNewLine]", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", "\[IndentingNewLine]", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"12", " ", "Milli", " ", "Gram"}], ",", 
      RowBox[{"1.0", " ", "Percent"}], ",", 
      RowBox[{"4", " ", "Gram"}], ",", 
      RowBox[{"1.0", " ", "Percent"}], ",", 
      RowBox[{"1.0", " ", "Gram"}], ",", 
      RowBox[{"5", " ", "Percent"}], ",", " ", 
      RowBox[{"2", " ", "Gram"}], ",", 
      RowBox[{"2", " ", "Gram"}], ",", 
      RowBox[{"0", "Percent"}], ",", "\[IndentingNewLine]", 
      RowBox[{"5", " ", "Percent"}], ",", 
      RowBox[{"35", " ", "Percent"}], ",", " ", 
      RowBox[{"2", " ", "Percent"}], ",", 
      RowBox[{"2", " ", "Percent"}]}], "]"}], ";", 
    RowBox[{"(*", " ", 
     RowBox[{"//", "gridRules"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{"createNutritionFactsLabel", "[", 
     RowBox[{"\"\<salt\>\"", ",", 
      RowBox[{"1.", " ", "Cup"}], ",", 
      RowBox[{"0", " ", "Calorie"}], ",", 
      RowBox[{"0", " ", "Calorie"}], ",", "\[IndentingNewLine]", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", "\[IndentingNewLine]", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"113174", " ", "Milli", " ", "Gram"}], ",", 
      RowBox[{"4716", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", " ", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", "Percent"}], ",", "\[IndentingNewLine]", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"7", " ", "Percent"}], ",", 
      RowBox[{"5", " ", "Percent"}]}], "]"}], ";", 
    RowBox[{"(*", " ", 
     RowBox[{"//", "gridRules"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{"createNutritionFactsLabel", "[", 
     RowBox[{"\"\<eggplant\>\"", ",", 
      RowBox[{"82", " ", "Gram"}], ",", 
      RowBox[{"20", " ", "Calorie"}], ",", 
      RowBox[{"1.0", " ", "Calorie"}], ",", "\[IndentingNewLine]", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", "\[IndentingNewLine]", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"2", " ", "Milli", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"5", " ", "Gram"}], ",", 
      RowBox[{"2", " ", "Percent"}], ",", 
      RowBox[{"3", " ", "Gram"}], ",", 
      RowBox[{"11", "Percent"}], ",", 
      RowBox[{"2", "Gram"}], ",", 
      RowBox[{"1.0", "Gram"}], ",", 
      RowBox[{"2", "Percent"}], ",", "\[IndentingNewLine]", 
      RowBox[{"0", "Percent"}], ",", 
      RowBox[{"3", "Percent"}], ",", 
      RowBox[{"1.0", "Percent"}], ",", 
      RowBox[{"1.0", "Percent"}]}], "]"}], ";", 
    RowBox[{"(*", " ", 
     RowBox[{"//", "gridRules"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{"createNutritionFactsLabel", "[", 
     RowBox[{"\"\<onion\>\"", ",", 
      RowBox[{"160", " ", "Gram"}], ",", 
      RowBox[{"64", " ", "Calorie"}], ",", 
      RowBox[{"1.0", " ", "Calorie"}], ",", "\[IndentingNewLine]", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", "\[IndentingNewLine]", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"6", " ", "Milli", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"15", " ", "Gram"}], ",", 
      RowBox[{"5", " ", "Percent"}], ",", 
      RowBox[{"3", " ", "Gram"}], ",", 
      RowBox[{"11", "Percent"}], ",", 
      RowBox[{"7", "Gram"}], ",", 
      RowBox[{"2.0", "Gram"}], ",", 
      RowBox[{"0", "Percent"}], ",", "\[IndentingNewLine]", 
      RowBox[{"0", "Percent"}], ",", 
      RowBox[{"20", "Percent"}], ",", 
      RowBox[{"4", "Percent"}], ",", 
      RowBox[{"2", "Percent"}]}], "]"}], ";", 
    RowBox[{"(*", " ", 
     RowBox[{"//", "gridRules"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{"createNutritionFactsLabel", "[", 
     RowBox[{"\"\<bell pepper\>\"", ",", 
      RowBox[{"186", " ", "Gram"}], ",", 
      RowBox[{"50", " ", "Calorie"}], ",", 
      RowBox[{"3.0", " ", "Calorie"}], ",", "\[IndentingNewLine]", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"1.0", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", "\[IndentingNewLine]", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"4", " ", "Milli", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"12", " ", "Gram"}], ",", 
      RowBox[{"4", " ", "Percent"}], ",", 
      RowBox[{"2", " ", "Gram"}], ",", 
      RowBox[{"7", "Percent"}], ",", 
      RowBox[{"2", "Gram"}], ",", 
      RowBox[{"2", "Gram"}], ",", 
      RowBox[{"0", "Percent"}], ",", "\[IndentingNewLine]", 
      RowBox[{"7", "Percent"}], ",", 
      RowBox[{"569", "Percent"}], ",", 
      RowBox[{"2", "Percent"}], ",", 
      RowBox[{"5", "Percent"}]}], "]"}], ";", 
    RowBox[{"(*", " ", 
     RowBox[{"//", "gridRules"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{"createNutritionFactsLabel", "[", 
     RowBox[{"\"\<stewed tomato\>\"", ",", 
      RowBox[{"101", " ", "Gram"}], ",", 
      RowBox[{"80", " ", "Calorie"}], ",", 
      RowBox[{"24.0", " ", "Calorie"}], ",", "\[IndentingNewLine]", 
      RowBox[{"3", " ", "Gram"}], ",", 
      RowBox[{"4", " ", "Percent"}], ",", 
      RowBox[{"1.0", " ", "Gram"}], ",", 
      RowBox[{"3", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", "\[IndentingNewLine]", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"460", " ", "Milli", " ", "Gram"}], ",", 
      RowBox[{"19", " ", "Percent"}], ",", 
      RowBox[{"13", " ", "Gram"}], ",", 
      RowBox[{"4", " ", "Percent"}], ",", 
      RowBox[{"2", " ", "Gram"}], ",", 
      RowBox[{"7", "Percent"}], ",", 
      RowBox[{"0", "Gram"}], ",", 
      RowBox[{"2", "Gram"}], ",", 
      RowBox[{"0", "Percent"}], ",", "\[IndentingNewLine]", 
      RowBox[{"13", "Percent"}], ",", 
      RowBox[{"31", "Percent"}], ",", 
      RowBox[{"3", "Percent"}], ",", 
      RowBox[{"6", "Percent"}]}], "]"}], ";", 
    RowBox[{"(*", " ", 
     RowBox[{"//", "gridRules"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{"createNutritionFactsLabel", "[", 
     RowBox[{"\"\<black pepper\>\"", ",", 
      RowBox[{"1.", " ", "Tablespoon"}], ",", 
      RowBox[{"16", " ", "Calorie"}], ",", 
      RowBox[{"2", " ", "Calorie"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", "\[IndentingNewLine]", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"3", " ", "Milli", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"4", " ", "Gram"}], ",", 
      RowBox[{"1.", " ", "Percent"}], ",", 
      RowBox[{"2", " ", "Gram"}], ",", 
      RowBox[{"7", " ", "Percent"}], ",", " ", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"1.", " ", "Gram"}], ",", 
      RowBox[{"0", "Percent"}], ",", "\[IndentingNewLine]", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"2", " ", "Percent"}], ",", 
      RowBox[{"3", " ", "Percent"}], ",", 
      RowBox[{"10", " ", "Percent"}]}], "]"}], ";", 
    RowBox[{"(*", " ", 
     RowBox[{"//", "gridRules"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{"createNutritionFactsLabel", "[", 
     RowBox[{"\"\<dried basil\>\"", ",", 
      RowBox[{"1.", " ", "Teaspoon"}], ",", 
      RowBox[{"1.0", " ", "Calorie"}], ",", 
      RowBox[{"0", " ", "Calorie"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", "\[IndentingNewLine]", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", "\[IndentingNewLine]", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"1.0", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", "Percent"}], ",", "\[IndentingNewLine]", 
      RowBox[{"1.0", " ", "Percent"}], ",", 
      RowBox[{"1.0", " ", "Percent"}], ",", 
      RowBox[{"1.0", " ", "Percent"}], ",", 
      RowBox[{"1.0", " ", "Percent"}]}], "]"}], ";", 
    RowBox[{"(*", " ", 
     RowBox[{"//", "gridRules"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{"createNutritionFactsLabel", "[", 
     RowBox[{"\"\<sugar\>\"", ",", 
      RowBox[{"2", " ", "Gram"}], ",", 
      RowBox[{"11", " ", "Calorie"}], ",", 
      RowBox[{"0", " ", "Calorie"}], ",", "\[IndentingNewLine]", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", "\[IndentingNewLine]", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", "\[IndentingNewLine]", 
      RowBox[{"3", " ", "Gram"}], ",", 
      RowBox[{"1.00", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"3", " ", "Gram"}], ",", "\[IndentingNewLine]", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", "Percent"}], ",", "\[IndentingNewLine]", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"7", " ", "Percent"}], ",", 
      RowBox[{"5", " ", "Percent"}]}], "]"}], ";", 
    RowBox[{"(*", " ", 
     RowBox[{"//", "gridRules"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{"createNutritionFactsLabel", "[", 
     RowBox[{"\"\<pasta\>\"", ",", "\[IndentingNewLine]", 
      RowBox[{"128", " ", "Gram"}], ",", 
      RowBox[{"369", " ", "Calorie"}], ",", 
      RowBox[{"25", " ", "Calorie"}], ",", "\[IndentingNewLine]", 
      RowBox[{"3", " ", "Gram"}], ",", 
      RowBox[{"5", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"2", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", "\[IndentingNewLine]", 
      RowBox[{"93", " ", "*", "Milli", "*", " ", "Gram"}], ",", 
      RowBox[{"31", " ", "Percent"}], ",", 
      RowBox[{"33", " ", "Milli", " ", "Gram"}], ",", 
      RowBox[{"1.0", " ", "Percent"}], ",", "\[IndentingNewLine]", 
      RowBox[{"70", " ", "Gram"}], ",", 
      RowBox[{"23", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", "\[IndentingNewLine]", 
      RowBox[{"14", " ", "Gram"}], ",", 
      RowBox[{"0", "Percent"}], ",", "\[IndentingNewLine]", 
      RowBox[{"1.0", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"2", " ", "Percent"}], ",", 
      RowBox[{"24", " ", "Percent"}]}], "]"}], ";", 
    RowBox[{"(*", " ", 
     RowBox[{"//", "gridRules"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{"createNutritionFactsLabel", "[", 
     RowBox[{"\"\<parmesan cheese\>\"", ",", 
      RowBox[{"100", " ", "Gram"}], ",", 
      RowBox[{"431", " ", "Calorie"}], ",", 
      RowBox[{"251", " ", "Calorie"}], ",", 
      RowBox[{"29", "Gram"}], ",", 
      RowBox[{"44", "Percent"}], ",", 
      RowBox[{"17", "Gram"}], ",", 
      RowBox[{"86", "Percent"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", "\[IndentingNewLine]", 
      RowBox[{"88", "Milli", "*", "Gram"}], ",", 
      RowBox[{"29", "Percent"}], ",", 
      RowBox[{"1529", "Milli", " ", "Gram"}], ",", 
      RowBox[{"64", "Percent"}], ",", "\[IndentingNewLine]", 
      RowBox[{"4", " ", "Gram"}], ",", 
      RowBox[{"1.00", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"1", " ", "Gram"}], ",", "\[IndentingNewLine]", 
      RowBox[{"38", " ", "Gram"}], ",", 
      RowBox[{"0", "Percent"}], ",", "\[IndentingNewLine]", 
      RowBox[{"9", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"111", " ", "Percent"}], ",", 
      RowBox[{"5", " ", "Percent"}]}], "]"}], ";", 
    RowBox[{"(*", " ", 
     RowBox[{"//", "gridRules"}], " ", "*)"}], "\n", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{" ", 
         RowBox[{
         "Add", " ", "an", " ", "ingredient", " ", "that", " ", "doesn"}], 
         "\[CloseCurlyQuote]"}], "t", " ", "appear", " ", "in", " ", "the", 
        " ", "recipe", " ", "just", " ", "to", " ", "test", " ", "that", " ", 
        "it"}], "\[CloseCurlyQuote]"}], "s", " ", "ignored", " ", "in", " ", 
      "the", " ", "preparation", " ", "of", " ", "the", " ", "final", " ", 
      RowBox[{"result", ":"}]}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"createNutritionFactsLabel", "[", 
     RowBox[{"\"\<strange extra ingredient\>\"", ",", 
      RowBox[{"100", " ", "Gram"}], ",", 
      RowBox[{"431", " ", "Calorie"}], ",", 
      RowBox[{"251", " ", "Calorie"}], ",", 
      RowBox[{"29", "Gram"}], ",", 
      RowBox[{"44", "Percent"}], ",", 
      RowBox[{"17", "Gram"}], ",", 
      RowBox[{"86", "Percent"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", "\[IndentingNewLine]", 
      RowBox[{"88", "Gram"}], ",", 
      RowBox[{"29", "Percent"}], ",", 
      RowBox[{"1529", "Milli", " ", "Gram"}], ",", 
      RowBox[{"64", "Percent"}], ",", "\[IndentingNewLine]", 
      RowBox[{"4", " ", "Gram"}], ",", 
      RowBox[{"1.00", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Gram"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"1", " ", "Gram"}], ",", "\[IndentingNewLine]", 
      RowBox[{"38", " ", "Gram"}], ",", 
      RowBox[{"0", "Percent"}], ",", "\[IndentingNewLine]", 
      RowBox[{"9", " ", "Percent"}], ",", 
      RowBox[{"0", " ", "Percent"}], ",", 
      RowBox[{"111", " ", "Percent"}], ",", 
      RowBox[{"5", " ", "Percent"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
   ")"}]}]], "Input",
 CellChangeTimes->{{3.5444347314111977`*^9, 3.544434776067752*^9}, {
   3.544434862438692*^9, 3.5444348698791175`*^9}, {3.5444349151697083`*^9, 
   3.544434921688081*^9}, {3.544434974944127*^9, 3.544434994648254*^9}, {
   3.5444351659130497`*^9, 3.544435237330135*^9}, {3.5444479199880114`*^9, 
   3.544447920414054*^9}, {3.544448072911302*^9, 3.5444480732153325`*^9}, {
   3.544451204671461*^9, 3.5444512090397716`*^9}, {3.5444587450291843`*^9, 
   3.544458749108184*^9}, 3.5447311682303643`*^9, {3.5486957906019583`*^9, 
   3.548695804316958*^9}, {3.549898842312054*^9, 3.5498988473865614`*^9}, 
   3.549904269962998*^9, 3.549904353353307*^9, {3.553784977672594*^9, 
   3.553784997449019*^9}, 3.553789187555407*^9, {3.5548431849615602`*^9, 
   3.55484327654356*^9}}],

Cell["\<\
At this point, we have a recipe as a list of ingredients in grams with \
numerical coefficients. We also have a database of NFLs that give all the \
components of the label per service size. \
\>", "Text",
 CellChangeTimes->{{3.553788692011469*^9, 3.553788765516765*^9}, {
  3.5537890207583113`*^9, 3.5537890331969547`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Converting all Densities and Weights into Grams", "Subsection",
 CellChangeTimes->{{3.5538650080530005`*^9, 3.5538650211973143`*^9}}],

Cell["\<\
The next step is to make a rule to canonicalize the units in an NFL, that is, \
to convert anything that should be a weight into Grams. \
\>", "Text",
 CellChangeTimes->{{3.553789280527834*^9, 3.553789381751562*^9}, {
  3.5537894303207827`*^9, 3.553789560238097*^9}, {3.5537895979888763`*^9, 
  3.553789762264189*^9}, {3.553789793628272*^9, 3.553789819051572*^9}, {
  3.553789859493311*^9, 3.5537898743050327`*^9}, {3.5537899288979597`*^9, 
  3.5537901775035353`*^9}, {3.553790378650127*^9, 3.5537903794299*^9}, {
  3.553795408319847*^9, 3.553795455742179*^9}, {3.553796153964326*^9, 
  3.553796645314426*^9}, {3.553796682414055*^9, 3.5537967571667747`*^9}, {
  3.553797140464788*^9, 3.553797146497984*^9}, {3.553797191742551*^9, 
  3.553797210008583*^9}, {3.5537974271543283`*^9, 3.553797433758664*^9}, {
  3.553864936481844*^9, 3.5538649577099667`*^9}, {3.5538649885230474`*^9, 
  3.553864997538949*^9}}],

Cell[TextData[{
 "The following takes an NFL and maps a function over a transform of the NFL. \
The NFL is a list of rules, and the transform will also be a list of rules. \
The transform does a ",
 StyleBox["ReplaceAll", "Code"],
 " with a pattern that matches original rule lines in the NFL and specifies a \
new rule to write out. The pattern will match any rule line in the NFL of the \
form ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", " ", "\[Rule]", " ", 
    RowBox[{"n", " ", "*", " ", "v"}]}], TraditionalForm]]],
 ", where ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]]],
 " is the pattern variable ",
 StyleBox["keyWithVolume_", "Code"],
 ", ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]]],
 " is a numerical amount, and ",
 Cell[BoxData[
  FormBox["v", TraditionalForm]]],
 " is a volume chosen from an explicit list of known volumes. The overall \
rule in the transform will rewrite that matched rule line into one with \
densities transformed into weights per unit volume with a weight unit driven \
by the density fact, as before. Finally, the function mapped over the \
transformed rule lines will map the given weights into Grams. "
}], "Text",
 CellChangeTimes->{{3.553789280527834*^9, 3.553789381751562*^9}, {
  3.5537894303207827`*^9, 3.553789560238097*^9}, {3.5537895979888763`*^9, 
  3.553789762264189*^9}, {3.553789793628272*^9, 3.553789819051572*^9}, {
  3.553789859493311*^9, 3.5537898743050327`*^9}, {3.5537899288979597`*^9, 
  3.5537901775035353`*^9}, {3.553790378650127*^9, 3.5537903794299*^9}, {
  3.553795408319847*^9, 3.553795455742179*^9}, {3.553796153964326*^9, 
  3.553796645314426*^9}, {3.553796682414055*^9, 3.5537967571667747`*^9}, {
  3.553797140464788*^9, 3.553797146497984*^9}, {3.553797191742551*^9, 
  3.553797210008583*^9}, {3.5537974271543283`*^9, 3.553797433758664*^9}, {
  3.553864936481844*^9, 3.5538649577099667`*^9}, {3.5538649885230474`*^9, 
  3.553864997538949*^9}}],

Cell["\<\
As usual, there is a special case for the times that Jacquard erases \
coefficients of 1.0.\
\>", "Text",
 CellChangeTimes->{{3.5548437912315598`*^9, 3.55484381231656*^9}}],

Cell[TextData[{
 "We have emphasized the rule arrows to emphasize the fact that there are \
three uses of rule here: one for the input rule, ",
 Cell[BoxData[
  FormBox["\[Rule]", TraditionalForm]]],
 "; one for the interior (meta-) rule that rewrites the input rule into the \
output rule, written ",
 Cell[BoxData[
  FormBox["\[RuleDelayed]", TraditionalForm]]],
 "; and one for the output rule, another instance of ",
 Cell[BoxData[
  FormBox["\[Rule]", TraditionalForm]]],
 ". The interior rule is a ",
 StyleBox["RuleDelayed", "Code"],
 " -- that's the meaning of the strange colon-arrow. It tells the evaluator \
to delay evaluation of the right-hand side until rule-application time so \
that the density lookup will not be done too early. The normal evaluation \
time for the right-hand sides of Rules is at rule-definition time, and that \
is often fine. In this case, however, it would cause the density lookup to be \
done on an input of ",
 StyleBox["\"name\"/.nfl", "Input"],
 ", which would not reduce. "
}], "Text",
 CellChangeTimes->{{3.553789280527834*^9, 3.553789381751562*^9}, {
   3.5537894303207827`*^9, 3.553789560238097*^9}, {3.5537895979888763`*^9, 
   3.553789762264189*^9}, {3.553789793628272*^9, 3.553789819051572*^9}, {
   3.553789859493311*^9, 3.5537898743050327`*^9}, {3.5537899288979597`*^9, 
   3.5537901775035353`*^9}, {3.553790378650127*^9, 3.5537903794299*^9}, {
   3.553795408319847*^9, 3.553795455742179*^9}, {3.553796153964326*^9, 
   3.553796645314426*^9}, {3.553796682414055*^9, 3.5537967571667747`*^9}, {
   3.553797140464788*^9, 3.553797146497984*^9}, {3.553797191742551*^9, 
   3.553797210008583*^9}, {3.5537974271543283`*^9, 3.553797433758664*^9}, {
   3.553864936481844*^9, 3.5538649577099667`*^9}, 3.5538649885230474`*^9}],

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", "@", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "canonicalizeUnits", "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"canonicalizeUnits", "[", "nfl_", "]"}], ":=", 
     "\[IndentingNewLine]", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"rule", ",", 
         RowBox[{
          RowBox[{
          "rule", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
          "\[Rule]", 
          RowBox[{"FastConvert", "[", 
           RowBox[{
            RowBox[{
            "rule", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
            ",", "Gram"}], "]"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"(", 
        RowBox[{"nfl", "/.", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"keyWithVolume_", 
             StyleBox["\[Rule]",
              FontSize->36,
              Background->RGBColor[0.88, 1, 0.88]], "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"amount_", "?", "NumberQ"}], "*", 
              RowBox[{"volume", ":", 
               RowBox[{"(", 
                RowBox[{
                "Teaspoon", "|", "Tablespoon", "|", "Cup", "|", "FluidOunce", 
                 "|", "Pint", "|", "Gallon"}], ")"}]}]}]}], ")"}], 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           StyleBox["\[RuleDelayed]",
            FontSize->36,
            Background->RGBColor[1, 0.9, 1]], "\[IndentingNewLine]", 
           RowBox[{"keyWithVolume", 
            StyleBox["\[Rule]",
             FontSize->36,
             Background->RGBColor[0.88, 1, 0.88]], 
            RowBox[{
            "amount", "  ", "*", "  ", "volume", "  ", "*", " ", 
             "\[IndentingNewLine]", 
             RowBox[{"gramPerTargetVolumeFromDensity", "[", 
              RowBox[{"volume", ",", 
               RowBox[{"density", "[", 
                RowBox[{"\"\<name\>\"", "/.", "nfl"}], "]"}]}], "]"}]}]}]}], 
          "}"}]}], ")"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "Special", " ", "case", " ", "for", " ", "the", " ", "erased", " ", 
      "amounts"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"canonicalizeUnits", "[", "nfl_", "]"}], ":=", 
     "\[IndentingNewLine]", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"rule", ",", 
         RowBox[{
          RowBox[{
          "rule", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
          "\[Rule]", 
          RowBox[{"FastConvert", "[", 
           RowBox[{
            RowBox[{
            "rule", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
            ",", "Gram"}], "]"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"(", 
        RowBox[{"nfl", "/.", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"keyWithVolume_", 
             StyleBox["\[Rule]",
              FontSize->36,
              Background->RGBColor[0.88, 1, 0.88]], "\[IndentingNewLine]", 
             RowBox[{"volume", ":", 
              RowBox[{"(", 
               RowBox[{
               "Teaspoon", "|", "Tablespoon", "|", "Cup", "|", "FluidOunce", 
                "|", "Pint", "|", "Gallon"}], ")"}]}]}], ")"}], 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           StyleBox["\[RuleDelayed]",
            FontSize->36,
            Background->RGBColor[1, 0.9, 1]], "\[IndentingNewLine]", 
           RowBox[{"keyWithVolume", 
            StyleBox["\[Rule]",
             FontSize->36,
             Background->RGBColor[0.88, 1, 0.88]], 
            RowBox[{"volume", "  ", "*", " ", "\[IndentingNewLine]", 
             RowBox[{"gramPerTargetVolumeFromDensity", "[", 
              RowBox[{"volume", ",", 
               RowBox[{"density", "[", 
                RowBox[{"\"\<name\>\"", "/.", "nfl"}], "]"}]}], "]"}]}]}]}], 
          "}"}]}], ")"}]}], "]"}]}]}], "\[IndentingNewLine]", 
   ")"}]}]], "Input",
 CellChangeTimes->{{3.544457150162998*^9, 3.5444571864986315`*^9}, {
   3.5444573233863187`*^9, 3.544457342993356*^9}, {3.5444573756243563`*^9, 
   3.544457377911356*^9}, {3.5444574350613565`*^9, 3.5444575019383564`*^9}, {
   3.544457679405922*^9, 3.5444577319081717`*^9}, {3.544457770840064*^9, 
   3.5444578335303326`*^9}, {3.544457976954674*^9, 3.544457980249003*^9}, {
   3.544458101200097*^9, 3.5444581114571223`*^9}, {3.5444582079257684`*^9, 
   3.544458217725748*^9}, {3.544458658448184*^9, 3.544458712658184*^9}, {
   3.544459563646378*^9, 3.5444596802851458`*^9}, {3.544459866302432*^9, 
   3.544459866614463*^9}, {3.5444599772985773`*^9, 3.5444600095325584`*^9}, {
   3.544461134278672*^9, 3.544461140877672*^9}, {3.5444613062386723`*^9, 
   3.5444613249566717`*^9}, {3.544463218225037*^9, 3.5444632475817094`*^9}, 
   3.54446330039272*^9, {3.5445320472870703`*^9, 3.5445320662050705`*^9}, {
   3.5445385411024756`*^9, 3.5445385538774757`*^9}, {3.5445420276093974`*^9, 
   3.5445420372883587`*^9}, {3.5445468949253716`*^9, 
   3.5445468966943717`*^9}, {3.544560869612589*^9, 3.5445608953948517`*^9}, {
   3.5447315003733644`*^9, 3.5447315410993643`*^9}, {3.5448846331777754`*^9, 
   3.5448847078945894`*^9}, {3.5448847746509724`*^9, 
   3.5448848210179725`*^9}, {3.544885035206972*^9, 3.544885069670472*^9}, {
   3.546630302160373*^9, 3.546630308049962*^9}, {3.5466331404363403`*^9, 
   3.5466333455182543`*^9}, {3.553789390894649*^9, 3.553789412128549*^9}, {
   3.55484372811556*^9, 3.55484373854956*^9}, {3.55484382673556*^9, 
   3.55484387927556*^9}, {3.5548439571645603`*^9, 3.55484396489856*^9}, {
   3.5548449947978706`*^9, 3.5548450006164527`*^9}, {3.5548450566030507`*^9, 
   3.554845063686759*^9}}],

Cell["\<\
Make new a new list to contain the canonicalized NFLs (notice this does not \
transform the NFLs in the source lookup table / database; we do that in \
another step below, preferring to operate on lists). \
\>", "Text",
 CellChangeTimes->{{3.5537974514603653`*^9, 3.553797510974886*^9}, {
  3.553797589947756*^9, 3.553797644898404*^9}, {3.553797689329752*^9, 
  3.553797718630374*^9}, {3.553798225875944*^9, 3.553798235434214*^9}, {
  3.553798265924383*^9, 3.5537983012805223`*^9}, {3.5548477979241557`*^9, 
  3.5548478056989326`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"jacquardEvalHeldExpression", "@", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"nfls", "[", "\"\<salt\>\"", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"canonicalizeUnits", "@", 
       RowBox[{"nfls", "[", "\"\<salt\>\"", "]"}]}]}], "}"}], 
    "\[IndentingNewLine]", ")"}]}], "//", "gridRules"}]], "Input",
 CellChangeTimes->{{3.5548477176101246`*^9, 3.554847770753439*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         TagBox[GridBox[{
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"name\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"salt\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"serving size\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"Cup"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"total calories\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"0"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"fat calories\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"0"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"total fat\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"0"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"% daily total fat\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"0"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"saturated fat\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"0"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"% daily saturated fat\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"0"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"trans fat\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"0"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"cholesterol\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"0"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"% daily cholesterol\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"0"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"sodium\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              TagBox[GridBox[{
                 {
                  StyleBox[
                   StyleBox[
                    TagBox[GridBox[{
                    {"Times"}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"],
                    StripOnInput->False,
                    FontWeight->Bold],
                   StripOnInput->False,
                   
                   LineColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`],
                   
                   FrontFaceColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`],
                   
                   BackFaceColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`],
                   
                   GraphicsColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`],
                   FontWeight->Bold,
                   
                   FontColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`]], 
                  StyleBox[
                   TagBox[GridBox[{
                    {"113174"}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"],
                   StripOnInput->False,
                   FontWeight->Bold], 
                  StyleBox[
                   TagBox[GridBox[{
                    {"Gram"}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"],
                   StripOnInput->False,
                   FontWeight->Bold], 
                  StyleBox[
                   TagBox[GridBox[{
                    {"Milli"}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"],
                   StripOnInput->False,
                   FontWeight->Bold]}
                },
                AutoDelete->False,
                FrameStyle->GrayLevel[0],
                GridBoxAlignment->{"Columns" -> {{Left}}},
                GridBoxBackground->{"Columns" -> {
                    RGBColor[1, 0.9, 0.8], {
                    RGBColor[0.88, 1, 0.88]}}},
                GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
                
                GridBoxItemSize->{
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
               "Grid"],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"% daily sodium\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              TagBox[GridBox[{
                 {
                  StyleBox[
                   StyleBox[
                    TagBox[GridBox[{
                    {"Times"}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"],
                    StripOnInput->False,
                    FontWeight->Bold],
                   StripOnInput->False,
                   
                   LineColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`],
                   
                   FrontFaceColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`],
                   
                   BackFaceColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`],
                   
                   GraphicsColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`],
                   FontWeight->Bold,
                   
                   FontColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`]], 
                  StyleBox[
                   TagBox[GridBox[{
                    {"4716"}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"],
                   StripOnInput->False,
                   FontWeight->Bold], 
                  StyleBox[
                   TagBox[GridBox[{
                    {"Percent"}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"],
                   StripOnInput->False,
                   FontWeight->Bold]}
                },
                AutoDelete->False,
                FrameStyle->GrayLevel[0],
                GridBoxAlignment->{"Columns" -> {{Left}}},
                GridBoxBackground->{"Columns" -> {
                    RGBColor[1, 0.9, 0.8], {
                    RGBColor[0.88, 1, 0.88]}}},
                GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
                
                GridBoxItemSize->{
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
               "Grid"],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"total carbohydrates\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"0"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"% daily carbohydrates\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"0"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"dietary fiber\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"0"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"%daily dietary fiber\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"0"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"sugars\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"0"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"protein\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"0"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"% daily protein\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"0"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"vitamin A\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"0"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"vitamin C\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"0"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"calcium\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              TagBox[GridBox[{
                 {
                  StyleBox[
                   StyleBox[
                    TagBox[GridBox[{
                    {"Times"}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"],
                    StripOnInput->False,
                    FontWeight->Bold],
                   StripOnInput->False,
                   
                   LineColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`],
                   
                   FrontFaceColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`],
                   
                   BackFaceColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`],
                   
                   GraphicsColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`],
                   FontWeight->Bold,
                   
                   FontColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`]], 
                  StyleBox[
                   TagBox[GridBox[{
                    {"7"}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"],
                   StripOnInput->False,
                   FontWeight->Bold], 
                  StyleBox[
                   TagBox[GridBox[{
                    {"Percent"}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"],
                   StripOnInput->False,
                   FontWeight->Bold]}
                },
                AutoDelete->False,
                FrameStyle->GrayLevel[0],
                GridBoxAlignment->{"Columns" -> {{Left}}},
                GridBoxBackground->{"Columns" -> {
                    RGBColor[1, 0.9, 0.8], {
                    RGBColor[0.88, 1, 0.88]}}},
                GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
                
                GridBoxItemSize->{
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
               "Grid"],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"iron\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              TagBox[GridBox[{
                 {
                  StyleBox[
                   StyleBox[
                    TagBox[GridBox[{
                    {"Times"}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"],
                    StripOnInput->False,
                    FontWeight->Bold],
                   StripOnInput->False,
                   
                   LineColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`],
                   
                   FrontFaceColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`],
                   
                   BackFaceColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`],
                   
                   GraphicsColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`],
                   FontWeight->Bold,
                   
                   FontColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`]], 
                  StyleBox[
                   TagBox[GridBox[{
                    {"5"}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"],
                   StripOnInput->False,
                   FontWeight->Bold], 
                  StyleBox[
                   TagBox[GridBox[{
                    {"Percent"}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"],
                   StripOnInput->False,
                   FontWeight->Bold]}
                },
                AutoDelete->False,
                FrameStyle->GrayLevel[0],
                GridBoxAlignment->{"Columns" -> {{Left}}},
                GridBoxBackground->{"Columns" -> {
                    RGBColor[1, 0.9, 0.8], {
                    RGBColor[0.88, 1, 0.88]}}},
                GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
                
                GridBoxItemSize->{
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
               "Grid"],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]}
           },
           AutoDelete->False,
           FrameStyle->RGBColor[0, 0, 1],
           GridBoxAlignment->{"Columns" -> {{Left}}},
           GridBoxBackground->{"Columns" -> {
               RGBColor[1, 0.9, 0.8], {
                RGBColor[1, 1, 0.85]}}},
           GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"]},
        {
         TagBox[GridBox[{
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"name\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"salt\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"serving size\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              TagBox[GridBox[{
                 {
                  StyleBox[
                   StyleBox[
                    TagBox[GridBox[{
                    {"Times"}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"],
                    StripOnInput->False,
                    FontWeight->Bold],
                   StripOnInput->False,
                   
                   LineColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`],
                   
                   FrontFaceColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`],
                   
                   BackFaceColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`],
                   
                   GraphicsColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`],
                   FontWeight->Bold,
                   
                   FontColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`]], 
                  StyleBox[
                   TagBox[GridBox[{
                    {"273.12`"}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"],
                   StripOnInput->False,
                   FontWeight->Bold], 
                  StyleBox[
                   TagBox[GridBox[{
                    {"Gram"}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"],
                   StripOnInput->False,
                   FontWeight->Bold]}
                },
                AutoDelete->False,
                FrameStyle->GrayLevel[0],
                GridBoxAlignment->{"Columns" -> {{Left}}},
                GridBoxBackground->{"Columns" -> {
                    RGBColor[1, 0.9, 0.8], {
                    RGBColor[0.88, 1, 0.88]}}},
                GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
                
                GridBoxItemSize->{
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
               "Grid"],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"total calories\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"0"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"fat calories\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"0"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"total fat\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"0"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"% daily total fat\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"0"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"saturated fat\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"0"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"% daily saturated fat\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"0"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"trans fat\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"0"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"cholesterol\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"0"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"% daily cholesterol\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"0"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"sodium\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              TagBox[GridBox[{
                 {
                  StyleBox[
                   StyleBox[
                    TagBox[GridBox[{
                    {"Times"}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"],
                    StripOnInput->False,
                    FontWeight->Bold],
                   StripOnInput->False,
                   
                   LineColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`],
                   
                   FrontFaceColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`],
                   BackFaceColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`],
                   
                   GraphicsColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`],
                   FontWeight->Bold,
                   
                   FontColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`]], 
                  StyleBox[
                   TagBox[GridBox[{
                    {"113.174`"}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"],
                   StripOnInput->False,
                   FontWeight->Bold], 
                  StyleBox[
                   TagBox[GridBox[{
                    {"Gram"}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"],
                   StripOnInput->False,
                   FontWeight->Bold]}
                },
                AutoDelete->False,
                FrameStyle->GrayLevel[0],
                GridBoxAlignment->{"Columns" -> {{Left}}},
                GridBoxBackground->{"Columns" -> {
                    RGBColor[1, 0.9, 0.8], {
                    RGBColor[0.88, 1, 0.88]}}},
                GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
                
                GridBoxItemSize->{
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
               "Grid"],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"% daily sodium\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              TagBox[GridBox[{
                 {
                  StyleBox[
                   StyleBox[
                    TagBox[GridBox[{
                    {"Times"}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"],
                    StripOnInput->False,
                    FontWeight->Bold],
                   StripOnInput->False,
                   
                   LineColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`],
                   
                   FrontFaceColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`],
                   
                   BackFaceColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`],
                   
                   GraphicsColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`],
                   FontWeight->Bold,
                   
                   FontColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`]], 
                  StyleBox[
                   TagBox[GridBox[{
                    {"4716"}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"],
                   StripOnInput->False,
                   FontWeight->Bold], 
                  StyleBox[
                   TagBox[GridBox[{
                    {"Percent"}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"],
                   StripOnInput->False,
                   FontWeight->Bold]}
                },
                AutoDelete->False,
                FrameStyle->GrayLevel[0],
                GridBoxAlignment->{"Columns" -> {{Left}}},
                GridBoxBackground->{"Columns" -> {
                    RGBColor[1, 0.9, 0.8], {
                    RGBColor[0.88, 1, 0.88]}}},
                GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
                
                GridBoxItemSize->{
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
               "Grid"],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"total carbohydrates\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"0"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"% daily carbohydrates\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"0"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"dietary fiber\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"0"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"%daily dietary fiber\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"0"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"sugars\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"0"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"protein\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"0"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"% daily protein\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"0"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"vitamin A\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"0"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"vitamin C\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"0"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"calcium\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              TagBox[GridBox[{
                 {
                  StyleBox[
                   StyleBox[
                    TagBox[GridBox[{
                    {"Times"}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"],
                    StripOnInput->False,
                    FontWeight->Bold],
                   StripOnInput->False,
                   
                   LineColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`],
                   
                   FrontFaceColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`],
                   
                   BackFaceColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`],
                   
                   GraphicsColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`],
                   FontWeight->Bold,
                   
                   FontColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`]], 
                  StyleBox[
                   TagBox[GridBox[{
                    {"7"}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"],
                   StripOnInput->False,
                   FontWeight->Bold], 
                  StyleBox[
                   TagBox[GridBox[{
                    {"Percent"}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"],
                   StripOnInput->False,
                   FontWeight->Bold]}
                },
                AutoDelete->False,
                FrameStyle->GrayLevel[0],
                GridBoxAlignment->{"Columns" -> {{Left}}},
                GridBoxBackground->{"Columns" -> {
                    RGBColor[1, 0.9, 0.8], {
                    RGBColor[0.88, 1, 0.88]}}},
                GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
                
                GridBoxItemSize->{
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
               "Grid"],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]},
            {
             StyleBox[
              StyleBox[
               TagBox[GridBox[{
                  {"\<\"iron\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold],
              StripOnInput->False,
              LineColor->GrayLevel[0],
              FrontFaceColor->GrayLevel[0],
              BackFaceColor->GrayLevel[0],
              GraphicsColor->GrayLevel[0],
              FontWeight->Bold,
              FontColor->GrayLevel[0]], 
             StyleBox[
              TagBox[GridBox[{
                 {
                  StyleBox[
                   StyleBox[
                    TagBox[GridBox[{
                    {"Times"}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"],
                    StripOnInput->False,
                    FontWeight->Bold],
                   StripOnInput->False,
                   
                   LineColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`],
                   
                   FrontFaceColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`],
                   
                   BackFaceColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`],
                   
                   GraphicsColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`],
                   FontWeight->Bold,
                   
                   FontColor->RGBColor[
                    0.33333333333333337`, 0, 0.33333333333333337`]], 
                  StyleBox[
                   TagBox[GridBox[{
                    {"5"}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"],
                   StripOnInput->False,
                   FontWeight->Bold], 
                  StyleBox[
                   TagBox[GridBox[{
                    {"Percent"}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"],
                   StripOnInput->False,
                   FontWeight->Bold]}
                },
                AutoDelete->False,
                FrameStyle->GrayLevel[0],
                GridBoxAlignment->{"Columns" -> {{Left}}},
                GridBoxBackground->{"Columns" -> {
                    RGBColor[1, 0.9, 0.8], {
                    RGBColor[0.88, 1, 0.88]}}},
                GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
                
                GridBoxItemSize->{
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
               "Grid"],
              StripOnInput->False,
              LineColor->RGBColor[0, 0, 1],
              FrontFaceColor->RGBColor[0, 0, 1],
              BackFaceColor->RGBColor[0, 0, 1],
              GraphicsColor->RGBColor[0, 0, 1],
              FontWeight->Bold,
              FontColor->RGBColor[0, 0, 1]]}
           },
           AutoDelete->False,
           FrameStyle->RGBColor[0, 0, 1],
           GridBoxAlignment->{"Columns" -> {{Left}}},
           GridBoxBackground->{"Columns" -> {
               RGBColor[1, 0.9, 0.8], {
                RGBColor[1, 1, 0.85]}}},
           GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"]}
       },
       AutoDelete->False,
       FrameStyle->RGBColor[0, 
         Rational[2, 3], 0],
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxBackground->{"Columns" -> {{
            RGBColor[0.88, 1, 0.88]}}},
       GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Grid"]}
   },
   AutoDelete->False,
   FrameStyle->RGBColor[0, 
     Rational[2, 3], 0],
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxBackground->{"Columns" -> {{
        RGBColor[0.88, 1, 0.88]}}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", "@", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"canonicalizedNfls", "=", 
      RowBox[{"Map", "[", "\[IndentingNewLine]", 
       RowBox[{"canonicalizeUnits", ",", "\[IndentingNewLine]", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{"Function", "[", 
           RowBox[{"name", ",", 
            RowBox[{"nfls", "[", "name", "]"}]}], "]"}], ",", "nflNames"}], 
         "]"}]}], "]"}]}], ")"}], ";"}], "\[IndentingNewLine]", 
   ")"}]}]], "Input",
 CellChangeTimes->{{3.5445459966771035`*^9, 3.544546014459882*^9}, {
   3.5445460458620214`*^9, 3.544546048263262*^9}, {3.544546101472582*^9, 
   3.5445461674671807`*^9}, {3.5445462270071344`*^9, 
   3.5445462603524685`*^9}, {3.544549454640689*^9, 3.5445494616163664`*^9}, 
   3.5445605834457245`*^9, 3.5445607747348514`*^9, {3.544731958780018*^9, 
   3.5447319757247124`*^9}, {3.5498994005864253`*^9, 3.549899401693425*^9}, {
   3.553797560768853*^9, 3.553797584367794*^9}, {3.553797649627561*^9, 
   3.553797686595821*^9}, {3.55484389965656*^9, 3.55484390305856*^9}, {
   3.5548472237237415`*^9, 3.5548472303134003`*^9}, {3.554847566666032*^9, 
   3.55484756854622*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Normalizing the Unit NFLs: All Quantities per One Gram\
\>", "Subsection",
 CellChangeTimes->{{3.5538650368458796`*^9, 3.5538650621664114`*^9}, {
  3.554847906314994*^9, 3.554847906728035*^9}}],

Cell[TextData[{
 "Calculate the ",
 StyleBox["norm",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " of each NFL, that is, its serving size in Grams. Introduce two bits of \
space-saving syntax: ",
 StyleBox["&", "Input"],
 " is a unary postfix operator that denotes its argument (on its left) to be \
a pure function with one argument called ",
 StyleBox["#", "Input"],
 "; ",
 StyleBox["/@", "Input"],
 " is a binary infix operator that maps the function in its left-hand \
argument over the list in its right-hand argument:"
}], "Text",
 CellChangeTimes->{{3.553797756076758*^9, 3.5537979636616087`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", "@", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{"norms", "=", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"\"\<serving size\>\"", "/", "Gram"}], "/.", "#"}], "&"}], 
      ")"}], "/@", "canonicalizedNfls"}]}], "\[IndentingNewLine]", 
   ")"}]}]], "Input",
 CellChangeTimes->{{3.5445462804884815`*^9, 3.54454632347478*^9}, {
  3.544546388694301*^9, 3.544546412815713*^9}, {3.5445469233583717`*^9, 
  3.5445469957703714`*^9}, {3.5445470501043715`*^9, 3.5445470582753716`*^9}, {
  3.54454866527376*^9, 3.5445486666088934`*^9}, {3.55484416749156*^9, 
  3.55484417063556*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "216", ",", "124", ",", "273.12`", ",", "82", ",", "160", ",", "186", ",", 
   "101", ",", "6.300000000000001`", ",", "1", ",", "2", ",", "128", ",", 
   "100", ",", "100"}], "}"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "Now a function (pattern and replacement rule) to scale an NFL; with one bit \
of logic to ignore the special ",
 StyleBox["name", "Input"],
 " line in every NFL:"
}], "Text",
 CellChangeTimes->{{3.553797997592153*^9, 3.553798063225881*^9}, {
  3.553798746306313*^9, 3.553798750674226*^9}}],

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", "@", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"scaleNfl", "[", 
     RowBox[{"nfl_", ",", "scalar_"}], "]"}], ":=", "\[IndentingNewLine]", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{"line", ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
           "line", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
           "===", "\"\<name\>\""}], ",", "\[IndentingNewLine]", "line", ",", 
          RowBox[{"(*", " ", 
           RowBox[{"skip", " ", "the", " ", "name", " ", "line"}], " ", 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
           "line", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
           "\[Rule]", 
           RowBox[{
            RowBox[{
            "line", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
            "*", "scalar"}]}]}], "]"}]}], "]"}], ",", "nfl"}], "]"}]}], 
   "\[IndentingNewLine]", ")"}]}]], "Input",
 CellChangeTimes->{{3.5445495750783663`*^9, 3.544549594410366*^9}, {
   3.5445497551543665`*^9, 3.544549814856366*^9}, 3.5445606578671656`*^9, {
   3.5447316141773643`*^9, 3.5447316202313643`*^9}, 3.544885515465208*^9, {
   3.55484424916856*^9, 3.55484425227456*^9}}],

Cell[TextData[{
 "Now normalize the NFLs by applying ",
 StyleBox["scaleNfl ", "Input"],
 "pairwise over the ",
 StyleBox["canonicalizedNfls", "Input"],
 " and the norms. The following uses ",
 StyleBox["MapThread", "Input"],
 ", which is usually known as ",
 StyleBox["Zip", "Input"],
 " in functional programming:"
}], "Text",
 CellChangeTimes->{{3.5537980848154488`*^9, 3.5537981495771627`*^9}}],

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", "@", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"normalizedNfls", "=", 
     RowBox[{"MapThread", "[", "\[IndentingNewLine]", 
      RowBox[{"scaleNfl", ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"canonicalizedNfls", ",", 
         RowBox[{"1", "/", "norms"}]}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", ")"}]}]], "Input",
 CellChangeTimes->{{3.5445470090193715`*^9, 3.5445470310083714`*^9}, 
   3.5445472458223715`*^9, {3.544548622177451*^9, 3.544548688468079*^9}, {
   3.5445490647527037`*^9, 3.5445490791201406`*^9}, {3.544549127905019*^9, 
   3.544549163452573*^9}, {3.544549203140541*^9, 3.5445493420694327`*^9}, {
   3.5445498221613665`*^9, 3.5445498400063667`*^9}, 3.544560601351515*^9, {
   3.5445606648338623`*^9, 3.544560665769956*^9}, 3.544560766887067*^9, {
   3.55484425958256*^9, 3.5548442918705597`*^9}}],

Cell["\<\
Now put the normalized NFLs into a new lookup structure, this time in the \
familiar form of a list of rules that map the name in the NFL to the full NFL:\
\>", "Text",
 CellChangeTimes->{{3.5537983111196003`*^9, 3.553798404857971*^9}}],

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", "@", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"normalizedNflsObj", "=", 
     RowBox[{"Map", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"nfl", ",", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"\"\<name\>\"", "/.", "nfl"}], ")"}], "\[Rule]", "nfl"}]}],
         "]"}], ",", "\[IndentingNewLine]", "normalizedNfls"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", ")"}]}]], "Input",
 CellChangeTimes->{{3.549900161286873*^9, 3.549900255869609*^9}, {
  3.5548443095215597`*^9, 3.55484432564356*^9}}],

Cell["\<\
Now a function (pattern and replacement rule) that will match any ingredient \
line in a recipe, look up its corresponding NFL, and scale the NFL by the \
numerical coefficient of the ingredient:\
\>", "Text",
 CellChangeTimes->{{3.553798486312933*^9, 3.553798559256466*^9}, {
  3.5537987606333103`*^9, 3.553798761776744*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Scaling a Unit NFL from an Ingredient\[CloseCurlyQuote]s Coefficient\
\>", "Subsection",
 CellChangeTimes->{{3.5538650814633408`*^9, 3.553865097407935*^9}}],

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", "@", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "scaledNflFromIngredient", "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"scaledNflFromIngredient", "[", 
      RowBox[{
       RowBox[{"qtty_", "?", "NumberQ"}], " ", "*", " ", "name_String", " ", 
       "*", " ", "Gram"}], "]"}], ":=", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"name", "/.", "normalizedNflsObj"}], ")"}], "===", "name"}], 
       ",", 
       RowBox[{"(*", " ", 
        RowBox[{"ingredient", " ", 
         RowBox[{"wasn", "'"}], "t", " ", "in", " ", "DB"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"(*", " ", 
        RowBox[{
        "SelectMany", " ", "will", " ", "flatten", " ", "this", " ", "out"}], 
        " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"scaleNfl", "[", 
         RowBox[{
          RowBox[{"name", "/.", "normalizedNflsObj"}], ",", "qtty"}], "]"}], 
        "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "special", " ", "case", " ", "for", " ", "the", " ", "erased", " ", 
      "1.0", "s"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"scaledNflFromIngredient", "[", 
      RowBox[{"name_String", " ", "*", " ", "Gram"}], "]"}], ":=", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"name", "/.", "normalizedNflsObj"}], ")"}], "===", "name"}], 
       ",", 
       RowBox[{"(*", " ", 
        RowBox[{"ingredient", " ", 
         RowBox[{"wasn", "'"}], "t", " ", "in", " ", "DB"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"(*", " ", 
        RowBox[{
        "SelectMany", " ", "will", " ", "flatten", " ", "this", " ", "out"}], 
        " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"name", "/.", "normalizedNflsObj"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", ")"}]}]], "Input",
 CellChangeTimes->{{3.5499025989119186`*^9, 3.5499027299006157`*^9}, {
   3.549902918634075*^9, 3.549902918984082*^9}, {3.5499029689105115`*^9, 
   3.5499029819455986`*^9}, {3.5499030138520885`*^9, 3.549903029239545*^9}, {
   3.5499030886573277`*^9, 3.549903198853896*^9}, {3.549903231537269*^9, 
   3.5499032448225975`*^9}, {3.549903369589917*^9, 3.549903448746191*^9}, {
   3.54990348555826*^9, 3.549903549086542*^9}, 3.55379843792797*^9, {
   3.5548443536785603`*^9, 3.55484444378756*^9}}],

Cell[TextData[{
 "Apply this function to the recipe using ",
 StyleBox["SelectMany", "Input"],
 ", which will flatten out any empty NFLs returned from ingredients that are \
not in the database. This is only one option for handling that kind of error, \
but it is expressed concisely."
}], "Text",
 CellChangeTimes->{{3.553798564968198*^9, 3.553798664416408*^9}}],

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", "@", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"scaledNfls", "=", 
      RowBox[{"SelectMany", "[", 
       RowBox[{"recipeInGrams", ",", "scaledNflFromIngredient"}], "]"}]}], 
     ")"}], ";"}], "\[IndentingNewLine]", ")"}]}]], "Input",
 CellChangeTimes->{{3.5499027739030957`*^9, 3.5499027925157547`*^9}, {
  3.5499029920315523`*^9, 3.5499029985016823`*^9}, {3.5499033041578817`*^9, 
  3.5499033052599926`*^9}, {3.549903348188285*^9, 3.54990334873934*^9}, {
  3.549903463695113*^9, 3.5499035025428085`*^9}, {3.5499041573375506`*^9, 
  3.5499041680356207`*^9}, {3.553798678229871*^9, 3.553798692815089*^9}, {
  3.55484444910356*^9, 3.55484445938656*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", "@", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{"Length", "@", "scaledNfls"}], "\[IndentingNewLine]", 
   ")"}]}]], "Input",
 CellChangeTimes->{{3.5499027739030957`*^9, 3.5499027925157547`*^9}, {
  3.5499029920315523`*^9, 3.5499029985016823`*^9}, {3.5499033041578817`*^9, 
  3.5499033052599926`*^9}, {3.549903348188285*^9, 3.54990334873934*^9}, {
  3.549903463695113*^9, 3.5499035025428085`*^9}, {3.5499041573375506`*^9, 
  3.5499041680356207`*^9}, {3.553798678229871*^9, 3.553798692815089*^9}, {
  3.55484444910356*^9, 3.55484445938656*^9}, {3.55484463955256*^9, 
  3.55484464417656*^9}}],

Cell[BoxData["12"], "Output"]
}, Open  ]],

Cell["\<\
Write a function (pattern and replacement rule) that adds any two NFLs \
pointwise, in the manner of vectors, throwing an exception in case of error:\
\>", "Text",
 CellChangeTimes->{{3.553798726605629*^9, 3.553798736763363*^9}, {
  3.553798769856146*^9, 3.553798845743588*^9}, {3.553798946143341*^9, 
  3.553798958030714*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Final Vector Sum Yields the New NFL", "Subsection",
 CellChangeTimes->{{3.5538651050076947`*^9, 3.5538651207452683`*^9}}],

Cell[BoxData[
 RowBox[{"jacquardEvalHeldExpression", "@", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"sumNfls", "[", 
     RowBox[{"nfl1_", ",", "nfl2_"}], "]"}], ":=", "\[IndentingNewLine]", 
    RowBox[{"MapThread", "[", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"line1", ",", "line2"}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
           "line1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "===", 
           RowBox[{
           "line2", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
          ",", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"don", "'"}], "t", " ", "add", " ", "up", " ", 
            "dimensions", " ", "that", " ", 
            RowBox[{"don", "'"}], "t", " ", "match"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
           "line1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
           "\[Rule]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
             "line1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
             "+", 
             RowBox[{
             "line2", "\[LeftDoubleBracket]", "2", 
              "\[RightDoubleBracket]"}]}], ")"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Throw", "[", "\"\<foo\>\"", "]"}]}], "]"}]}], "]"}], ",", 
      "   ", 
      RowBox[{"{", 
       RowBox[{"nfl1", ",", "nfl2"}], "}"}]}], "]"}]}], "\[IndentingNewLine]",
    ")"}]}]], "Input",
 CellChangeTimes->{{3.5445499196553664`*^9, 3.5445499504003663`*^9}, {
  3.544550558212366*^9, 3.5445506481593666`*^9}, {3.544550716653366*^9, 
  3.5445507208903666`*^9}, {3.5445609554798207`*^9, 3.5445609866524663`*^9}, {
  3.544885330920687*^9, 3.5448853344970126`*^9}, {3.5448854940027943`*^9, 
  3.5448855084105587`*^9}, {3.544885734829488*^9, 3.5448857357405787`*^9}, {
  3.554845236500039*^9, 3.5548452546698556`*^9}}],

Cell[TextData[{
 "Finally, ",
 StyleBox["Fold", "Input"],
 " [",
 ButtonBox[Cell[TextData[StyleBox[ButtonBox["21"],
  FontVariations->{"CompatibilityType"->"Superscript"}]], "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"http", ":"}], "//", 
       RowBox[{
         RowBox[{
           RowBox[{
             RowBox[{"en", ".", "wikipedia", ".", "org"}], "/", "wiki"}], "/",
            "Fold_"}], 
         RowBox[{"(", 
           RowBox[{"higher", "-", "order_function"}], ")"}]}]}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00003F1E"],
 "] [",
 ButtonBox[Cell[TextData[StyleBox[ButtonBox["22"],
  FontVariations->{"CompatibilityType"->"Superscript"}]], "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{
         RowBox[{"http", ":"}], "//", 
         RowBox[{
           RowBox[{
             RowBox[{
               RowBox[{"reference", ".", "wolfram", ".", "com"}], "/", 
               "mathematica"}], "/", "ref"}], "/", 
           RowBox[{"Fold", ".", 
             RowBox[{"html", "?", "q"}]}]}]}], "=", 
       RowBox[{
         RowBox[{
           RowBox[{"Fold", "&"}], "lang"}], "=", "en"}]}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00005794"],
 "] this binary function over the scaled NFLs of the recipe; scale the entire \
result by 1/6 to get one serving; drop the name line via ",
 StyleBox["Rest", "Input"],
 " and display:"
}], "Text",
 CellChangeTimes->{{3.553798850502964*^9, 3.553798927904039*^9}, {
  3.553798963637426*^9, 3.553798973516822*^9}, {3.55379905111768*^9, 
  3.5537991101564074`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"jacquardEvalHeldExpression", "@", 
    RowBox[{"(", "\[IndentingNewLine]", 
     RowBox[{"scaleNfl", "[", 
      RowBox[{
       RowBox[{"Fold", "[", "\[IndentingNewLine]", 
        RowBox[{"sumNfls", ",", "\[IndentingNewLine]", 
         RowBox[{"First", "[", "scaledNfls", "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Rest", "[", "scaledNfls", "]"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"1", "/", "6"}]}], "]"}], "\[IndentingNewLine]", ")"}]}], "//",
    "Rest"}], "//", "gridRules"}]], "Input",
 CellChangeTimes->{{3.5445506545893664`*^9, 3.5445506802043667`*^9}, {
  3.544560720068385*^9, 3.5445607313405123`*^9}, {3.544732118830022*^9, 
  3.544732120550194*^9}, {3.5447361818431854`*^9, 3.544736192548798*^9}, {
  3.553798813158079*^9, 3.55379881468583*^9}, {3.554845265792968*^9, 
  3.554845290588447*^9}, {3.554847928820244*^9, 3.5548479366060224`*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"serving size\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"368.0194489071723`"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Gram"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"total calories\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"309.7229878372679`"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Calorie"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"fat calories\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"58.41337534258402`"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Calorie"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"total fat\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"6.5460389264242345`"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Gram"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"% daily total fat\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"9.89979373490786`"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Percent"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"saturated fat\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"1.5959455915184009`"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Gram"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"% daily saturated fat\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"7.535847520933029`"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Percent"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"trans fat\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"0"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"cholesterol\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"0.04442206291666666`"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Gram"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"% daily cholesterol\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"14.79513208333333`"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Percent"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"sodium\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"1.7696471844802562`"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Gram"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"% daily sodium\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"73.60006689462898`"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Percent"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"total carbohydrates\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"53.54333737574277`"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Gram"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"% daily carbohydrates\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"17.710279350862464`"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Percent"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"dietary fiber\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"6.846307991645228`"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Gram"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"%daily dietary fiber\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"25.730112408136726`"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Percent"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"sugars\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"5.852511837215337`"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Gram"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"protein\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"12.09968365913419`"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Gram"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"% daily protein\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"2.7658071341463413`"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Percent"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"vitamin A\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"13.434199712307926`"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Percent"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"vitamin C\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"107.62089744436157`"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Percent"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"calcium\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"11.903098459532979`"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Percent"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]},
        {
         StyleBox[
          StyleBox[
           TagBox[GridBox[{
              {"\<\"iron\"\>"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           StripOnInput->False,
           FontWeight->Bold],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontWeight->Bold,
          FontColor->GrayLevel[0]], 
         StyleBox[
          TagBox[GridBox[{
             {
              StyleBox[
               StyleBox[
                TagBox[GridBox[{
                   {"Times"}
                  },
                  AutoDelete->False,
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 "Grid"],
                StripOnInput->False,
                FontWeight->Bold],
               StripOnInput->False,
               
               LineColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               FrontFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               BackFaceColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               
               GraphicsColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`],
               FontWeight->Bold,
               
               FontColor->RGBColor[
                0.33333333333333337`, 0, 0.33333333333333337`]], 
              StyleBox[
               TagBox[GridBox[{
                  {"19.675213196526133`"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold], 
              StyleBox[
               TagBox[GridBox[{
                  {"Percent"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {{Left}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Grid"],
               StripOnInput->False,
               FontWeight->Bold]}
            },
            AutoDelete->False,
            FrameStyle->GrayLevel[0],
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxBackground->{"Columns" -> {
                RGBColor[1, 0.9, 0.8], {
                 RGBColor[0.88, 1, 0.88]}}},
            GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"],
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontWeight->Bold,
          FontColor->RGBColor[0, 0, 1]]}
       },
       AutoDelete->False,
       FrameStyle->RGBColor[0, 0, 1],
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxBackground->{"Columns" -> {
           RGBColor[1, 0.9, 0.8], {
            RGBColor[1, 1, 0.85]}}},
       GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Grid"]}
   },
   AutoDelete->False,
   FrameStyle->RGBColor[0, 
     Rational[2, 3], 0],
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxBackground->{"Columns" -> {{
        RGBColor[0.88, 1, 0.88]}}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output"]
}, Open  ]],

Cell["\<\
Voil\[AGrave] -- a new, synthetic, NFL generated on the fly from an arbitrary \
recipe.\
\>", "Text",
 CellChangeTimes->{{3.5537991273277683`*^9, 3.5537991370846663`*^9}, {
  3.553799334274791*^9, 3.553799360559143*^9}}],

Cell["\<\
It is important to emphasize again that since the expressions that constitute \
the entire computation are just structured data, it is not necessary to \
download the ingredients database to a client. \
\>", "Text",
 CellChangeTimes->{{3.5538644150947104`*^9, 3.5538644530005007`*^9}, {
  3.553867397686852*^9, 3.5538674184789305`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
SYMBOLIC COMPUTING FOR REASONING\
\>", "Section",
 CellChangeTimes->{{3.5537732220282917`*^9, 3.553773231307466*^9}}],

Cell["\<\
http://www.redditmirror.cc/cache/websites/web.archive.org_84624/web.archive.\
org/web/20040603192757/research.microsoft.com/research/dtg/davidhov/pap.htm\
\>", "Text",
 CellChangeTimes->{3.5540361836854067`*^9}],

Cell["http://secpal.codeplex.com/", "Text",
 CellChangeTimes->{3.554036208809198*^9}],

Cell["\<\
http://rebcabin.wordpress.com/2012/08/22/linq-does-logic/\
\>", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["SUMMARY", "Section",
 CellChangeTimes->{{3.543517871083434*^9, 3.5435178730510406`*^9}}],

Cell[CellGroupData[{

Cell["The Essence of Symbolic Computing", "Subsection",
 CellChangeTimes->{{3.5435172737692947`*^9, 3.5435172794368615`*^9}}],

Cell["\<\
Symbolic computing is a general style, methodology, and technology. Any \
program that manipulates symbols as opposed to just manipulating numbers is a \
symbolic program. Symbolic programs are not exotic: we use them every day. \
Parsers, interpreters, compilers, regular-expression libraries; \
stream-editing programs like Perl, Sed, and Awk, macro processors like m4 and \
t4; templating programs, schema validators, redirectors, routers, all do \
symbolic computing. Even the seemingly arcane: constraint solvers or \
reasoning over dependency chains is actually completely mundane: it\
\[CloseCurlyQuote]s embedded in commercial operating-system kernels and \
network-security layers.\
\>", "Text",
 CellChangeTimes->{{3.543500103962249*^9, 3.543500275707422*^9}, {
   3.543500388520702*^9, 3.543500498901739*^9}, {3.5435005468783016`*^9, 
   3.543500618834302*^9}, {3.543516830002923*^9, 3.5435169060815296`*^9}, {
   3.5435173119811153`*^9, 3.5435173237562933`*^9}, {3.543517372398157*^9, 
   3.5435174185527716`*^9}, {3.5435174902759438`*^9, 3.54351773041481*^9}, {
   3.543517801358382*^9, 3.543517841651322*^9}, {3.5435779376838655`*^9, 
   3.5435779465473723`*^9}, {3.553627923091592*^9, 3.553628014371537*^9}, 
   3.553628061571259*^9, {3.553773240940786*^9, 3.553773333539963*^9}, {
   3.5538651332865224`*^9, 3.5538651445586495`*^9}, {3.553865175333727*^9, 
   3.5538652344886417`*^9}, {3.553867201842225*^9, 3.5538673402539015`*^9}}],

Cell["\<\
Though symbolic programs are not exotic, they are specialized; often they are \
tools as opposed to application-layer solutions. You may use them every day, \
but you might not write them every day. One message here is to encourage you \
to use symbolic methods more often in your own programs. Symbolic computing \
for robust units of measure is a no-brainer. There are many other uses: \
greatly reducing the size and complexity of programs via pattern-matching and \
rules processing; reasoning over knowledge; analysis and optimization of \
queries; dynamic scripting; many more.\
\>", "Text",
 CellChangeTimes->{{3.543500103962249*^9, 3.543500275707422*^9}, {
  3.543500388520702*^9, 3.543500498901739*^9}, {3.5435005468783016`*^9, 
  3.543500618834302*^9}, {3.543516830002923*^9, 3.5435169060815296`*^9}, {
  3.5435173119811153`*^9, 3.5435173237562933`*^9}, {3.543517372398157*^9, 
  3.5435174185527716`*^9}, {3.5435174902759438`*^9, 3.54351773041481*^9}, {
  3.543517801358382*^9, 3.543517841651322*^9}, {3.5435779376838655`*^9, 
  3.5435779465473723`*^9}, {3.553627923091592*^9, 3.553628014371537*^9}, {
  3.553628061571259*^9, 3.553628314556294*^9}, {3.553773358551553*^9, 
  3.553773420343198*^9}, {3.5538652421694098`*^9, 3.5538652429684896`*^9}}],

Cell[TextData[{
 "Term-rewriting is a particular method of symbolic computing. It is almost \
universally used in theorem provers, model checkers, and computer algebra \
systems. It has many properties that make it suitable for more general \
computation. In particular, functional programming, object-oriented \
programming, logic programming, and even ordinary imperative programming are \
easy to embed in term-rewriting. This is a point that Wolfram Research makes \
very explicit in their documentation of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", and one of the reasons why we chose to make Jacquard compatible with a \
subset of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". "
}], "Text",
 CellChangeTimes->{{3.543500103962249*^9, 3.543500275707422*^9}, {
  3.543500388520702*^9, 3.543500498901739*^9}, {3.5435005468783016`*^9, 
  3.543500618834302*^9}, {3.543516830002923*^9, 3.5435169060815296`*^9}, {
  3.5435173119811153`*^9, 3.5435173237562933`*^9}, {3.543517372398157*^9, 
  3.5435174185527716`*^9}, {3.5435174902759438`*^9, 3.54351773041481*^9}, {
  3.543517801358382*^9, 3.543517846948262*^9}, {3.543577971587805*^9, 
  3.5435779727718725`*^9}, {3.553628331474745*^9, 3.5536283674750767`*^9}}],

Cell[TextData[{
 "The essence of symbolic computing is treating expressions as independent, \
standalone objects, available at run time for manipulation and application. \
In ordinary programming languages like C# and JavaScript, the only way to \
manipulate expressions at run time is via ",
 ButtonBox["reflection",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://en.wikipedia.org/wiki/Reflection_(computer_programming)"], 
    None},
  ButtonNote->
   "http://en.wikipedia.org/wiki/Reflection_(computer_programming)"],
 " [",
 ButtonBox[Cell[TextData[StyleBox[ButtonBox["23"],
  FontVariations->{"CompatibilityType"->"Superscript"}]], "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"http", ":"}], "//", 
       RowBox[{
         RowBox[{
           RowBox[{
             RowBox[{"en", ".", "wikipedia", ".", "org"}], "/", "wiki"}], "/",
            "Reflection_"}], 
         RowBox[{"(", "computer_programming", ")"}]}]}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00003C5F"],
 "] or ",
 ButtonBox["metacircular evaluation",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://en.wikipedia.org/wiki/Metacircular_Interpreter"], None},
  ButtonNote->"http://en.wikipedia.org/wiki/Metacircular_Interpreter"],
 " [",
 ButtonBox[Cell[TextData[StyleBox[ButtonBox["24"],
  FontVariations->{"CompatibilityType"->"Superscript"}]], "Citation",
  Editable->False,
  TaggingRules->{NoteData -> RowBox[{
       RowBox[{"http", ":"}], "//", 
       RowBox[{
         RowBox[{
           RowBox[{"en", ".", "wikipedia", ".", "org"}], "/", "wiki"}], "/", 
         "Metacircular_Interpreter"}]}]}],
  BaseStyle->"Hyperlink",
  ButtonData->"00002F30"],
 "]. These techniques make code generation available at run time, but it is \
often so much work that it\[CloseCurlyQuote]s not worth it; your programs \
become miniature compilers or interpreters. Programmers often work around the \
lack by just writing more application code. "
}], "Text",
 CellChangeTimes->{{3.543500103962249*^9, 3.543500275707422*^9}, {
  3.543500388520702*^9, 3.543500498901739*^9}, {3.5435005468783016`*^9, 
  3.543500618834302*^9}, {3.543516830002923*^9, 3.5435169060815296`*^9}, {
  3.5435173119811153`*^9, 3.5435173237562933`*^9}, {3.543517372398157*^9, 
  3.5435174185527716`*^9}, {3.543517479931909*^9, 3.5435174841553316`*^9}, {
  3.5435177522512054`*^9, 3.543517780020651*^9}, {3.543527459638015*^9, 
  3.543527460459015*^9}, {3.543578005845764*^9, 3.5435781550682993`*^9}, {
  3.553773551747957*^9, 3.5537735739561768`*^9}, {3.553773609819214*^9, 
  3.553773611295331*^9}, {3.553783668133897*^9, 3.553783675234722*^9}, {
  3.553783869452057*^9, 3.553783869583436*^9}, {3.553799067073526*^9, 
  3.553799067204713*^9}, {3.553799110192648*^9, 3.5537991103253*^9}}],

Cell[TextData[{
 "Term-rewriting systems like Jacquard take an entirely different approach \
and treat expressions on exactly the same footing as other data. The tools \
for manipulating data transparently manipulate expressions, ",
 StyleBox["i",
  FontSlant->"Italic"],
 ".",
 StyleBox["e",
  FontSlant->"Italic"],
 "., programs. The fundamental unity of code and data is nothing new, it\
\[CloseCurlyQuote]s just not in the daily vocabulary of the ordinary, \
workaday programmer stuck in a world where programs are always compiled in \
isolated sessions and executed in other sessions and environments. The gap \
between analyzing a program and executing a program is unbridgeable. \
Term-rewriting build the bridge."
}], "Text",
 CellChangeTimes->{{3.543500103962249*^9, 3.543500275707422*^9}, {
  3.543500388520702*^9, 3.543500498901739*^9}, {3.5435005468783016`*^9, 
  3.543500618834302*^9}, {3.543516830002923*^9, 3.5435169060815296`*^9}, {
  3.5435173119811153`*^9, 3.5435173237562933`*^9}, {3.543517372398157*^9, 
  3.543517405271444*^9}, {3.553628399865836*^9, 3.553628472048452*^9}, {
  3.553637235149007*^9, 3.5536374334071712`*^9}, {3.553773645489991*^9, 
  3.5537736725613194`*^9}, {3.553773703287594*^9, 3.5537737271360064`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Advantages of Symbolic Computing", "Subsection",
 CellChangeTimes->{{3.5435169256234837`*^9, 3.543516933116233*^9}, 
   3.5435172927381916`*^9}],

Cell[TextData[{
 "Advantage number 1 is in coding applications as transformations of \
expressions. With term-rewriting in particular, ",
 StyleBox["calculating an answer",
  FontSlant->"Italic"],
 " means ",
 StyleBox["rewriting expressions",
  FontSlant->"Italic"],
 ". This separates expressions that represent computations from the \
expressions that represent data objects. That's the same desideratum that \
gives rise to the \[OpenCurlyDoubleQuote]with\[CloseCurlyDoubleQuote] \
statement of JavaScript. However, the ambiguity introduced via \"with\" \
outweighs the advantage of separation of concerns in that case. Jacquard's \
solution is to invert the code: treat expressions as first-class; treat data \
as rewrite rules. This inversion allows developers to manipulate expressions \
and objects-as-rules independently. This technique is illustrated in a very \
concise application for converting arbitrary recipes into Nutrition Fact \
Labels."
}], "Text",
 CellChangeTimes->{{3.5434898488243847`*^9, 3.5434899672155275`*^9}, {
   3.543490222051527*^9, 3.543490309919527*^9}, 3.5434903503475275`*^9, {
   3.5434906679325275`*^9, 3.543490693315527*^9}, {3.5434910583893485`*^9, 
   3.543491062102091*^9}, {3.543491112173103*^9, 3.5434911665989857`*^9}, {
   3.5434939569427156`*^9, 3.5434939855167155`*^9}, {3.5434940221477156`*^9, 
   3.543494107223716*^9}, {3.5434959013257155`*^9, 3.5434960384547157`*^9}, {
   3.5434962841867156`*^9, 3.5434963235607157`*^9}, {3.5434966871561537`*^9, 
   3.5434967259097757`*^9}, {3.5435006326923018`*^9, 
   3.5435006594963017`*^9}, {3.5435007234633017`*^9, 
   3.5435007858973017`*^9}, {3.5435008279798436`*^9, 3.543500830474093*^9}, {
   3.5435169640733285`*^9, 3.5435170296368837`*^9}, {3.543527524089015*^9, 
   3.543527530712015*^9}, {3.5435782147777143`*^9, 3.543578290793062*^9}, {
   3.553628536742715*^9, 3.5536285391750927`*^9}, {3.553637462128427*^9, 
   3.553637663970305*^9}, {3.5537737633832197`*^9, 3.553773770631858*^9}, {
   3.5537738138289347`*^9, 3.553773877205545*^9}, {3.553799813662781*^9, 
   3.553799885982924*^9}}],

Cell["\<\
The sophisticated JavaScript programmer packages expressions in functions and \
gains some independence from data access that way, but Jacquard removes \
unnecessary intermediary functions and gives direct access to expressions. \
That opens up scenarios like partial evaluation not available without \
symbolic computing.\
\>", "Text",
 CellChangeTimes->{{3.5434898488243847`*^9, 3.5434899672155275`*^9}, {
   3.543490222051527*^9, 3.543490309919527*^9}, 3.5434903503475275`*^9, {
   3.5434906679325275`*^9, 3.543490693315527*^9}, {3.5434910583893485`*^9, 
   3.543491062102091*^9}, {3.543491112173103*^9, 3.5434911665989857`*^9}, {
   3.5434939569427156`*^9, 3.5434939855167155`*^9}, {3.5434940221477156`*^9, 
   3.543494107223716*^9}, {3.5434959013257155`*^9, 3.5434962325567155`*^9}, {
   3.5434967767470226`*^9, 3.5434968268560505`*^9}, {3.5434968712814865`*^9, 
   3.5434970803052835`*^9}, 3.5434971556623516`*^9, {3.543527596110015*^9, 
   3.5435276258360147`*^9}, {3.5435784085657983`*^9, 3.543578415645203*^9}}],

Cell["\<\
Advantage number 2 is in symbolic arithmetic, for instance, to track units of \
measure, but also to rearrange expressions for optimality, simplicity, or \
other concerns and remote them for data affinity or privacy. Our sample \
application includes information in grams, milligrams, ounces, calories, and \
percentages. It is much too easy to make a mistake like adding milligrams to \
grams, or multiplying by percentages instead of by fractions. With ordinary \
JavaScript, the developer can only track units of measure mentally while \
writing the code or externally on paper or in comments. A sophisticated \
JavaScript programmer might record units of measure in strings and use string \
matching to detect errors. This is half way to symbolic computing, but \
includes no ability to do arithmetic.\
\>", "Text",
 CellChangeTimes->{{3.5434898488243847`*^9, 3.5434899672155275`*^9}, {
  3.543490222051527*^9, 3.543490309919527*^9}, {3.5434903503475275`*^9, 
  3.543490643197527*^9}, {3.5434911810498753`*^9, 3.543491281889882*^9}, {
  3.5434941236867156`*^9, 3.543494127405716*^9}, {3.54349665986897*^9, 
  3.543496660213073*^9}, {3.5435008365176973`*^9, 3.5435008406671124`*^9}, {
  3.543527640747015*^9, 3.543527678337015*^9}, {3.5435784319841375`*^9, 
  3.5435784764576817`*^9}, {3.553637705945009*^9, 3.553637746056694*^9}, {
  3.553773928716004*^9, 3.553773966882104*^9}}],

Cell["\<\
Jacquard's symbolic arithmetic can perform routine conversions automatically \
and brings mistakes to the surface where they are easy to correct without \
backtracking through external mental or paper processes.\
\>", "Text",
 CellChangeTimes->{{3.5434898488243847`*^9, 3.5434899672155275`*^9}, {
  3.543490222051527*^9, 3.543490309919527*^9}, {3.5434903503475275`*^9, 
  3.543490643197527*^9}, {3.5434911810498753`*^9, 3.5434912535280466`*^9}, {
  3.543496642849866*^9, 3.543496649954996*^9}, {3.5435008675488*^9, 
  3.543500871869232*^9}, {3.5435784931566367`*^9, 3.543578510283616*^9}}],

Cell["\<\
Advantage number 3 is in deep integration with reasoning over knowledge, as \
illustrated in the example of network configuration in an operating system.\
\>", "Text",
 CellChangeTimes->{{3.553799902980401*^9, 3.553799949288302*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"<<", "\"\<Jacquard`\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.543348208721599*^9, 3.5433482150572324`*^9}, {
  3.5537851706052856`*^9, 3.553785177556411*^9}, {3.554838239764855*^9, 
  3.554838240738952*^9}}],

Cell[TextData[{
 "\t",
 StyleBox["1",
  FontVariations->{"CompatibilityType"->"Superscript"}],
 "\t",
 "http",
 ":",
 "//",
 "www",
 ".",
 "wolfram",
 ".",
 "com",
 "/",
 "mathematica",
 "/"
}], "Reference",
 Editable->False,
 TaggingRules->{ReferenceNoteData -> ""},
 CellTags->"00002765"],

Cell[TextData[{
 "\t",
 StyleBox["2",
  FontVariations->{"CompatibilityType"->"Superscript"}],
 "\t",
 "http",
 ":",
 "//",
 "en",
 ".",
 "wikipedia",
 ".",
 "org",
 "/",
 "wiki",
 "/",
 "Integrated_development",
 "_environment"
}], "Reference",
 Editable->False,
 TaggingRules->{ReferenceNoteData -> ""},
 CellTags->"0000381F"],

Cell[TextData[{
 "\t",
 StyleBox["3",
  FontVariations->{"CompatibilityType"->"Superscript"}],
 "\t",
 "http",
 ":",
 "//",
 "physics",
 ".",
 "nist",
 ".",
 "gov",
 "/",
 "Pubs",
 "/",
 "SP811",
 "/",
 "appenB",
 ".",
 "html"
}], "Reference",
 Editable->False,
 TaggingRules->{ReferenceNoteData -> ""},
 CellTags->"00003589"],

Cell[TextData[{
 "\t",
 StyleBox["4",
  FontVariations->{"CompatibilityType"->"Superscript"}],
 "\t",
 "http",
 ":",
 "//",
 "www",
 ".",
 "fda",
 ".",
 "gov",
 "/",
 "Food",
 "/",
 "ResourcesForYou",
 "/",
 "Consumers",
 "/",
 "NFLPM",
 "/",
 "ucm274593",
 ".",
 "htm"
}], "Reference",
 Editable->False,
 TaggingRules->{ReferenceNoteData -> ""},
 CellTags->"000047E5"],

Cell[TextData[{
 "\t",
 StyleBox["5",
  FontVariations->{"CompatibilityType"->"Superscript"}],
 "\t",
 "http",
 ":",
 "//",
 "rewriting",
 ".",
 "loria",
 ".",
 "fr",
 "/"
}], "Reference",
 Editable->False,
 TaggingRules->{ReferenceNoteData -> ""},
 CellTags->"00001EB5"],

Cell[TextData[{
 "\t",
 StyleBox["6",
  FontVariations->{"CompatibilityType"->"Superscript"}],
 "\t",
 "http",
 ":",
 "//",
 "www",
 ".",
 "redditmirror",
 ".",
 "cc",
 "/",
 "cache",
 "/",
 "websites",
 "/",
 "web",
 ".",
 "archive",
 ".",
 "org_",
 "84624",
 "/",
 "web",
 ".",
 "archive",
 ".",
 "org",
 "/",
 "web",
 "/",
 "20040603192757",
 "/",
 "research",
 ".",
 "microsoft",
 ".",
 "com",
 "/",
 "research",
 "/",
 "dtg",
 "/",
 "davidhov",
 "/",
 "pap",
 ".",
 "htm"
}], "Reference",
 Editable->False,
 TaggingRules->{ReferenceNoteData -> ""},
 CellTags->"00009BEE"],

Cell[TextData[{
 "\t",
 StyleBox["7",
  FontVariations->{"CompatibilityType"->"Superscript"}],
 "\t",
 "http",
 ":",
 "//",
 "secpal",
 ".",
 "codeplex",
 ".",
 "com",
 "/"
}], "Reference",
 Editable->False,
 TaggingRules->{ReferenceNoteData -> ""},
 CellTags->"00001EF6"],

Cell[TextData[{
 "\t",
 StyleBox["8",
  FontVariations->{"CompatibilityType"->"Superscript"}],
 "\t",
 "http",
 ":",
 "//",
 "stackoverflow",
 ".",
 "com",
 "/",
 "questions",
 "/",
 "4968406",
 "/",
 "javascript",
 "-",
 "property",
 "-",
 "access",
 "-",
 "dot",
 "-",
 "notation",
 "-",
 "vs",
 "-",
 "brackets"
}], "Reference",
 Editable->False,
 TaggingRules->{ReferenceNoteData -> ""},
 CellTags->"00004D0E"],

Cell[TextData[{
 "\t",
 StyleBox["9",
  FontVariations->{"CompatibilityType"->"Superscript"}],
 "\t",
 "http",
 ":",
 "//",
 "en",
 ".",
 "wikipedia",
 ".",
 "org",
 "/",
 "wiki",
 "/",
 "Don",
 "%27",
 "t_repeat",
 "_yourself"
}], "Reference",
 Editable->False,
 TaggingRules->{ReferenceNoteData -> ""},
 CellTags->"000033FD"],

Cell[TextData[{
 "\t",
 StyleBox["10",
  FontVariations->{"CompatibilityType"->"Superscript"}],
 "\t",
 "http",
 ":",
 "//",
 "c2",
 ".",
 "com",
 "/",
 "cgi",
 "/",
 "wiki",
 "?",
 "DontRepeatYourself"
}], "Reference",
 Editable->False,
 TaggingRules->{ReferenceNoteData -> ""},
 CellTags->"00002E07"],

Cell[TextData[{
 "\t",
 StyleBox["11",
  FontVariations->{"CompatibilityType"->"Superscript"}],
 "\t",
 "http",
 ":",
 "//",
 "en",
 ".",
 "wikipedia",
 ".",
 "org",
 "/",
 "wiki",
 "/",
 "Programming_style",
 "#",
 "Vertical_alignment"
}], "Reference",
 Editable->False,
 TaggingRules->{ReferenceNoteData -> ""},
 CellTags->"00003920"],

Cell[TextData[{
 "\t",
 StyleBox["12",
  FontVariations->{"CompatibilityType"->"Superscript"}],
 "\t",
 "http",
 ":",
 "//",
 "en",
 ".",
 "wikipedia",
 ".",
 "org",
 "/",
 "wiki",
 "/",
 "CamelCase"
}], "Reference",
 Editable->False,
 TaggingRules->{ReferenceNoteData -> ""},
 CellTags->"000028BF"],

Cell[TextData[{
 "\t",
 StyleBox["13",
  FontVariations->{"CompatibilityType"->"Superscript"}],
 "\t",
 "http",
 ":",
 "//",
 "yuiblog",
 ".",
 "com",
 "/",
 "blog",
 "/",
 "2006",
 "/",
 "04",
 "/",
 "11",
 "/",
 "with",
 "-",
 "statement",
 "-",
 "considered",
 "-",
 "harmful",
 "/"
}], "Reference",
 Editable->False,
 TaggingRules->{ReferenceNoteData -> ""},
 CellTags->"00004D81"],

Cell[TextData[{
 "\t",
 StyleBox["14",
  FontVariations->{"CompatibilityType"->"Superscript"}],
 "\t",
 "http",
 ":",
 "//",
 "en",
 ".",
 "wikipedia",
 ".",
 "org",
 "/",
 "wiki",
 "/",
 "Normal_form",
 "_",
 "(",
 "abstract_rewriting",
 ")"
}], "Reference",
 Editable->False,
 TaggingRules->{ReferenceNoteData -> ""},
 CellTags->"00003C7D"],

Cell[TextData[{
 "\t",
 StyleBox["15",
  FontVariations->{"CompatibilityType"->"Superscript"}],
 "\t",
 "http",
 ":",
 "//",
 "en",
 ".",
 "wikipedia",
 ".",
 "org",
 "/",
 "wiki",
 "/",
 "Domain",
 "-",
 "specific_language"
}], "Reference",
 Editable->False,
 TaggingRules->{ReferenceNoteData -> ""},
 CellTags->"00003400"],

Cell[TextData[{
 "\t",
 StyleBox["16",
  FontVariations->{"CompatibilityType"->"Superscript"}],
 "\t",
 "http",
 ":",
 "//",
 "en",
 ".",
 "wikipedia",
 ".",
 "org",
 "/",
 "wiki",
 "/",
 "Mars_Climate",
 "_Orbiter"
}], "Reference",
 Editable->False,
 TaggingRules->{ReferenceNoteData -> ""},
 CellTags->"000031E9"],

Cell[TextData[{
 "\t",
 StyleBox["17",
  FontVariations->{"CompatibilityType"->"Superscript"}],
 "\t",
 "http",
 ":",
 "//",
 "www",
 ".",
 "codinghorror",
 ".",
 "com",
 "/",
 "blog",
 "/",
 "2007",
 "/",
 "05",
 "/",
 "the",
 "-",
 "best",
 "-",
 "code",
 "-",
 "is",
 "-",
 "no",
 "-",
 "code",
 "-",
 "at",
 "-",
 "all",
 ".",
 "html"
}], "Reference",
 Editable->False,
 TaggingRules->{ReferenceNoteData -> ""},
 CellTags->"0000514D"],

Cell[TextData[{
 "\t",
 StyleBox["18",
  FontVariations->{"CompatibilityType"->"Superscript"}],
 "\t",
 "http",
 ":",
 "//",
 "answers",
 ".",
 "yahoo",
 ".",
 "com",
 "/",
 "question",
 "/",
 "index",
 "?",
 "qid",
 "=",
 "20060927203122",
 "AAv1MpR"
}], "Reference",
 Editable->False,
 TaggingRules->{ReferenceNoteData -> ""},
 CellTags->"00003F86"],

Cell[TextData[{
 "\t",
 StyleBox["19",
  FontVariations->{"CompatibilityType"->"Superscript"}],
 "\t",
 "http",
 ":",
 "//",
 "en",
 ".",
 "wikibooks",
 ".",
 "org",
 "/",
 "wiki",
 "/",
 "Haskell",
 "/",
 "Understanding_monads"
}], "Reference",
 Editable->False,
 TaggingRules->{ReferenceNoteData -> ""},
 CellTags->"000035D7"],

Cell[TextData[{
 "\t",
 StyleBox["20",
  FontVariations->{"CompatibilityType"->"Superscript"}],
 "\t",
 "http",
 ":",
 "//",
 "community",
 ".",
 "bartdesmet",
 ".",
 "net",
 "/",
 "blogs",
 "/",
 "bart",
 "/",
 "Default",
 ".",
 "aspx",
 "?",
 "PageIndex",
 "=",
 "2"
}], "Reference",
 Editable->False,
 TaggingRules->{ReferenceNoteData -> ""},
 CellTags->"000048B7"],

Cell[TextData[{
 "\t",
 StyleBox["21",
  FontVariations->{"CompatibilityType"->"Superscript"}],
 "\t",
 "http",
 ":",
 "//",
 "en",
 ".",
 "wikipedia",
 ".",
 "org",
 "/",
 "wiki",
 "/",
 "Fold_",
 "(",
 "higher",
 "-",
 "order_function",
 ")"
}], "Reference",
 Editable->False,
 TaggingRules->{ReferenceNoteData -> ""},
 CellTags->"00003F1E"],

Cell[TextData[{
 "\t",
 StyleBox["22",
  FontVariations->{"CompatibilityType"->"Superscript"}],
 "\t",
 "http",
 ":",
 "//",
 "reference",
 ".",
 "wolfram",
 ".",
 "com",
 "/",
 "mathematica",
 "/",
 "ref",
 "/",
 "Fold",
 ".",
 "html",
 "?",
 "q",
 "=",
 "Fold",
 "&",
 "lang",
 "=",
 "en"
}], "Reference",
 Editable->False,
 TaggingRules->{ReferenceNoteData -> ""},
 CellTags->"00005794"],

Cell[TextData[{
 "\t",
 StyleBox["23",
  FontVariations->{"CompatibilityType"->"Superscript"}],
 "\t",
 "http",
 ":",
 "//",
 "en",
 ".",
 "wikipedia",
 ".",
 "org",
 "/",
 "wiki",
 "/",
 "Reflection_",
 "(",
 "computer_programming",
 ")"
}], "Reference",
 Editable->False,
 TaggingRules->{ReferenceNoteData -> ""},
 CellTags->"00003C5F"],

Cell[TextData[{
 "\t",
 StyleBox["24",
  FontVariations->{"CompatibilityType"->"Superscript"}],
 "\t",
 "http",
 ":",
 "//",
 "en",
 ".",
 "wikipedia",
 ".",
 "org",
 "/",
 "wiki",
 "/",
 "Metacircular_Interpreter"
}], "Reference",
 Editable->False,
 TaggingRules->{ReferenceNoteData -> ""},
 CellTags->"00002F30"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
AutoGeneratedPackage->None,
WindowSize->{942, 990},
WindowMargins->{{Automatic, 0}, {Automatic, 0}},
PrintingCopies->1,
PrintingPageRange->{32000, 32000},
PrintingOptions->{"Magnification"->1.,
"PaperOrientation"->"Portrait",
"PaperSize"->{612, 792}},
Magnification:>FEPrivate`If[
  FEPrivate`Equal[FEPrivate`$VersionNumber, 6.], 1.5, 1.5 Inherited],
FrontEndVersion->"8.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (July 22, \
2012)",
StyleDefinitions->FrontEnd`FileName[{"Creative"}, "NaturalColor.nb", 
  CharacterEncoding -> "UTF-8"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "00002765"->{
  Cell[1256619, 27138, 290, 19, 34, "Reference",
   CellTags->"00002765"]},
 "0000381F"->{
  Cell[1256912, 27159, 328, 21, 34, "Reference",
   CellTags->"0000381F"]},
 "00003589"->{
  Cell[1257243, 27182, 326, 24, 34, "Reference",
   CellTags->"00003589"]},
 "000047E5"->{
  Cell[1257572, 27208, 369, 28, 34, "Reference",
   CellTags->"000047E5"]},
 "00001EB5"->{
  Cell[1257944, 27238, 271, 17, 34, "Reference",
   CellTags->"00001EB5"]},
 "00009BEE"->{
  Cell[1258218, 27257, 576, 53, 64, "Reference",
   CellTags->"00009BEE"]},
 "00001EF6"->{
  Cell[1258797, 27312, 272, 17, 34, "Reference",
   CellTags->"00001EF6"]},
 "00004D0E"->{
  Cell[1259072, 27331, 414, 32, 34, "Reference",
   CellTags->"00004D0E"]},
 "000033FD"->{
  Cell[1259489, 27365, 327, 23, 34, "Reference",
   CellTags->"000033FD"]},
 "00002E07"->{
  Cell[1259819, 27390, 302, 20, 34, "Reference",
   CellTags->"00002E07"]},
 "00003920"->{
  Cell[1260124, 27412, 336, 22, 34, "Reference",
   CellTags->"00003920"]},
 "000028BF"->{
  Cell[1260463, 27436, 299, 20, 34, "Reference",
   CellTags->"000028BF"]},
 "00004D81"->{
  Cell[1260765, 27458, 385, 31, 34, "Reference",
   CellTags->"00004D81"]},
 "00003C7D"->{
  Cell[1261153, 27491, 342, 24, 34, "Reference",
   CellTags->"00003C7D"]},
 "00003400"->{
  Cell[1261498, 27517, 324, 22, 34, "Reference",
   CellTags->"00003400"]},
 "000031E9"->{
  Cell[1261825, 27541, 315, 21, 34, "Reference",
   CellTags->"000031E9"]},
 "0000514D"->{
  Cell[1262143, 27564, 438, 40, 34, "Reference",
   CellTags->"0000514D"]},
 "00003F86"->{
  Cell[1262584, 27606, 351, 25, 34, "Reference",
   CellTags->"00003F86"]},
 "000035D7"->{
  Cell[1262938, 27633, 328, 22, 34, "Reference",
   CellTags->"000035D7"]},
 "000048B7"->{
  Cell[1263269, 27657, 368, 28, 34, "Reference",
   CellTags->"000048B7"]},
 "00003F1E"->{
  Cell[1263640, 27687, 343, 25, 34, "Reference",
   CellTags->"00003F1E"]},
 "00005794"->{
  Cell[1263986, 27714, 390, 32, 34, "Reference",
   CellTags->"00005794"]},
 "00003C5F"->{
  Cell[1264379, 27748, 338, 23, 34, "Reference",
   CellTags->"00003C5F"]},
 "00002F30"->{
  Cell[1264720, 27773, 314, 20, 34, "Reference",
   CellTags->"00002F30"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"00002765", 1265724, 27818},
 {"0000381F", 1265815, 27821},
 {"00003589", 1265906, 27824},
 {"000047E5", 1265997, 27827},
 {"00001EB5", 1266088, 27830},
 {"00009BEE", 1266179, 27833},
 {"00001EF6", 1266270, 27836},
 {"00004D0E", 1266361, 27839},
 {"000033FD", 1266452, 27842},
 {"00002E07", 1266543, 27845},
 {"00003920", 1266634, 27848},
 {"000028BF", 1266725, 27851},
 {"00004D81", 1266816, 27854},
 {"00003C7D", 1266907, 27857},
 {"00003400", 1266998, 27860},
 {"000031E9", 1267089, 27863},
 {"0000514D", 1267180, 27866},
 {"00003F86", 1267271, 27869},
 {"000035D7", 1267362, 27872},
 {"000048B7", 1267453, 27875},
 {"00003F1E", 1267544, 27878},
 {"00005794", 1267635, 27881},
 {"00003C5F", 1267726, 27884},
 {"00002F30", 1267817, 27887}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[1257, 32, 267, 5, 152, "Title"],
Cell[1527, 39, 155, 4, 90, "Title"],
Cell[1685, 45, 248, 6, 54, "Subtitle"],
Cell[CellGroupData[{
Cell[1958, 55, 212, 3, 108, "Section"],
Cell[2173, 60, 4933, 110, 176, "Text"],
Cell[7109, 172, 5470, 110, 255, "Text"],
Cell[12582, 284, 4237, 86, 141, "Text"],
Cell[16822, 372, 1086, 16, 84, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[17945, 393, 210, 3, 108, "Section"],
Cell[18158, 398, 938, 14, 84, "Text"],
Cell[19099, 414, 589, 9, 62, "Text"],
Cell[CellGroupData[{
Cell[19713, 427, 405, 7, 59, "Item"],
Cell[20121, 436, 341, 6, 59, "Item"]
}, Open  ]],
Cell[20477, 445, 595, 10, 62, "Text"],
Cell[21075, 457, 17179, 287, 629, "Text"],
Cell[38257, 746, 568, 9, 62, "Text"],
Cell[38828, 757, 721, 17, 289, "Program"],
Cell[39552, 776, 1869, 43, 119, "Text"],
Cell[41424, 821, 1024, 15, 107, "Text"],
Cell[42451, 838, 923, 14, 62, "Text"],
Cell[43377, 854, 478, 12, 192, "Program"],
Cell[43858, 868, 377, 7, 62, "Text"],
Cell[CellGroupData[{
Cell[44260, 879, 121, 1, 51, "Subsection"],
Cell[44384, 882, 304, 6, 62, "Text"],
Cell[CellGroupData[{
Cell[44713, 892, 122, 1, 36, "Subsubsection"],
Cell[44838, 895, 2898, 71, 176, "Text"],
Cell[47739, 968, 444, 9, 114, "Program"],
Cell[48186, 979, 516, 11, 62, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[48739, 995, 127, 1, 36, "Subsubsection"],
Cell[48869, 998, 402, 7, 62, "Text"],
Cell[49274, 1007, 379, 7, 75, "Program"],
Cell[49656, 1016, 96, 1, 39, "Text"],
Cell[49755, 1019, 328, 6, 75, "Program"],
Cell[50086, 1027, 271, 5, 39, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[50394, 1037, 220, 3, 36, "Subsubsection"],
Cell[50617, 1042, 1568, 32, 74, "Text"],
Cell[52188, 1076, 967, 26, 465, "Program"],
Cell[53158, 1104, 182, 2, 39, "Text"],
Cell[53343, 1108, 1148, 16, 174, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[54528, 1129, 132, 1, 36, "Subsubsection"],
Cell[54663, 1132, 290, 6, 62, "Text"],
Cell[54956, 1140, 286, 7, 133, "Program"],
Cell[55245, 1149, 240, 4, 39, "Text"],
Cell[55488, 1155, 301, 9, 172, "Program"],
Cell[55792, 1166, 109, 1, 39, "Text"],
Cell[55904, 1169, 934, 19, 129, "Text"],
Cell[56841, 1190, 2042, 45, 74, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[58932, 1241, 169, 2, 51, "Subsection"],
Cell[59104, 1245, 885, 13, 107, "Text"],
Cell[59992, 1260, 679, 11, 107, "Text"],
Cell[60674, 1273, 1928, 40, 141, "Text"],
Cell[CellGroupData[{
Cell[62627, 1317, 134, 1, 36, "Subsubsection"],
Cell[62764, 1320, 802, 12, 107, "Text"],
Cell[63569, 1334, 399, 7, 62, "Text"],
Cell[63971, 1343, 3105, 60, 231, "Text"],
Cell[67079, 1405, 942, 17, 84, "Text"],
Cell[68024, 1424, 1085, 18, 107, "Text"],
Cell[69112, 1444, 548, 9, 84, "Text"],
Cell[69663, 1455, 428, 9, 62, "Text"],
Cell[CellGroupData[{
Cell[70116, 1468, 1760, 34, 355, "Input"],
Cell[71879, 1504, 33082, 946, 465, "Output"]
}, Open  ]],
Cell[104976, 2453, 846, 15, 129, "Text"],
Cell[CellGroupData[{
Cell[105847, 2472, 357, 7, 102, "Input"],
Cell[106207, 2481, 113, 2, 55, "Output"]
}, Open  ]],
Cell[106335, 2486, 241, 6, 62, "Text"],
Cell[CellGroupData[{
Cell[106601, 2496, 447, 10, 125, "Input"],
Cell[107051, 2508, 54, 1, 55, "Output"]
}, Open  ]],
Cell[107120, 2512, 1989, 40, 119, "Text"],
Cell[CellGroupData[{
Cell[109134, 2556, 141, 2, 19, "Subitem"],
Cell[109278, 2560, 884, 17, 69, "SubitemParagraph"],
Cell[110165, 2579, 96, 1, 19, "Subitem"]
}, Open  ]],
Cell[110276, 2583, 377, 7, 62, "Text"],
Cell[CellGroupData[{
Cell[110678, 2594, 408, 9, 125, "Input"],
Cell[111089, 2605, 54, 1, 55, "Output"]
}, Open  ]],
Cell[111158, 2609, 892, 17, 129, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[112087, 2631, 137, 1, 36, "Subsubsection"],
Cell[112227, 2634, 121, 1, 39, "Text"],
Cell[CellGroupData[{
Cell[112373, 2639, 304, 6, 102, "Input"],
Cell[112680, 2647, 113, 2, 55, "Output"]
}, Open  ]],
Cell[112808, 2652, 249, 5, 39, "Text"],
Cell[CellGroupData[{
Cell[113082, 2661, 355, 8, 125, "Input"],
Cell[113440, 2671, 54, 1, 55, "Output"]
}, Open  ]],
Cell[113509, 2675, 482, 10, 62, "Text"],
Cell[113994, 2687, 17379, 289, 632, "Text"],
Cell[CellGroupData[{
Cell[131398, 2980, 1674, 33, 355, "Input"],
Cell[133075, 3015, 33074, 945, 465, "Output"]
}, Open  ]],
Cell[166164, 3963, 121, 1, 39, "Text"],
Cell[CellGroupData[{
Cell[166310, 3968, 414, 9, 125, "Input"],
Cell[166727, 3979, 54, 1, 55, "Output"]
}, Open  ]],
Cell[166796, 3983, 2603, 54, 209, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[169436, 4042, 113, 1, 36, "Subsubsection"],
Cell[169552, 4045, 202, 4, 39, "Text"],
Cell[CellGroupData[{
Cell[169779, 4053, 401, 8, 102, "Input"],
Cell[170183, 4063, 113, 2, 55, "Output"]
}, Open  ]],
Cell[170311, 4068, 587, 11, 84, "Text"],
Cell[CellGroupData[{
Cell[170923, 4083, 335, 6, 102, "Input"],
Cell[171261, 4091, 148, 2, 79, "Output"]
}, Open  ]],
Cell[171424, 4096, 215, 3, 39, "Text"],
Cell[CellGroupData[{
Cell[171664, 4103, 381, 7, 102, "Input"],
Cell[172048, 4112, 119, 3, 55, "Output"]
}, Open  ]],
Cell[172182, 4118, 882, 14, 84, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[173113, 4138, 119, 1, 51, "Subsection"],
Cell[173235, 4141, 752, 11, 107, "Text"],
Cell[173990, 4154, 1054, 17, 129, "Text"],
Cell[175047, 4173, 657, 10, 62, "Text"],
Cell[CellGroupData[{
Cell[175729, 4187, 178, 2, 36, "Subsubsection"],
Cell[175910, 4191, 303, 6, 62, "Text"],
Cell[CellGroupData[{
Cell[176238, 4201, 489, 10, 148, "Input"],
Cell[176730, 4213, 142, 4, 55, "Output"]
}, Open  ]],
Cell[176887, 4220, 162, 3, 39, "Text"],
Cell[CellGroupData[{
Cell[177074, 4227, 531, 11, 148, "Input"],
Cell[177608, 4240, 58, 1, 55, "Output"]
}, Open  ]],
Cell[177681, 4244, 118, 1, 39, "Text"],
Cell[177802, 4247, 954, 18, 107, "Text"],
Cell[178759, 4267, 1063, 22, 129, "Text"],
Cell[CellGroupData[{
Cell[179847, 4293, 505, 10, 148, "Input"],
Cell[180355, 4305, 88, 2, 55, "Output"]
}, Open  ]],
Cell[180458, 4310, 399, 11, 62, "Text"],
Cell[CellGroupData[{
Cell[180882, 4325, 532, 11, 148, "Input"],
Cell[181417, 4338, 58, 1, 55, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[181536, 4346, 205, 3, 51, "Subsection"],
Cell[181744, 4351, 437, 7, 84, "Text"],
Cell[182184, 4360, 645, 10, 84, "Text"],
Cell[182832, 4372, 40995, 677, 258, "Text"],
Cell[223830, 5051, 194, 6, 39, "Text"],
Cell[CellGroupData[{
Cell[224049, 5061, 626, 13, 171, "Input"],
Cell[224678, 5076, 193, 5, 55, "Output"]
}, Open  ]],
Cell[224886, 5084, 112, 1, 39, "Text"],
Cell[CellGroupData[{
Cell[225023, 5089, 672, 13, 171, "Input"],
Cell[225698, 5104, 72, 1, 55, "Output"]
}, Open  ]],
Cell[225785, 5108, 561, 9, 84, "Text"],
Cell[226349, 5119, 888, 14, 152, "Text"],
Cell[227240, 5135, 644, 10, 107, "Text"],
Cell[227887, 5147, 195, 2, 39, "Text"],
Cell[228085, 5151, 543993, 8925, 651, 99056, 1629, "CachedBoxData", \
"BoxData", "Text"],
Cell[772081, 14078, 702, 11, 107, "Text"],
Cell[772786, 14091, 691, 13, 84, "Text"],
Cell[CellGroupData[{
Cell[773502, 14108, 731, 18, 171, "Input"],
Cell[774236, 14128, 57, 1, 55, "Output"]
}, Open  ]],
Cell[774308, 14132, 413, 9, 62, "Text"],
Cell[774724, 14143, 1477, 33, 74, "Text"],
Cell[776204, 14178, 1217, 33, 148, "Input"],
Cell[777424, 14213, 102, 1, 39, "Text"],
Cell[CellGroupData[{
Cell[777551, 14218, 727, 17, 148, "Input"],
Cell[778281, 14237, 58, 1, 55, "Output"]
}, Open  ]],
Cell[778354, 14241, 622, 14, 62, "Text"],
Cell[778979, 14257, 600, 11, 62, "Text"],
Cell[779582, 14270, 457, 8, 107, "Text"],
Cell[780042, 14280, 623, 13, 84, "Text"],
Cell[CellGroupData[{
Cell[780690, 14297, 873, 19, 171, "Input"],
Cell[781566, 14318, 131, 3, 55, "Output"]
}, Open  ]],
Cell[781712, 14324, 268, 3, 39, "Text"],
Cell[CellGroupData[{
Cell[782005, 14331, 479, 8, 102, "Input"],
Cell[782487, 14341, 231, 7, 79, "Output"]
}, Open  ]],
Cell[782733, 14351, 238, 5, 39, "Text"],
Cell[782974, 14358, 782, 18, 171, "Input"],
Cell[CellGroupData[{
Cell[783781, 14380, 590, 11, 102, "Input"],
Cell[784374, 14393, 73, 1, 55, "Output"]
}, Open  ]],
Cell[784462, 14397, 310, 6, 39, "Text"],
Cell[784775, 14405, 289, 5, 62, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[785101, 14415, 154, 2, 51, "Subsection"],
Cell[785258, 14419, 320, 6, 62, "Text"],
Cell[CellGroupData[{
Cell[785603, 14429, 1844, 34, 355, "Input"],
Cell[787450, 14465, 33163, 945, 465, "Output"]
}, Open  ]],
Cell[820628, 15413, 119, 1, 39, "Text"],
Cell[CellGroupData[{
Cell[820772, 15418, 500, 10, 125, "Input"],
Cell[821275, 15430, 54, 1, 55, "Output"]
}, Open  ]],
Cell[821344, 15434, 400, 9, 84, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[821781, 15448, 111, 1, 51, "Subsection"],
Cell[821895, 15451, 311, 6, 62, "Text"],
Cell[CellGroupData[{
Cell[822231, 15461, 106, 1, 36, "Subsubsection"],
Cell[822340, 15464, 754, 11, 152, "Text"],
Cell[823097, 15477, 759, 17, 289, "Program"]
}, Open  ]],
Cell[CellGroupData[{
Cell[823893, 15499, 102, 1, 36, "Subsubsection"],
Cell[823998, 15502, 742, 14, 107, "Text"],
Cell[824743, 15518, 342, 6, 55, "Program"],
Cell[825088, 15526, 155, 3, 39, "Text"],
Cell[825246, 15531, 501, 8, 75, "Program"],
Cell[825750, 15541, 132, 1, 39, "Text"],
Cell[825885, 15544, 448, 8, 94, "Program"],
Cell[826336, 15554, 129, 1, 39, "Text"],
Cell[826468, 15557, 102, 1, 55, "Program"],
Cell[826573, 15560, 120, 1, 39, "Text"],
Cell[826696, 15563, 350, 7, 94, "Program"],
Cell[827049, 15572, 102, 1, 39, "Text"],
Cell[827154, 15575, 568, 11, 133, "Program"],
Cell[827725, 15588, 95, 1, 39, "Text"],
Cell[827823, 15591, 108, 1, 55, "Program"],
Cell[827934, 15594, 487, 9, 62, "Text"],
Cell[828424, 15605, 1090, 21, 289, "Program"],
Cell[829517, 15628, 108, 1, 39, "Text"],
Cell[829628, 15631, 293, 5, 75, "Program"],
Cell[829924, 15638, 93, 1, 39, "Text"],
Cell[830020, 15641, 245, 3, 55, "Program"],
Cell[830268, 15646, 166, 2, 39, "Text"],
Cell[830437, 15650, 373, 8, 114, "Program"],
Cell[830813, 15660, 95, 1, 39, "Text"],
Cell[830911, 15663, 114, 1, 55, "Program"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[831086, 15671, 127, 1, 108, "Section"],
Cell[831216, 15674, 1239, 20, 219, "Text"],
Cell[832458, 15696, 597, 9, 84, "Text"],
Cell[CellGroupData[{
Cell[833080, 15709, 128, 1, 51, "Subsection"],
Cell[833211, 15712, 324, 6, 62, "Text"],
Cell[CellGroupData[{
Cell[833560, 15722, 131, 1, 36, "Subsubsection"],
Cell[833694, 15725, 173, 3, 55, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[833904, 15733, 153, 3, 36, "Subsubsection"],
Cell[834060, 15738, 1997, 38, 393, "Code",
 InitializationCell->False],
Cell[836060, 15778, 711, 11, 152, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[836820, 15795, 108, 1, 51, "Subsection"],
Cell[836931, 15798, 231, 4, 62, "Text"],
Cell[837165, 15804, 2678, 55, 232, "Code",
 InitializationCell->False],
Cell[839846, 15861, 638, 10, 129, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[840521, 15876, 152, 2, 51, "Subsection"],
Cell[840676, 15880, 113, 1, 39, "Text"],
Cell[840792, 15883, 2706, 61, 566, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[843535, 15949, 166, 3, 51, "Subsection"],
Cell[843704, 15954, 469, 7, 84, "Text"],
Cell[844176, 15963, 1955, 49, 287, "Text"],
Cell[846134, 16014, 352, 8, 62, "Text"],
Cell[846489, 16024, 3020, 57, 336, "Input"],
Cell[849512, 16083, 212, 4, 39, "Text"],
Cell[CellGroupData[{
Cell[849749, 16091, 265, 5, 102, "Input"],
Cell[850017, 16098, 85, 2, 79, "Output"]
}, Open  ]],
Cell[850117, 16103, 159, 3, 39, "Text"],
Cell[CellGroupData[{
Cell[850301, 16110, 408, 7, 148, "Input"],
Cell[850712, 16119, 101, 2, 82, "Output"]
}, Open  ]],
Cell[850828, 16124, 128, 3, 39, "Text"],
Cell[CellGroupData[{
Cell[850981, 16131, 408, 7, 148, "Input"],
Cell[851392, 16140, 83, 2, 82, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[851524, 16148, 132, 1, 51, "Subsection"],
Cell[851659, 16151, 764, 13, 84, "Text"],
Cell[852426, 16166, 2449, 61, 119, "Text"],
Cell[854878, 16229, 494, 13, 103, "Input"],
Cell[855375, 16244, 3383, 70, 522, "Input"],
Cell[CellGroupData[{
Cell[858783, 16318, 398, 7, 125, "Input"],
Cell[859184, 16327, 148, 3, 55, "Output"]
}, Open  ]],
Cell[859347, 16333, 211, 4, 39, "Text"],
Cell[CellGroupData[{
Cell[859583, 16341, 679, 14, 125, "Input"],
Cell[860265, 16357, 36216, 994, 305, "Output"]
}, Open  ]],
Cell[896496, 17354, 294, 5, 84, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[896827, 17364, 140, 3, 51, "Subsection"],
Cell[896970, 17369, 412, 8, 84, "Text"],
Cell[897385, 17379, 822, 19, 125, "Input"],
Cell[898210, 17400, 2449, 59, 427, "Input"],
Cell[CellGroupData[{
Cell[900684, 17463, 727, 15, 125, "Input"],
Cell[901414, 17480, 8583, 241, 141, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[910046, 17727, 120, 1, 51, "Subsection"],
Cell[910169, 17730, 311, 5, 84, "Text"],
Cell[CellGroupData[{
Cell[910505, 17739, 413, 9, 102, "Input"],
Cell[910921, 17750, 25284, 779, 371, "Output"]
}, Open  ]],
Cell[936220, 18532, 231, 5, 39, "Text"],
Cell[CellGroupData[{
Cell[936476, 18541, 842, 19, 194, "Input"],
Cell[937321, 18562, 25313, 779, 371, "Output"]
}, Open  ]],
Cell[962649, 19344, 370, 6, 84, "Text"],
Cell[CellGroupData[{
Cell[963044, 19354, 582, 12, 80, "Input"],
Cell[963629, 19368, 108, 2, 55, "Output"]
}, Open  ]],
Cell[963752, 19373, 207, 4, 39, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[963996, 19382, 127, 3, 51, "Subsection"],
Cell[964126, 19387, 923, 14, 174, "Text"],
Cell[965052, 19403, 3736, 76, 748, "Code",
 InitializationCell->False],
Cell[968791, 19481, 194, 4, 39, "Text"],
Cell[CellGroupData[{
Cell[969010, 19489, 1617, 34, 194, "Input"],
Cell[970630, 19525, 52129, 1519, 819, "Output"]
}, Open  ]],
Cell[1022774, 21047, 192, 4, 39, "Text"],
Cell[1022969, 21053, 16221, 349, 1827, "Input"],
Cell[1039193, 21404, 334, 6, 62, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1039564, 21415, 139, 1, 51, "Subsection"],
Cell[1039706, 21418, 916, 14, 62, "Text"],
Cell[1040625, 21434, 1926, 39, 219, "Text"],
Cell[1042554, 21475, 182, 4, 39, "Text"],
Cell[1042739, 21481, 1768, 32, 197, "Text"],
Cell[1044510, 21515, 5873, 126, 982, "Input"],
Cell[1050386, 21643, 545, 9, 84, "Text"],
Cell[CellGroupData[{
Cell[1050956, 21656, 459, 10, 125, "Input"],
Cell[1051418, 21668, 94616, 2529, 1473, "Output"]
}, Open  ]],
Cell[1146049, 24200, 1235, 24, 148, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1147321, 24229, 203, 4, 51, "Subsection"],
Cell[1147527, 24235, 608, 16, 107, "Text"],
Cell[CellGroupData[{
Cell[1148160, 24255, 668, 15, 102, "Input"],
Cell[1148831, 24272, 234, 5, 55, "Output"]
}, Open  ]],
Cell[1149080, 24280, 307, 7, 62, "Text"],
Cell[1149390, 24289, 1342, 31, 172, "Input"],
Cell[1150735, 24322, 398, 11, 84, "Text"],
Cell[1151136, 24335, 927, 17, 148, "Input"],
Cell[1152066, 24354, 246, 4, 62, "Text"],
Cell[1152315, 24360, 643, 15, 148, "Input"],
Cell[1152961, 24377, 336, 6, 62, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1153334, 24388, 166, 3, 51, "Subsection"],
Cell[1153503, 24393, 2671, 63, 357, "Input"],
Cell[1156177, 24458, 363, 7, 84, "Text"],
Cell[1156543, 24467, 749, 14, 102, "Input"],
Cell[CellGroupData[{
Cell[1157317, 24485, 650, 11, 102, "Input"],
Cell[1157970, 24498, 29, 0, 55, "Output"]
}, Open  ]],
Cell[1158014, 24501, 337, 6, 62, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1158388, 24512, 127, 1, 51, "Subsection"],
Cell[1158518, 24515, 2066, 49, 218, "Input"],
Cell[1160587, 24566, 1600, 44, 74, "Text"],
Cell[CellGroupData[{
Cell[1162212, 24614, 951, 19, 194, "Input"],
Cell[1163166, 24635, 78165, 2193, 987, "Output"]
}, Open  ]],
Cell[1241346, 26831, 230, 5, 39, "Text"],
Cell[1241579, 26838, 346, 6, 84, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1241974, 26850, 127, 3, 108, "Section"],
Cell[1242104, 26855, 221, 4, 62, "Text"],
Cell[1242328, 26861, 85, 1, 39, "Text"],
Cell[1242416, 26864, 81, 2, 39, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1242534, 26871, 94, 1, 108, "Section"],
Cell[CellGroupData[{
Cell[1242653, 26876, 125, 1, 51, "Subsection"],
Cell[1242781, 26879, 1459, 21, 197, "Text"],
Cell[1244243, 26902, 1268, 18, 174, "Text"],
Cell[1245514, 26922, 1232, 22, 174, "Text"],
Cell[1246749, 26946, 2787, 59, 176, "Text"],
Cell[1249539, 27007, 1245, 22, 174, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1250821, 27034, 150, 2, 51, "Subsection"],
Cell[1250974, 27038, 2088, 34, 219, "Text"],
Cell[1253065, 27074, 1030, 15, 107, "Text"],
Cell[1254098, 27091, 1393, 20, 219, "Text"],
Cell[1255494, 27113, 599, 9, 84, "Text"],
Cell[1256096, 27124, 243, 4, 62, "Text"],
Cell[1256342, 27130, 274, 6, 55, "Input",
 InitializationCell->True],
Cell[1256619, 27138, 290, 19, 34, "Reference",
 CellTags->"00002765"],
Cell[1256912, 27159, 328, 21, 34, "Reference",
 CellTags->"0000381F"],
Cell[1257243, 27182, 326, 24, 34, "Reference",
 CellTags->"00003589"],
Cell[1257572, 27208, 369, 28, 34, "Reference",
 CellTags->"000047E5"],
Cell[1257944, 27238, 271, 17, 34, "Reference",
 CellTags->"00001EB5"],
Cell[1258218, 27257, 576, 53, 64, "Reference",
 CellTags->"00009BEE"],
Cell[1258797, 27312, 272, 17, 34, "Reference",
 CellTags->"00001EF6"],
Cell[1259072, 27331, 414, 32, 34, "Reference",
 CellTags->"00004D0E"],
Cell[1259489, 27365, 327, 23, 34, "Reference",
 CellTags->"000033FD"],
Cell[1259819, 27390, 302, 20, 34, "Reference",
 CellTags->"00002E07"],
Cell[1260124, 27412, 336, 22, 34, "Reference",
 CellTags->"00003920"],
Cell[1260463, 27436, 299, 20, 34, "Reference",
 CellTags->"000028BF"],
Cell[1260765, 27458, 385, 31, 34, "Reference",
 CellTags->"00004D81"],
Cell[1261153, 27491, 342, 24, 34, "Reference",
 CellTags->"00003C7D"],
Cell[1261498, 27517, 324, 22, 34, "Reference",
 CellTags->"00003400"],
Cell[1261825, 27541, 315, 21, 34, "Reference",
 CellTags->"000031E9"],
Cell[1262143, 27564, 438, 40, 34, "Reference",
 CellTags->"0000514D"],
Cell[1262584, 27606, 351, 25, 34, "Reference",
 CellTags->"00003F86"],
Cell[1262938, 27633, 328, 22, 34, "Reference",
 CellTags->"000035D7"],
Cell[1263269, 27657, 368, 28, 34, "Reference",
 CellTags->"000048B7"],
Cell[1263640, 27687, 343, 25, 34, "Reference",
 CellTags->"00003F1E"],
Cell[1263986, 27714, 390, 32, 34, "Reference",
 CellTags->"00005794"],
Cell[1264379, 27748, 338, 23, 34, "Reference",
 CellTags->"00003C5F"],
Cell[1264720, 27773, 314, 20, 34, "Reference",
 CellTags->"00002F30"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)

(* NotebookSignature PvDEVmhiHeVJzAKei63lOLW9 *)
