(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 8.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    526929,      10905]
NotebookOptionsPosition[    500079,      10047]
NotebookOutlinePosition[    504993,      10170]
CellTagsIndexPosition[    504912,      10165]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell["\<\
CALORIE COUNTING
WITH JACQUARD\
\>", "Title",
 CellChangeTimes->{{3.543844478923015*^9, 3.5438445125780153`*^9}, {
  3.5438482529930487`*^9, 3.5438482581605654`*^9}, {3.5442723900044136`*^9, 
  3.5442723935064135`*^9}, {3.544878783085*^9, 3.5448787937239056`*^9}}],

Cell["\<\
Brian Beckman
6 June 2012\
\>", "Subtitle",
 CellChangeTimes->{{3.543844494899015*^9, 3.543844498266015*^9}, {
  3.5442947285144463`*^9, 3.5442947377905183`*^9}}],

Cell["\<\
Essential contributions from
Avi Bar-Zeev, Elad Ben-Israel, Steve Coast, Elad Gerson, 
Yair Gheva, Gur Kimchi, Limor Lahiani, Erik Meijer, 
Kanchan Mitra, Savas Parastiditis
\
\>", "Subsection",
 CellChangeTimes->{{3.5447302868713646`*^9, 3.5447304525913644`*^9}, {
  3.5447305177553644`*^9, 3.544730526811364*^9}}],

Cell[CellGroupData[{

Cell["\<\
Sponsored by IPE Core Platform
Bimal Mehta, James Whittaker, Gurdeep Singh Pall, Qi Lu\
\>", "Subsection",
 CellChangeTimes->{{3.5447304323123646`*^9, 3.5447304910693645`*^9}}],

Cell[BoxData[
 RowBox[{"SetOptions", "[", 
  RowBox[{
   RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
   RowBox[{"PrintPrecision", "\[Rule]", "5"}], ",", 
   RowBox[{"CommonDefaultFormatTypes", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Output\>\"", "\[Rule]", "StandardForm"}], "}"}]}]}], 
  "]"}]], "Input",
 CellOpen->False,
 InitializationCell->True,
 CellChangeTimes->{{3.544213495147287*^9, 3.544213502705287*^9}, {
  3.544213774267314*^9, 3.5442137975566072`*^9}, {3.54421432344739*^9, 
  3.5442143390399494`*^9}, {3.5442145390899525`*^9, 3.544214547506794*^9}, {
  3.5442960294187517`*^9, 3.544296030762886*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["MOTIVATING SAMPLE PROBLEM", "Section",
 CellChangeTimes->{{3.544273178002985*^9, 3.5442731798021646`*^9}, {
  3.544276906578337*^9, 3.544276907737337*^9}, {3.544710118128126*^9, 
  3.544710121255126*^9}}],

Cell["\<\
How would a dev/customer of IPE write apps to manipulate standard \
Nutrition-Facts Labels (NFLs)? \
\>", "Subsection",
 CellChangeTimes->{{3.5442731982350073`*^9, 3.544273252517435*^9}, {
  3.5442733215853415`*^9, 3.5442733221123943`*^9}, {3.54470332026755*^9, 
  3.5447033223321695`*^9}, {3.544703823607271*^9, 3.544703830879998*^9}, {
  3.544728846275977*^9, 3.5447288476201115`*^9}, {3.544878214881276*^9, 
  3.544878215978386*^9}, {3.544878290976885*^9, 3.5448782929940863`*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "Will show things that are ",
 StyleBox["impossible via ordinary programming",
  FontSlant->"Italic"],
 " in JavaScript or C# and easy to do with symbolic expressions in ",
 StyleBox["Jacquard",
  FontSlant->"Italic"]
}], "Subsection",
 CellChangeTimes->{{3.544703835247435*^9, 3.544703857472657*^9}, {
  3.5447066644675407`*^9, 3.544706717133807*^9}, {3.544710829349126*^9, 
  3.5447108341481256`*^9}, {3.544877914827315*^9, 3.544877921857315*^9}, {
  3.544878227336521*^9, 3.5448782349682846`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Row", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1: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
MQBtMa2GOEileillrav8N7WJzObNm/aRZBx4XOfzjW36coHiJIhTfoJbin5N
rp97ld3i7pQn8psVrZ/UnNmU+TV3IAq9W4kAWzZ1uBLu4nDR2w3Iq8eo3XYu
vz4+YrP7TZs37SO9er7H9dk78ez3FZc8nyJUvDndNAvP6zh1P86e2Zj9NS/U
uUI84q6YZn30fwupN+zTRFYm3bzpm/StXbdzIrw80/DB/k3hlk9LFK8ky7/i
tL22+D99pcZG94knr79xTSbBryhoZjM8sq9AJetdojgpv2AuGGGaWso3SXDe
V8SmlmYSRC9up0UbsyZh4t/I6OrVnCnmSn9NZF2W65y7XdN8lqtER6Huz9vj
8mdcHzoulOSyeocXr+rryXTzpnRXprco0BTVfkyHD/dvKrfFy+drsDCi77vv
5RxVzv9RSe4gKkE/RFqLtYTJ3hhksv6OV1FSQSnXCGEfbw6b5lu4wmuC6YUg
28dzFSFIPkq3Eak5E8TP3ULJ10TUJbzOZ652eJVyUR7XFvdq0LI3Eq5VMUn6
XJzblWkJX3rCjcITGlljpSoOyuNFXEVeuOZLiknS2QS9nMlaFBopMtncBQli
ra1PtspRvkmCUW5BAQs79ZxpFsn7mHrKulDF5NdHXs9SXbwwmatNXKVclMep
WDApuZ2EaZrji1Rc1FccZlv4WhWvXz25y4zfEUq7E2EiQTt9NsHlfK4tmu+u
WClksrkLEqQWqjhNKs230IReqOJc7msZqCt9YY+abgio61mp4szVLqm4cIff
C1/FpiGW+gLfrbT863dHtn3e1730wLPh61S83Nt+c5oX3Xtuf8kv99Dk5VRI
MOoJJ7Wgu+jlZHMXMLi2YY86SYrIl7zCXrTzPeqCiqOKEOmkXDi6ldxCZ78m
8tdyDVO42uFVykV5nIqVUnaAWqsrq/ibHN0KeyrBx4XwfiOajG4R/aD57Dga
Qz7IlG4uV7JYb1SCywe+6pNBkrWM8SXKJktfQL+A8ehWkhSZb5Lg/CXY/TeJ
IQI/bKlHTeQe130tSNg0RvWrOZMWMapxcj3zdYlvLjKn+Cployz3Z6EjdWVc
/s6r51IVN8YjfjTBzOfHne7wV8Bp1s740OLS0a2GcL+fuI8extevX5+PLsPP
wWnWSNgcTHBzvISKAfhBLG2xHszDcS94jddHeZThQvJPq8mD7UWZPElvelNJ
yPFDMvqtK3inC1gcurhKys9zJ1zApGI7c0v1/VGrU11bHFb+ms/x5744qPjq
ye7gx6j4RzCNbil97AchFGfVLgH+Kxvi5WQ65cl/VeTNMIwievMA49FHry0u
TKEkhx4LSUWlTIYc16jxbeuNEr//+pyKT2X3mS8tNdS8ZVw6Hin9+PXrfW5i
ziVb/iLImYrJVc5/3f6Lq/zlrb4Z8hGLFUzmi8YpL3dCOrM0uqTlS5SZmEp+
9bs1ksOl5tricTXEBq+Pr+m9d6Thc28Y11ds0XVZaxh2dZKpdO/FKZT0Nckn
RYdMJw5REyaiF8Rxsv7Xli9tdiIlNVXpbRGtV5H1ZvHeZtIhvWTLX0TwlpYK
Rr6E9X9W3t/fo3Nby0DcDGnE/HULihd+EVHKacj0kp65RFH0NLBXzn0ayeM0
K4SQUtbvDbGQncNQmO1Ddcb8c2saUTMYaKT0XDP9sHx5v6GlpLz8w1ebcz5U
s+gXmvzDz65QWk/WqyKjMhCXKbyY5A1cU7X0TinPcYpKkgb2arH8wge/ahVl
IG6GYsTsdUsuApFy/e951SXKf8Hez9s+jRRwVdYeW1VcXUFqzoxXVeqLo36y
wqtBV3f8KGhFy0kt53MP+LMq6UY/+iPNrlBaUsW5btSFKib659dXsfvo0/2C
Whl/5vWw5WbIR8xet6dQcfLV79VIAadZqZVQcrBcpuJCZ2PpJOTuijVi+MV9
7phCae4e81iR3GFpUmnZ6idPFlQcZVco7dK1C3pcYQue5hjfbFSPOttJK3Vj
iv29pCRp4PmzqaZf4wOj/8nmMuT7zzVniIuQpEyqeGuPuqDi6KvfrZE8U49a
yY4z06/mvLtIxV5fcjn/GU1QzJRwjrjMA5x7SLumUIaXPpNUWjYvrC9eqndb
6FEn2RVKa6NsGt3KNBnzUMxHoXUgBogKX0TURUiLPd+ASUlXPfl/klWrvRn2
jm4lFyFOOavi5JJWXSK6PtFXv1sjOaYe9WCXJSqlGGObVPxQNlb1wdyntG1d
kwu4X0Uvz+nmZZ171HbuVkuu8p9NTaG8eWmz/YUfy82VcaVLepcb1ZVT9bI/
wlUegCZxmmWiM23xjjdNJWp+LR/QASw8TAPQJE6zHWfmudg0xPdW8QOAisFP
Y34uVnrot70vXgba0jka4Qjhct4bxjvrPbgmRrxgzU6WK535iif15bMAoCnc
bewWQ6iROhWv7wfXF6vRW+3cK0X/5UPy8ih5y1+Y0lacW5ie8bR7JgsAmsJp
9jB2qQ21Ks6+rPcat2gKBDkXaAnjMU2yidpWIuvopa8XPTnj5+npOpMFAE0x
PRczYY3z7AYRdW+aUhXnZjlWqnjHvEdfxVF0qgGPVVzIAoCmmHrU3DTGBy6Z
UJVeH+EMYXLaYaFHHak4mTvnj0Bl5z0GD9410/OCqXelLABoCqdZK2FmutUH
JqpnYMaDWdlZjqUZfdnRrYp5j4W5hdSZdFJfkgUekEGTuLuYdb+Nipngr+Ke
B8APYupRj7yYky0APwSnWWtGLaXSgzmgYgDaYlLxcJLjCDVUDEBzOM0a/XKh
2LhRE1QMQFss74vN4frVUDEAbeE0q7UUgg3DUD0DEwDwLPgqNm0xVAxAczjN
KiWk5C15fQAAZmYVKyGacuwBAMwsKuaco0cNQItMb5qk5lz6o1sAgLZwKvbf
NAEA2kIIZY9ed1L8xTrzXym5EIyxg5H279+/lTICt3ux6UEJxc0xDNocSnJz
DL3iUrjDWQ2M1iHa/veo7U6MopMjgpmE1aCPHbPTtlXPle7M0WtuAvNOaC4G
kwDjJro53AZSXdf1x8GEZ+MSSmsRNvTD6Xj8+2QeBA6Hg+tFGMwf5p/mpFAd
lwfzX6mZNEUYN2g2iZiISg8mbxtCClNlpqT7A3VH3X9A3VWv3SYRJsrpZHd7
UUr8+9//NsmeTv828YfhNNZMjIaZyhxaCW3Vb4qup0MpW3QuzKGEdOGtU+5o
k2uqY4ptD2Gdvvqj7AduDlPeQffm06PSJ/NHx1x0UzYTyxTARTe4ktuLY3ey
4O6/y3nzhzs5TglXJmsumSvw+IWaQtuyum/TVNacMRfKOuqj7qj7j6j7/wdW
fJ6i
        "], {{0, 405}, {322, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      BaseStyle->"ImageGraphics",
      ImageSize->Automatic,
      ImageSizeRaw->{322, 405},
      PlotRange->{{0, 322}, {0, 405}}], ",", 
     RowBox[{"Column", "[", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
        "Text", "[", "\"\<\[FilledSmallCircle] Problems with NFLs:\>\"", 
         "]"}], ",", 
        RowBox[{"Text", "[", "\"\<\>\"", "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{
        "Text", "[", 
         "\"\<\[FilledSmallCircle] Lots of confusing information in a \
confusing layout\>\"", "]"}], ",", 
        RowBox[{"Text", "[", "\"\<\>\"", "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{
        "Text", "[", 
         "\"\<\[FilledSmallCircle] Many units: ounces, percents, calories, \
grams, milligrams\>\"", "]"}], ",", 
        RowBox[{"Text", "[", "\"\<\>\"", "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{
        "Text", "[", 
         "\"\<\[FilledSmallCircle] Users want calories from fat separately \
from calories from carbs\>\"", "]"}], ",", 
        RowBox[{"Text", "[", "\"\<\>\"", "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{
        "Text", "[", 
         "\"\<\[FilledSmallCircle] Check for accuracy: Does serving size and \
total calories match sum of components? If not, why not? Liability \
exposure?\>\"", "]"}]}], "}"}], "]"}]}], "}"}], ",", "\"\<  \>\""}], 
  "]"}]], "Input",
 CellOpen->False,
 CellChangeTimes->{{3.5442744258823605`*^9, 3.5442746000267735`*^9}, {
  3.5442746597347436`*^9, 3.544274677728543*^9}, {3.5442749069384613`*^9, 
  3.5442749168364515`*^9}, {3.544275344083494*^9, 3.544275372278674*^9}, {
  3.544275437236337*^9, 3.544275466755337*^9}, {3.5447067901471076`*^9, 
  3.5447068017492676`*^9}, {3.5447068445695496`*^9, 3.5447068663437266`*^9}, {
  3.544877947170315*^9, 3.544877964307315*^9}, {3.544878813933634*^9, 
  3.5448788345283527`*^9}, {3.5448788881630015`*^9, 3.544878948436271*^9}, {
  3.544882941745515*^9, 3.544882943389515*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[
    TagBox[
     RasterBox[CompressedData["
1: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
Qf2kShnFs4jJiiznvJLM/4pfr0Q3ZHwbU1lU3b0u507LTtoxavN0XKVishcQ
TOTwplDSL4vD2RvpxIk1i9xMijDEj/BVVjrPBNyXu98zvnqIDayTjIiZDEuU
sD+dq0VaAOIHhirqxrvXlUWeBtMWuwGu/Sr+TH4LP85O3PLCeEyTIYOf2VIh
bOzsFwoVPwZ3v2fSyQyf1H2Sn/MQp3O2FlH1iR515rpcoGLOJWN7etRr1uSS
h8pvpPgVZ57/iV/eKW30qB+Nu98zt1Nxrha52gclv1qPmvXK9KiNis1RpeJ4
pGL821/iU7ugyQ+zdnfcLDD/8lI1oX+w5j8xuvVo3PueIVVZyGiTislaRGHo
oT3yx2jP6JZ5LuZabVHxJzXVYRkcf3t7CX7W4p5O+o346YXjd8STBFX9eIzC
L87ZqwC+iLveMxlVZjPa0KNOapFOHvbLln3TFLZG1Xfv0har46CE3Ob1AQB4
AJxmTUMsevuiSW/x+gAAPAJOs0JJc0DFALSI0+y4TZOAigFoEafZo9KaCzwX
A9AiTrMn3UPFADSK0+yge8H4OI26SsX33pMZgOeiRsVSqwPr6p+L710nAJ6L
GhV3Uvx++Nn3feVqiHvXCYDnorIt7o92gbHWVS4B964TAM9FjYrty2IrYgtG
twBoC1/FagQqBqAtlh616rV1soWKAWiNae5Wb/3kjYorn4sBAI+D06zpTovR
6wPPxQA0x9KjZtath6MtBqA5ltEtO+tD20djqBiAtpjmUQ9/KqHr3xcDcBtS
y5a8c7VnnvESRaJx4X2XkCpDtnlbwMBkpxh7Q+IF6g3jpraYacmV2+cFKgZ3
w7PjyvlXRaFjaqWzRWiRaEuOjtsTp5lNb19fazx7FhVr2Z9Op+PxCBWDuxGp
+ExrFKqL/NdLei5uiwPJOfVkbLUW23tfxOWMPtZNZQI3at/TOiNTF6TKNG5S
MTe96aNR8TAMUDG4H0GP+pwVc9RGelp7XzdO8cSQ6VEnf5KWlKQYz2ZEq9iL
lWu2nfllZafaXbLuIJXqpZS1rvIA3Jr3eV/7oJmLQmRUHHxOyTX4e2mAcyL+
XNVI7u+Qz4hUMfEkcNkztEuDi95uQI4xavAoTK1Q8qDsQ/ehPemvOiqquL5/
6x5Ug13+yhl5ok9UfD2HZVdw3f8SUm/YpwmAWxIYTp9TcdqoeRL12878GLUn
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
CZuDCW6Op1AxAN+IpS3Wg3k47gWv8foojzJcSP5pNXmwvSiTB+lNbyoJOX5I
Rr91Bb/oAhaHLq6S8uPcCRcwqdjO3FJ9f9TqVNcWh5W/5nP8uS8OKr56sjv4
Nir+FkyjW0of+0EIxVm1S4D/yoZ4OZlOefJfFXkzDKOI3jzAePTRa4sLUyjJ
ocdCUlEpkyHHNWp823qjxK8/3qfiU9m950tLDTVvGZeOR0rffvx4nZuYc8mW
vwhypmJylfNft//iKn95q2+GfMRiBZP5onHKy52QziyNLmn5EmUmppJf/W6N
5HCpubZ4XA2xwevjY3rvHWn43BvG9RVbdF3WGoZdnWQq3WtxCiV9TfJJ0SHT
iUPUhInoBXGcrP+15UubnUhJTVV6WUTrVWS9Wby3mXRIL9nyFxG8paWCkS9h
/Z+V19fX6NzWMhA3Qxoxf92C4oVfRJRyGjK9pGcuURQ9DeyVc59G8jjNCiGk
lPV7Qyxk5zAUZvtQnTH/3JpG1AwGGik910w/LB/eb2gpKS//8NXmnA/VLPqF
Jv/wsyuU1pP1qsioDMRlCi8meQPXVC29U8pznKKSpIG9Wiy/8MGvWkUZiJuh
GDF73ZKLQKRc/3tedYnyX7D387ZPIwVclbXHVhVXV5CaM+NVlfriqJ+s8GrQ
1R0/ClrRclLL+dwD/qxKutGP/kizK5SWVHGuG3Whion++fVV7D56d7+gVsbv
eT1suRnyEbPX7SFUnHz1ezVSwGlWaiWUHCyXqbjQ2Vg6Cbm7Yo0YfnHvO6ZQ
mrvHPFYkd1iaVFq2+smTBRVH2RVKu3Ttgh5X2IKnOcY3G9WjznbSSt2YYn8v
KUkaeP5squnH+MDof7K5DPn+c80Z4iIkKZMq3tqjLqg4+up3ayTP1KNWsuPM
9Ks57y5SsdeXXM6/RxMUMyWcIy7zAOce0q4plOGlzySVls0L64uX6t0WetRJ
doXS2iibRrcyTcY8FPNWaB2IAaLCFxF1EdJizzdgUtJVT/6fZNVqb4a9o1vJ
RYhTzqo4uaRVl4iuT/TV79ZIjqlHPdhliUopxtgmFd+VjVW9M19T2rauyQV8
XUUvz+nmZZ171HbuVkuu8u9NTaG8eWmz/YVvy82VcaVL+iU3qiun6mV/hKs8
AE3iNMtEZ9riHW+aStT8Wt6hA1h4mAagSZxmO87Mc7FpiL9axXcAKgbfjfm5
WOmh3/a+eBloS+dohCOEy3lvGO+s9+CaGPGCNTtZrnTmI57Ul88CgKZwt7Fb
DKFG6lS8vh9cX6xGb7VzrxT9lw/Jy6PkLX9hSltxbmF6xtPumSwAaAqn2cPY
pTbUqjj7st5r3KIpEORcoCWMxzTJJmpbiayjl75e9OSMn6en60wWADTF9FzM
hDXOsxtE1L1pSlWcm+VYqeId8x59FUfRqQY8VnEhCwCaYupRc9MYH7hkQlV6
fYQzhMlph4UedaTiZO6cPwKVnfcYPHjXTM8Lpt6VsgCgKZxmrYSZ6VYfmKie
gRkPZmVnOZZm9GVHtyrmPRbmFlJn0kl9SRZ4QAZN4u5i1v00KmaCP4t7HgDf
iKlHPfJkTrYAfBOcZq0ZtZRKD+aAigFoi0nFw0mOI9RQMQDN4TRr9MuFYuNG
TVAxAG2xvC82h+tXQ8UAtIXTrNZSCDYMQ/UMTADAo+Cr2LTFUDEAzeE0q5SQ
krfk9QEAmJlVrIRoyrEHADCzqJhzjh41AC0yvWmSmnPpj24BANrCqdh/0wQA
aAshlD163UnxB+vMf6XkQjDGDkbaP3/+VMoI3O7FpgclFDfHMGhzKMnNMfSK
S+EOZzUwWodo+9+jtjsxik6OCGYSVoM+dsxO21Y9V7ozR6+5Ccw7obkYTAKM
m+jmcBtIdV3XHwcTno1LKK1F2NAPp+Px18k8CBwOB9eLMJg/zD/NSaE6Lg/m
v1IzaYowbtBsEjERlR5M3jaEFKbKTEn3B+qOun+Duqteu00iTJTTye72opT4
29/+ZpI9nf5m4g/DaayZGA0zlTm0Etqq3xRdT4dStuhcmEMJ6cJbp9zRJtdU
xxTbHsI6ffVH2Q/cHKa8g+7Np0elT+aPjrnopmwmlimAi25wJbcXx+5kwd1/
l/PmD3dynBKuTNZcMlfg8Qs1hbZldd+mqaw5Yy6UddRH3VH3b1H3/w/0maSZ

      "], {{0, 405}, {322, 0}}, {0, 255}, ColorFunction -> RGBColor], 
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True], 
     Selectable -> False], BaseStyle -> "ImageGraphics", 
    ImageSize -> {333.5, Automatic}, ImageSizeRaw -> {322, 405}, 
    PlotRange -> {{0, 322}, {0, 405}}],TagBox[
    GridBox[{{
       InterpretationBox[
        Cell[
         BoxData["\"\[FilledSmallCircle] Problems with NFLs:\""], "Text", 
         "TR"], 
        Text["\[FilledSmallCircle] Problems with NFLs:"]]}, {
       InterpretationBox[
        Cell[
         BoxData["\"\""], "Text", "TR"], 
        Text[""]]}, {
       InterpretationBox[
        Cell[
         BoxData[
         "\"\[FilledSmallCircle] There is a lot of confusing information in a \
confusing layout\""], "Text", "TR"], 
        Text[
        "\[FilledSmallCircle] There is a lot of confusing information in a \
confusing layout"]]}, {
       InterpretationBox[
        Cell[
         BoxData["\"\""], "Text", "TR"], 
        Text[""]]}, {
       InterpretationBox[
        Cell[
         BoxData[
         "\"\[FilledSmallCircle] Many units: ounces, percents, calories, \
grams, milligrams\""], "Text", "TR"], 
        Text[
        "\[FilledSmallCircle] Many units: ounces, percents, calories, grams, \
milligrams"]]}, {
       InterpretationBox[
        Cell[
         BoxData["\"\""], "Text", "TR"], 
        Text[""]]}, {
       InterpretationBox[
        Cell[
         BoxData[
         "\"\[FilledSmallCircle] Users want calories from fat separately from \
calories from carbs\""], "Text", "TR"], 
        Text[
        "\[FilledSmallCircle] Users want calories from fat separately from \
calories from carbs"]]}, {
       InterpretationBox[
        Cell[
         BoxData["\"\""], "Text", "TR"], 
        Text[""]]}, {
       InterpretationBox[
        Cell[
         BoxData[
         "\"\[FilledSmallCircle] Check for accuracy: Does serving size and \
total calories match sum of components? If not, why not? Liability \
exposure?\""], "Text", "TR"], 
        Text[
        "\[FilledSmallCircle] Check for accuracy: Does serving size and total \
calories match sum of components? If not, why not? Liability exposure?"]]}}, 
     GridBoxAlignment -> {"Columns" -> {{Left}}}, 
     GridBoxItemSize -> {
      "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]},
  "Row",
  DisplayFunction->(RowBox[{#, "  ", #2}]& ),
  InterpretationFunction->(RowBox[{"Row", "[", 
     RowBox[{
       RowBox[{"{", 
         RowBox[{#, ",", #2}], "}"}], ",", "\"  \""}], "]"}]& )]], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.544706939999091*^9, 3.54470768239193*^9, 3.5447295794423676`*^9, 
   3.5447318835644975`*^9, 3.544732067875927*^9, 3.5447351901904664`*^9, {
   3.5447518930748167`*^9, 3.5447518967830286`*^9}, 3.5448779750063148`*^9, {
   3.5448783107008567`*^9, 3.5448783389185534`*^9}, 3.5448788359364853`*^9, 
   3.544878950436429*^9, {3.5448829293785152`*^9, 3.5448829293785152`*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["\<\
BUT FIRST: DO WE REALLY NEED COMPUTATIONS?\
\>", "Section",
 CellChangeTimes->{{3.544753289788704*^9, 3.5447532958040485`*^9}, {
  3.5448789775178204`*^9, 3.544878981501176*^9}}],

Cell[CellGroupData[{

Cell["\<\
They\[CloseCurlyQuote]re already there: most searches involve computations\
\>", "Subsection",
 CellChangeTimes->{{3.544753299021232*^9, 3.5447533081787558`*^9}, {
  3.5447535363658075`*^9, 3.544753541269088*^9}, {3.544878990878021*^9, 
  3.5448789917691083`*^9}, {3.544882963201515*^9, 3.544882969448515*^9}}],

Cell[CellGroupData[{

Cell["Route plans, Travel proposals", "Item",
 CellChangeTimes->{{3.5447533106208954`*^9, 3.544753333372197*^9}}],

Cell["Event-sequence schedules", "Item",
 CellChangeTimes->{{3.5447533155171757`*^9, 3.544753319459401*^9}, {
  3.5448790043262296`*^9, 3.5448790053423295`*^9}}],

Cell["Price quotes, loan proposals", "Item",
 CellChangeTimes->{{3.544753337564437*^9, 3.544753355684473*^9}, {
  3.5447535496365666`*^9, 3.544753549648567*^9}, {3.544879008758629*^9, 
  3.5448790122299423`*^9}, {3.544879674633357*^9, 3.5448796758893576`*^9}, {
  3.5448829801285152`*^9, 3.544882980868515*^9}}],

Cell["\<\
Trading, portfolio optimization, risk analysis\
\>", "Item",
 CellChangeTimes->{{3.5447535527327433`*^9, 3.5447535921559987`*^9}, {
  3.5448790193185806`*^9, 3.544879019321581*^9}, {3.544879186160904*^9, 
  3.5448792045676775`*^9}, {3.544882985320015*^9, 3.544882991127015*^9}}],

Cell["\<\
Even calorie counting (it\[CloseCurlyQuote]s big business)\
\>", "Item",
 CellChangeTimes->{{3.544879020318679*^9, 3.5448790279673586`*^9}, {
  3.544882999087015*^9, 3.544883003180015*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Our approach makes computations more robust, powerful, distributed, reusable\
\>", "Subsection",
 CellChangeTimes->{{3.5447536050607367`*^9, 3.5447536273400106`*^9}, {
  3.5448790831029053`*^9, 3.5448790864548707`*^9}}],

Cell[CellGroupData[{

Cell["\<\
Robustness, safety, reach from symbolic computation\
\>", "Item",
 CellChangeTimes->{{3.5447536352364626`*^9, 3.544753642266865*^9}, {
  3.544879058576171*^9, 3.5448790606391363`*^9}, {3.5448790929948096`*^9, 
  3.54487910641368*^9}, {3.5448795577266097`*^9, 3.5448795577296095`*^9}}],

Cell["\<\
e.g., 1999: $2B Mars Climate Observer crashed due to units mistake; Jacquard \
can prevent\
\>", "Subitem",
 CellChangeTimes->{{3.5448795596076*^9, 3.5448796350844*^9}, {
  3.5448826136477013`*^9, 3.544882620534689*^9}, {3.544882776496015*^9, 
  3.544882789624015*^9}}],

Cell["\<\
Power means bang-for-the-buck: more computation for less code\
\>", "Item",
 CellChangeTimes->{{3.5447536430129075`*^9, 3.544753684100258*^9}, {
  3.5448790683640633`*^9, 3.5448790698880424`*^9}}],

Cell["\<\
Distributed processing and reuse from treating expressions themselves as \
Merino Entities \
\>", "Item",
 CellChangeTimes->{{3.5447536904366198`*^9, 3.544753706052513*^9}, {
  3.544753738189351*^9, 3.5447537416365485`*^9}, {3.544879135675381*^9, 
  3.544879152410236*^9}, {3.5448796990333576`*^9, 3.5448797061293573`*^9}, {
  3.544882664397629*^9, 3.544882667876623*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Wolfram Alpha blazed the trail", "Subsection",
 CellChangeTimes->{{3.5447533739165163`*^9, 3.544753387717305*^9}, {
  3.5448796823343573`*^9, 3.544879682473357*^9}}],

Cell[CellGroupData[{

Cell["\<\
Mission statement similar to Merino\[CloseCurlyQuote]s\
\>", "Item",
 CellChangeTimes->{{3.544753392659588*^9, 3.5447534020351243`*^9}, {
  3.544882674261103*^9, 3.5448826761810994`*^9}}],

Cell[TextData[{
 "They are 100% based on an expression language -- ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " -- which inspired Jacquard"
}], "Item",
 CellChangeTimes->{{3.5447534079814644`*^9, 3.544753428236623*^9}, {
  3.544753469039957*^9, 3.544753512363435*^9}, {3.544753722213437*^9, 
  3.5447537256526337`*^9}, {3.5448790440237865`*^9, 3.5448790485921984`*^9}, {
  3.5448791175165606`*^9, 3.5448791225635185`*^9}, {3.544879400910033*^9, 
  3.5448794256449614`*^9}}],

Cell["They curate; we crowdsource", "Item",
 CellChangeTimes->{{3.5447535176047344`*^9, 3.5447535272162843`*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["EVERYTHING IS AN EXPRESSION", "Section",
 CellChangeTimes->{{3.5447278212808633`*^9, 3.5447278381651745`*^9}, {
  3.5448792134635906`*^9, 3.5448792204795046`*^9}, {3.5448797144343576`*^9, 
  3.5448797190643578`*^9}, {3.544882703965522*^9, 3.5448827116510153`*^9}}],

Cell[CellGroupData[{

Cell["Computing with Expressions beats computing with Code", "Subsection",
 CellChangeTimes->{{3.544727868160175*^9, 3.5447278776942215`*^9}}],

Cell["\<\
Shorter (much), safer (much), more capable (much), more distributed (much)\
\>", "Item",
 CellChangeTimes->{{3.5447278997950106`*^9, 3.5447279360063896`*^9}, {
  3.544728197720373*^9, 3.5447281977233725`*^9}, {3.5447283396503725`*^9, 
  3.5447283507213726`*^9}, {3.544730591714364*^9, 3.5447305955033646`*^9}, {
  3.5448792571890974`*^9, 3.5448792608690543`*^9}}]
}, Open  ]],

Cell["\<\
Have your cake and eat it, too -- Interop via APIs in JavaScript, C#, Java\
\>", "Subsection",
 CellChangeTimes->{{3.544728198441373*^9, 3.5447282228393726`*^9}, 
   3.544753137772009*^9, {3.544879232124364*^9, 3.544879242102268*^9}}],

Cell[CellGroupData[{

Cell["LINQ over Expressions is a Given", "Subsection",
 CellChangeTimes->{{3.544727914673523*^9, 3.544727920879902*^9}, {
  3.5447287235507054`*^9, 3.5447288013764873`*^9}}],

Cell["Reactive and Interactive (Timelike & Spacelike)", "Item",
 CellChangeTimes->{{3.544727914673523*^9, 3.544727920879902*^9}, {
  3.5447287235507054`*^9, 3.5447288025376034`*^9}}]
}, Open  ]],

Cell["Expressions are just more knowledge", "Subsection",
 CellChangeTimes->{3.544728730174368*^9}],

Cell[CellGroupData[{

Cell["Expressions are universal", "Subsection",
 CellChangeTimes->{{3.544727943677373*^9, 3.544727953725373*^9}}],

Cell[CellGroupData[{

Cell["\<\
Expressions manipulate knowledge, Expressions are knowledge, therefore \
Expressions manipulate Expressions\
\>", "Item",
 CellChangeTimes->{{3.5447279695323725`*^9, 3.544727991403373*^9}, {
  3.544728032345373*^9, 3.544728032347373*^9}, {3.544728361250373*^9, 
  3.5447283619853725`*^9}}],

Cell[TextData[{
 "Expression reuse is easier than code-reuse -- less ",
 StyleBox["junk",
  FontSlant->"Italic"],
 " like the DOM or DLLs"
}], "Item",
 CellChangeTimes->{{3.544728050432373*^9, 3.5447280685303726`*^9}, {
  3.544728367401373*^9, 3.5447283849433727`*^9}, {3.544753234780558*^9, 
  3.54475325806689*^9}, {3.5448794946027765`*^9, 3.544879511640723*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluators bring Expressions to life", "Subsection",
 CellChangeTimes->{{3.544728072479373*^9, 3.544728081718373*^9}}],

Cell[CellGroupData[{

Cell["\<\
Evaluators everywhere: personal agent, in the cloud, desktop, edge, all \
devices\
\>", "Item",
 CellChangeTimes->{{3.5447281108533726`*^9, 3.544728151731373*^9}, {
  3.544753268926511*^9, 3.5447532735097733`*^9}, {3.544879280437868*^9, 
  3.5448793085056305`*^9}}],

Cell["\<\
Reference Evaluator in JavaScript; more evaluators in C#/F#, \
Java/Scala/Kiama, C++/Maude\
\>", "Item",
 CellChangeTimes->{
  3.5448792815298643`*^9, {3.5448793121955876`*^9, 3.544879327033432*^9}}]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 "Authoring environments in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " now and planned for Cloud9"
}], "Subsection",
 CellChangeTimes->{{3.544728166434373*^9, 3.5447281823933725`*^9}, {
  3.5448793336013465`*^9, 3.544879337657304*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["\<\
BACK TO THE SCENARIO: WHERE TO START?\
\>", "Section",
 CellChangeTimes->{{3.544276176206337*^9, 3.544276181413337*^9}, {
  3.544276911937337*^9, 3.5442769156563373`*^9}, {3.544879346344184*^9, 
  3.544879353064166*^9}}],

Cell[CellGroupData[{

Cell["\<\
Encode Nutrition-Fact Label in JavaScript (C# similar); contrast Jacquard:\
\>", "Subsection",
 CellChangeTimes->{{3.544276185293337*^9, 3.5442762178113375`*^9}, 
   3.544276919392337*^9, {3.544292754663204*^9, 3.5442927558390865`*^9}, {
   3.5447038789308033`*^9, 3.5447038820661163`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"<<", "\"\<Jacquard`\>\""}], ";", 
  RowBox[{"<<", "\"\<Units`\>\""}]}], "\n", 
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<JavaScript\>\"", ",", "\"\<Jacquard\>\""}], "}"}], ",", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Style", "[", 
        RowBox[{
         RowBox[{"TableForm", "@", 
          RowBox[{"{", 
           RowBox[{
           "\"\<var burgerNutritionFacts = \>\"", ",", "\n", 
            "\"\<{ ServingSize       :   4  , // Ounce\>\"", ",", "\n", 
            "\"\<  AmountPerServing  : 160  , // Calorie\>\"", ",", "\n", 
            "\"\<  CaloriesFromFat   :  81.0, // Calorie\>\"", ",", "\n", 
            "\"\<  SaturatedFat      :   4  , // Gram\>\"", ",", "\n", 
            "\"\<  Cholesterol       :  60  , // Milligram\>\"", ",", "\n", 
            "\"\<  Sodium            :  70  , // Milligram\>\"", ",", "\n", 
            "\"\<  DietaryFiber      :   0  , // Gram\>\"", ",", "\n", 
            "\"\<  Sugars            :   0  , // Gram\>\"", ",", "\n", 
            "\"\<  TotalFat          :   9  , // Gram\>\"", ",", "\n", 
            "\"\<  Protein           :  21  , // Gram\>\"", ",", "\n", 
            "\"\<  TotalCarbohydrate :   0  , // Gram\>\"", ",", "\n", 
            "\"\<};\>\""}], "}"}]}], ",", "Bold", ",", "20"}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Style", "[", 
        RowBox[{
         RowBox[{"TableForm", "[", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
           "\"\<burgerNutritionFacts = {\>\"", ",", "\n", "               ", 
            "\"\<  ServingSize       ->   4   * Ounce,\>\"", ",", 
            "\[IndentingNewLine]", 
            "\"\<  AmountPerServing  -> 160   * Calorie,\>\"", ",", 
            "\[IndentingNewLine]", 
            "\"\<  CaloriesFromFat   ->  81.0 * Calorie,\>\"", ",", 
            "\[IndentingNewLine]", 
            "\"\<  SaturatedFat      ->   4   * Gram,\>\"", ",", 
            "\[IndentingNewLine]", 
            "\"\<  Cholesterol       ->  60   * Milli Gram,\>\"", ",", 
            "\[IndentingNewLine]", 
            "\"\<  Sodium            ->  70   * Milli Gram,\>\"", ",", 
            "\[IndentingNewLine]", 
            "\"\<  DietaryFiber      ->   0   * Gram,\>\"", ",", 
            "\[IndentingNewLine]", 
            "\"\<  Sugars            ->   0   * Gram,\>\"", ",", 
            "\[IndentingNewLine]", 
            "\"\<  TotalFat          ->   9   * Gram,\>\"", ",", 
            "\[IndentingNewLine]", 
            "\"\<  Protein           ->  21   * Gram,\>\"", ",", 
            "\[IndentingNewLine]", 
            "\"\<  TotalCarbohydrate ->   0   * Gram\>\"", ",", 
            "\[IndentingNewLine]", "\"\<}\>\""}], "}"}], "]"}], ",", "Bold", 
         ",", "20"}], "]"}]}], "}"}]}], "\[IndentingNewLine]", "}"}], ",", 
   RowBox[{"Frame", "\[Rule]", "All"}]}], "]"}]}], "Input",
 CellOpen->False,
 InitializationCell->True,
 CellChangeTimes->{{3.543844700753015*^9, 3.543844850246015*^9}, {
   3.543844881036015*^9, 3.543844889820015*^9}, {3.5438449239490147`*^9, 
   3.543844952683015*^9}, 3.543844999266015*^9, {3.543845089537015*^9, 
   3.543845332169015*^9}, {3.5438454909680147`*^9, 3.543845561055937*^9}, {
   3.543845695570834*^9, 3.5438457030123224`*^9}, {3.5438458839617586`*^9, 
   3.5438461346148214`*^9}, {3.543846171041464*^9, 3.543846379283286*^9}, {
   3.5438464962649827`*^9, 3.543846645731928*^9}, {3.5438467105104055`*^9, 
   3.543847008955247*^9}, {3.5438470567180047`*^9, 3.5438470586060047`*^9}, {
   3.543847155617005*^9, 3.5438472162610044`*^9}, {3.543847252644005*^9, 
   3.5438472833300047`*^9}, {3.5438474356590047`*^9, 3.543847462842005*^9}, {
   3.543847997434496*^9, 3.5438480373164835`*^9}, {3.5438566049645205`*^9, 
   3.5438566573057537`*^9}, {3.5438567414451675`*^9, 
   3.5438567752085433`*^9}, {3.5442764186133375`*^9, 3.544276421368337*^9}, {
   3.544296143273136*^9, 3.5442961522360325`*^9}, {3.5447033540316763`*^9, 
   3.5447034236545568`*^9}, {3.5447035018099966`*^9, 
   3.5447035541036797`*^9}, {3.544706968627954*^9, 3.5447069718822794`*^9}, {
   3.544710152071126*^9, 3.544710157254126*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"JavaScript\"\>", "\<\"Jacquard\"\>"},
    {
     StyleBox[
      TagBox[
       TagBox[GridBox[{
          {"\<\"var burgerNutritionFacts = \"\>"},
          {"\<\"{ ServingSize       :   4  , // Ounce\"\>"},
          {"\<\"  AmountPerServing  : 160  , // Calorie\"\>"},
          {"\<\"  CaloriesFromFat   :  81.0, // Calorie\"\>"},
          {"\<\"  SaturatedFat      :   4  , // Gram\"\>"},
          {"\<\"  Cholesterol       :  60  , // Milligram\"\>"},
          {"\<\"  Sodium            :  70  , // Milligram\"\>"},
          {"\<\"  DietaryFiber      :   0  , // Gram\"\>"},
          {"\<\"  Sugars            :   0  , // Gram\"\>"},
          {"\<\"  TotalFat          :   9  , // Gram\"\>"},
          {"\<\"  Protein           :  21  , // Gram\"\>"},
          {"\<\"  TotalCarbohydrate :   0  , // Gram\"\>"},
          {"\<\"};\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]],
      StripOnInput->False,
      FontSize->20,
      FontWeight->Bold], 
     StyleBox[
      TagBox[
       TagBox[GridBox[{
          {"\<\"burgerNutritionFacts = {\"\>"},
          {"\<\"  ServingSize       ->   4   * Ounce,\"\>"},
          {"\<\"  AmountPerServing  -> 160   * Calorie,\"\>"},
          {"\<\"  CaloriesFromFat   ->  81.0 * Calorie,\"\>"},
          {"\<\"  SaturatedFat      ->   4   * Gram,\"\>"},
          {"\<\"  Cholesterol       ->  60   * Milli Gram,\"\>"},
          {"\<\"  Sodium            ->  70   * Milli Gram,\"\>"},
          {"\<\"  DietaryFiber      ->   0   * Gram,\"\>"},
          {"\<\"  Sugars            ->   0   * Gram,\"\>"},
          {"\<\"  TotalFat          ->   9   * Gram,\"\>"},
          {"\<\"  Protein           ->  21   * Gram,\"\>"},
          {"\<\"  TotalCarbohydrate ->   0   * Gram\"\>"},
          {"\<\"}\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]],
      StripOnInput->False,
      FontSize->20,
      FontWeight->Bold]}
   },
   AutoDelete->False,
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.544276260940337*^9, 3.544276422451337*^9, 3.5442959001248236`*^9, {
   3.544295956654476*^9, 3.544295986458456*^9}, 3.544296042636073*^9, 
   3.5442961532991385`*^9, {3.5445384098784804`*^9, 3.54453841057448*^9}, {
   3.544703427729779*^9, 3.5447034282849455`*^9}, 3.544703507806795*^9, 
   3.5447035548859143`*^9, 3.544703775059417*^9, 3.5447068753516273`*^9, {
   3.544706926462738*^9, 3.5447069401291046`*^9}, 3.544706979737065*^9, {
   3.5447076811768084`*^9, 3.5447076825129423`*^9}, 3.5447101584941263`*^9, 
   3.5447295763523674`*^9, {3.5447318796241035`*^9, 3.5447318837285137`*^9}, 
   3.544732068029942*^9, 3.5447346105273113`*^9, 3.5447351903304744`*^9, 
   3.544877973220315*^9, 3.5448784024524403`*^9, 3.544882878590015*^9}]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 StyleBox["OBSERVATION",
  FontWeight->"Bold"],
 ": In JavaScript, NO innate way to carry units"
}], "Subsection",
 CellChangeTimes->{{3.544276440888337*^9, 3.544276499885337*^9}, {
  3.5442895772695117`*^9, 3.5442895960313873`*^9}, {3.5442897195417376`*^9, 
  3.544289725589342*^9}, {3.5442897774955325`*^9, 3.5442897856073437`*^9}, {
  3.5447038884677563`*^9, 3.5447038964585557`*^9}, {3.5447054403101377`*^9, 
  3.544705440910138*^9}}],

Cell[TextData[{
 "Jacquard: ",
 StyleBox["4 * Ounce",
  FontSlant->"Italic"],
 " means \[OpenCurlyDoubleQuote]4 times the ",
 StyleBox["symbolic constant",
  FontColor->RGBColor[1, 0, 0],
  Background->RGBColor[1, 1, 0.85]],
 " ",
 StyleBox["Ounce",
  FontSlant->"Italic"],
 "\[CloseCurlyDoubleQuote]"
}], "Subsection",
 CellChangeTimes->{{3.544276774098337*^9, 3.544276874290337*^9}, {
  3.54428979067485*^9, 3.5442897962004023`*^9}, {3.5447034482359285`*^9, 
  3.5447034490351686`*^9}, {3.544703567993846*^9, 3.5447035728433*^9}, {
  3.544703899763886*^9, 3.544703913012211*^9}, {3.544729612141368*^9, 
  3.5447296128693676`*^9}}],

Cell[TextData[{
 "In Jacquard, ",
 StyleBox["Everything is an Expression",
  FontSlant->"Italic"],
 " -- No Exceptions"
}], "Subsection",
 CellChangeTimes->{{3.544729616516368*^9, 3.5447296546353674`*^9}}],

Cell["Computing in Jacquard is Computing with Expressions", "Subsection",
 CellChangeTimes->{{3.5447296558743677`*^9, 3.5447296640913677`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["DO THE WEIGHTS ADD UP?", "Section",
 CellChangeTimes->{{3.544276981541337*^9, 3.544276996892337*^9}, {
  3.544289524076193*^9, 3.544289527688554*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"<<", "\"\<Jacquard`\>\""}], ";"}], "\n", 
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<JavaScript\>\"", ",", "\"\<Jacquard\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Style", "[", 
        RowBox[{
         RowBox[{"TableForm", "[", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
           "\"\<var addWeights = function(nutritionFacts) {\>\"", ",", 
            "\[IndentingNewLine]", 
            "\"\<return nutritionFacts.TotalFat + \>\"", ",", 
            "\[IndentingNewLine]", 
            "\"\<       nutritionFacts.DietaryFiber +\>\"", ",", 
            "\[IndentingNewLine]", "\"\<       nutritionFacts.Protein +\>\"", 
            ",", "\[IndentingNewLine]", 
            "\"\<       nutritionFacts.Cholesterol +\>\"", ",", 
            "\[IndentingNewLine]", "\"\<       nutritionFacts.Sodium +\>\"", 
            ",", "\[IndentingNewLine]", 
            "\"\<       nutritionFacts.TotalCarbohydrate;\>\"", ",", 
            "\[IndentingNewLine]", "\"\<};\>\"", ",", "\[IndentingNewLine]", 
            "\"\<document.writeln(addWeights(burgerNutritionFacts));\>\""}], 
           "}"}], "]"}], ",", "Bold", ",", "20"}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Style", "[", 
        RowBox[{
         RowBox[{"TableForm", "[", 
          RowBox[{"{", 
           RowBox[{
           "\"\<TotalFat + \>\"", ",", "\"\< DietaryFiber +\>\"", ",", 
            "\"\< Protein +\>\"", ",", "\"\< Cholesterol +\>\"", ",", 
            "\"\< Sodium +\>\"", ",", "\"\< TotalCarbohydrates\>\"", ",", 
            "\"\< /. burgerNutritionFacts\>\""}], "}"}], "]"}], ",", "Bold", 
         ",", "20"}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Item", "[", 
        RowBox[{
         RowBox[{"Style", "[", 
          RowBox[{
           RowBox[{"TableForm", "[", 
            RowBox[{"{", "\"\<160\>\"", "}"}], "]"}], ",", "Bold", ",", 
           "20"}], "]"}], ",", 
         RowBox[{"Background", "\[Rule]", "LightRed"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Item", "[", 
        RowBox[{
         RowBox[{"Style", "[", 
          RowBox[{
           RowBox[{"TableForm", "[", 
            RowBox[{"{", "\"\<30 Gram + 130 Gram Milli\>\"", "}"}], "]"}], 
           ",", "Bold", ",", "20"}], "]"}], ",", 
         RowBox[{"Background", "\[Rule]", "LightGreen"}]}], "]"}]}], "}"}]}], 
    "}"}], ",", 
   RowBox[{"Frame", "\[Rule]", "All"}]}], "]"}]}], "Input",
 CellOpen->False,
 CellChangeTimes->{{3.543844700753015*^9, 3.543844850246015*^9}, {
   3.543844881036015*^9, 3.543844889820015*^9}, {3.5438449239490147`*^9, 
   3.543844952683015*^9}, 3.543844999266015*^9, {3.543845089537015*^9, 
   3.543845332169015*^9}, {3.5438454909680147`*^9, 3.543845561055937*^9}, {
   3.543845695570834*^9, 3.5438457030123224`*^9}, {3.543846678276182*^9, 
   3.5438466964690013`*^9}, {3.54384784976873*^9, 3.54384795477223*^9}, {
   3.5438493443575354`*^9, 3.543849385745674*^9}, {3.5438494279388933`*^9, 
   3.543849436491748*^9}, {3.54384990825892*^9, 3.5438499969453564`*^9}, {
   3.5438500435183563`*^9, 3.5438501793843565`*^9}, {3.5438502246463566`*^9, 
   3.5438502335103564`*^9}, {3.544277033338337*^9, 3.544277061402337*^9}, 
   3.544294872319064*^9, {3.544295003799041*^9, 3.5442950196240406`*^9}, {
   3.544295255804041*^9, 3.544295277523041*^9}, {3.54429618301711*^9, 
   3.544296196130421*^9}, {3.5442964985226574`*^9, 3.5442965026750727`*^9}, {
   3.544703744556367*^9, 3.544703748252736*^9}, {3.5447070367481346`*^9, 
   3.5447070476911345`*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"JavaScript\"\>", "\<\"Jacquard\"\>"},
    {
     StyleBox[
      TagBox[
       TagBox[GridBox[{
          {"\<\"var addWeights = function(nutritionFacts) {\"\>"},
          {"\<\"return nutritionFacts.TotalFat + \"\>"},
          {"\<\"       nutritionFacts.DietaryFiber +\"\>"},
          {"\<\"       nutritionFacts.Protein +\"\>"},
          {"\<\"       nutritionFacts.Cholesterol +\"\>"},
          {"\<\"       nutritionFacts.Sodium +\"\>"},
          {"\<\"       nutritionFacts.TotalCarbohydrate;\"\>"},
          {"\<\"};\"\>"},
          {"\<\"document.writeln(addWeights(burgerNutritionFacts));\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]],
      StripOnInput->False,
      FontSize->20,
      FontWeight->Bold], 
     StyleBox[
      TagBox[
       TagBox[GridBox[{
          {"\<\"TotalFat + \"\>"},
          {"\<\" DietaryFiber +\"\>"},
          {"\<\" Protein +\"\>"},
          {"\<\" Cholesterol +\"\>"},
          {"\<\" Sodium +\"\>"},
          {"\<\" TotalCarbohydrates\"\>"},
          {"\<\" /. burgerNutritionFacts\"\>"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column],
       Function[BoxForm`e$, 
        TableForm[BoxForm`e$]]],
      StripOnInput->False,
      FontSize->20,
      FontWeight->Bold]},
    {
     ItemBox[
      StyleBox[
       TagBox[
        TagBox[GridBox[{
           {"\<\"160\"\>"}
          },
          
          GridBoxAlignment->{
           "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
            "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.5599999999999999]}, 
              Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}, "RowsIndexed" -> {}}],
         Column],
        Function[BoxForm`e$, 
         TableForm[BoxForm`e$]]],
       StripOnInput->False,
       FontSize->20,
       FontWeight->Bold],
      Background->RGBColor[1, 0.85, 0.85],
      StripOnInput->False], 
     ItemBox[
      StyleBox[
       TagBox[
        TagBox[GridBox[{
           {"\<\"30 Gram + 130 Gram Milli\"\>"}
          },
          
          GridBoxAlignment->{
           "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
            "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.5599999999999999]}, 
              Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}, "RowsIndexed" -> {}}],
         Column],
        Function[BoxForm`e$, 
         TableForm[BoxForm`e$]]],
       StripOnInput->False,
       FontSize->20,
       FontWeight->Bold],
      Background->RGBColor[0.88, 1, 0.88],
      StripOnInput->False]}
   },
   AutoDelete->False,
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.543849940443138*^9, 3.5438499796483564`*^9, 3.5438500467803564`*^9, {
   3.5438500976323566`*^9, 3.5438501806473565`*^9}, 3.5438502353513565`*^9, {
   3.5442770298133373`*^9, 3.544277062012337*^9}, 3.5442950202350407`*^9, 
   3.544295278078041*^9, 3.544295900774889*^9, 3.5442959568184924`*^9, 
   3.5442960428010902`*^9, 3.5442961973725457`*^9, 3.5442965036001654`*^9, 
   3.54453841069748*^9, 3.544703775234434*^9, {3.5447069266587577`*^9, 
   3.544706940307122*^9}, 3.544707049964134*^9, 3.544707682697961*^9, 
   3.54473188419456*^9, 3.54473206830897*^9, 3.544735190466482*^9, 
   3.544878402587454*^9}]
}, Open  ]],

Cell[TextData[{
 StyleBox["NOTE",
  FontWeight->"Bold"],
 ": Jacquard catches the mistake! \nIn JavaScript, only the programmer can \
catch it, and only by head compiling"
}], "Subsection",
 CellChangeTimes->{{3.544293711322629*^9, 3.5442937161385922`*^9}, {
   3.544293761793721*^9, 3.5442937998713355`*^9}, {3.5442938974408455`*^9, 
   3.5442939098643293`*^9}, 3.544295372698041*^9, {3.54470394280519*^9, 
   3.544703943357245*^9}, {3.544751984339037*^9, 3.5447519877422314`*^9}}],

Cell[TextData[{
 StyleBox["NOTE",
  FontWeight->"Bold"],
 ": this 160 is highly suspect: will see later"
}], "Subsection",
 CellChangeTimes->{{3.544293917032763*^9, 3.544293932707897*^9}, {
   3.5447037949734077`*^9, 3.544703808845795*^9}, {3.5447288775171003`*^9, 
   3.544728877893138*^9}, 3.544882766017515*^9}],

Cell[CellGroupData[{

Cell["\<\
NOTE: Units mistakes can cost billions\
\>", "Subsection",
 CellChangeTimes->{{3.544751991444443*^9, 3.544752057939246*^9}, {
  3.544883037918515*^9, 3.544883042622015*^9}}],

Cell[CellGroupData[{

Cell["\<\
Mars Climate Observer crashed over Newtons versus pounds-force\
\>", "Item",
 CellChangeTimes->{{3.544752073373129*^9, 3.54475211534753*^9}, {
  3.544882803863515*^9, 3.544882815822515*^9}}],

Cell["\<\
Who would be liable for a faulty NFL implicated in a diabetic or cardiac \
incident?\
\>", "Item",
 CellChangeTimes->{{3.5447521696366353`*^9, 3.544752230620123*^9}}]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 StyleBox["OBSERVATION",
  FontWeight->"Bold"],
 ": In Jacquard, object access distributes across Plus"
}], "Subsection",
 CellChangeTimes->{{3.544292818332837*^9, 3.544292874028267*^9}, {
  3.544293099629222*^9, 3.544293130116222*^9}, {3.5442931953952217`*^9, 
  3.544293218073222*^9}, {3.544703956549564*^9, 3.544703957629672*^9}, {
  3.54472888681503*^9, 3.544728889334282*^9}, {3.544879781539357*^9, 
  3.544879800836357*^9}, {3.544882827901515*^9, 3.544882829093515*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["GOING GEEK: HOW DOES IT WORK?", "Section",
 CellChangeTimes->{{3.5442946551782975`*^9, 3.544294658409621*^9}, {
  3.5448798163873577`*^9, 3.5448798564743576`*^9}, {3.5448828395660152`*^9, 
  3.544882850253015*^9}}],

Cell[TextData[{
 "Not like ordinary programming; ",
 StyleBox["unbound variables are NOT errors ",
  FontSlant->"Italic"]
}], "Subsection",
 CellChangeTimes->{{3.5447036883917513`*^9, 3.5447037162495365`*^9}, {
  3.5447039248443937`*^9, 3.5447039266675763`*^9}, {3.544707006407134*^9, 
  3.5447070067251344`*^9}}],

Cell["\<\
Symbolic constants are like variables that just evaluate to themselves\
\>", "Subsection",
 CellChangeTimes->{{3.544276879850337*^9, 3.544276893786337*^9}, {
   3.5442897994497275`*^9, 3.5442898426360455`*^9}, 3.5442946625780373`*^9}],

Cell[CellGroupData[{

Cell["They cancel out of ratios ...", "Subsection",
 CellChangeTimes->{{3.544276879850337*^9, 3.544276893786337*^9}, {
  3.5442897994497275`*^9, 3.5442898426360455`*^9}, {3.5442946625780373`*^9, 
  3.5442946737359247`*^9}, {3.5447070131721344`*^9, 3.5447070136111345`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{"16", " ", "Ounce"}], "Pound"], " ", "*", " ", "27", " ", 
  "Pound"}]], "Code",
 CellChangeTimes->{{3.544276879850337*^9, 3.544276893786337*^9}, {
  3.5442897994497275`*^9, 3.5442898426360455`*^9}, {3.5442946625780373`*^9, 
  3.544294694160882*^9}, {3.544703581709959*^9, 3.544703677361648*^9}}],

Cell[BoxData[
 RowBox[{"432", " ", "Ounce"}]], "Output",
 CellChangeTimes->{
  3.544294697061592*^9, {3.5442958995807695`*^9, 3.5442959001848297`*^9}, {
   3.5442959556373744`*^9, 3.544295986055416*^9}, {3.544296041587969*^9, 
   3.544296042691079*^9}, {3.5445384099454803`*^9, 3.5445384106134806`*^9}, 
   3.544552409882366*^9, 3.5447034277947984`*^9, {3.544703593847599*^9, 
   3.544703673630275*^9}, 3.5447037751204233`*^9, 3.5447068754156337`*^9, {
   3.5447069265297446`*^9, 3.5447069401891108`*^9}, {3.5447076813348246`*^9, 
   3.5447076825739484`*^9}, {3.5447295765833673`*^9, 
   3.5447295837563677`*^9}, {3.5447318798431253`*^9, 3.544731883821523*^9}, 
   3.544732068120951*^9, 3.544734610623317*^9, 3.544735190373477*^9, 
   3.5448779734343147`*^9, 3.5448784024984455`*^9, 3.5448828787180147`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["... and distribute over sums ", "Subsection",
 CellChangeTimes->{{3.544276879850337*^9, 3.544276893786337*^9}, {
  3.5442897994497275`*^9, 3.5442898426360455`*^9}, {3.5442946625780373`*^9, 
  3.544294680167281*^9}, {3.5447070163471346`*^9, 3.5447070169951344`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"2", " ", "Ounce"}], " ", "+", " ", 
  RowBox[{"4", " ", "Ounce"}]}]], "Code",
 CellChangeTimes->{{3.544276879850337*^9, 3.544276893786337*^9}, {
  3.5442897994497275`*^9, 3.5442898426360455`*^9}, {3.5442946625780373`*^9, 
  3.544294706653632*^9}, {3.544703681369049*^9, 3.5447036845053625`*^9}}],

Cell[BoxData[
 RowBox[{"6", " ", "Ounce"}]], "Output",
 CellChangeTimes->{
  3.544294707706527*^9, {3.5442958996307745`*^9, 3.544295900235835*^9}, {
   3.544295955683379*^9, 3.544295986105421*^9}, {3.544296041637974*^9, 
   3.544296042746084*^9}, {3.5445384100164804`*^9, 3.5445384106534805`*^9}, 
   3.5445524159373665`*^9, 3.5447034278548164`*^9, 3.544703685360448*^9, 
   3.544703775176429*^9, 3.54470687547764*^9, {3.5447069265907507`*^9, 
   3.544706940247116*^9}, {3.5447076813938303`*^9, 3.544707682631954*^9}, {
   3.5447295766713676`*^9, 3.5447295838973675`*^9}, {3.544731879940135*^9, 
   3.544731884097551*^9}, 3.5447320682109604`*^9, 3.544734610662319*^9, 
   3.5447351904174795`*^9, 3.5448779734833145`*^9, 3.54487840254245*^9, 
   3.544882878774015*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["\<\
APPLYING OBJECTS TO EXPRESSIONS\
\>", "Section",
 CellChangeTimes->{{3.54429641463827*^9, 3.5442964216839743`*^9}, {
  3.5447102331861258`*^9, 3.544710236505126*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "This is a ",
 StyleBox["symbolic expression",
  FontColor->RGBColor[1, 0, 0],
  Background->RGBColor[1, 1, 0.85]],
 "; it evaluates to itself:"
}], "Subsection",
 CellChangeTimes->{{3.54429642543635*^9, 3.544296430852891*^9}, {
  3.5442965578595905`*^9, 3.5442965650033045`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TotalFat", " ", "+", " ", "DietaryFiber", " ", "+", " ", "Protein", 
  " ", "+", " ", "\n", "  ", "Cholesterol", " ", "+", " ", "Sodium", " ", "+",
   " ", "TotalCarbohydrate"}]], "Code",
 CellChangeTimes->{{3.5442964423410397`*^9, 3.544296460511857*^9}, {
  3.5442965273155365`*^9, 3.5442965489406986`*^9}, {3.544710225268126*^9, 
  3.544710226179126*^9}}],

Cell[BoxData[
 RowBox[{"Cholesterol", "+", "DietaryFiber", "+", "Protein", "+", "Sodium", 
  "+", "TotalCarbohydrate", "+", "TotalFat"}]], "Output",
 CellChangeTimes->{
  3.5442965339752026`*^9, {3.5445384100854807`*^9, 3.5445384107424803`*^9}, 
   3.544703427915835*^9, 3.54470377528944*^9, 3.5447054757981377`*^9, 
   3.544706875539646*^9, {3.5447069267217636`*^9, 3.544706940366128*^9}, {
   3.5447076814538364`*^9, 3.5447076828539762`*^9}, {3.5447295767603674`*^9, 
   3.5447295910743675`*^9}, {3.5447318800321445`*^9, 3.5447318842855697`*^9}, 
   3.5447320684029794`*^9, 3.544734610704322*^9, 3.5447351905094843`*^9, 
   3.544877973534315*^9, 3.5448784026324587`*^9, {3.544882878825015*^9, 
   3.544882880097015*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Save it in a variable ...", "Subsection",
 CellChangeTimes->{{3.5447079136800566`*^9, 3.544707932656954*^9}, {
  3.544707986811369*^9, 3.5447079872754154`*^9}, {3.544882899957015*^9, 
  3.544882915058015*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nflSummary", " ", "=", " ", 
  RowBox[{
  "TotalFat", " ", "+", " ", "DietaryFiber", " ", "+", " ", "Protein", " ", 
   "+", " ", "\n", "  ", "Cholesterol", " ", "+", " ", "Sodium", " ", "+", 
   " ", "TotalCarbohydrate"}]}]], "Code",
 CellChangeTimes->{{3.54470794761845*^9, 3.5447079628839765`*^9}, {
  3.544708063453131*^9, 3.5447080636291313`*^9}}],

Cell[BoxData[
 RowBox[{"Cholesterol", "+", "DietaryFiber", "+", "Protein", "+", "Sodium", 
  "+", "TotalCarbohydrate", "+", "TotalFat"}]], "Output",
 CellChangeTimes->{
  3.544707964711159*^9, 3.544708064925131*^9, {3.5447295768493676`*^9, 
   3.5447295912123675`*^9}, {3.544731880128154*^9, 3.5447318843755784`*^9}, 
   3.544732068491988*^9, 3.5447346107443237`*^9, 3.5447351905524874`*^9, 
   3.5448779735853148`*^9, 3.544878402677463*^9, 3.544882878878015*^9}]
}, Open  ]]
}, Open  ]],

Cell["\<\
... Use it in later computations ...\
\>", "Subsection",
 CellChangeTimes->{{3.5447079709257803`*^9, 3.544707983651053*^9}, {
  3.5448800747857723`*^9, 3.5448800756098313`*^9}, {3.544882906035015*^9, 
  3.5448829106180153`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["\<\
JACQUARD OBJECT = LIST OF REPLACEMENT RULES\
\>", "Section",
 CellChangeTimes->{{3.5442953058860407`*^9, 3.544295314740041*^9}, {
  3.5447040103129396`*^9, 3.5447040119691057`*^9}, {3.544705398305138*^9, 
  3.544705405095138*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"burgerNutritionFacts", "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ServingSize", "\[Rule]", 
       RowBox[{"4", " ", "*", " ", "Ounce"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"AmountPerServing", "\[Rule]", " ", 
       RowBox[{"160", " ", "*", " ", "Calorie"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"CaloriesFromFat", "\[Rule]", 
       RowBox[{"81.0", " ", "*", " ", "Calorie"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"SaturatedFat", "\[Rule]", 
       RowBox[{"4", " ", "*", " ", "Gram"}]}], ",", 
      RowBox[{"Cholesterol", "\[Rule]", 
       RowBox[{"60", "*", "Milli", "*", "Gram"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Sodium", "\[Rule]", 
       RowBox[{"70", " ", "Milli", "*", "Gram"}]}], ",", 
      RowBox[{"DietaryFiber", "\[Rule]", 
       RowBox[{"0", "*", "Gram"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"Sugars", "\[Rule]", 
       RowBox[{"0", "*", "Gram"}]}], ",", 
      RowBox[{"TotalFat", "\[Rule]", 
       RowBox[{"9", "*", "Gram"}]}], ",", 
      RowBox[{"Protein", "\[Rule]", 
       RowBox[{"21", "*", "Gram"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"TotalCarbohydrate", "\[Rule]", 
       RowBox[{"0", "*", "Gram"}]}]}], "}"}]}], ")"}], "//", 
  "gridRules"}]], "Input",
 CellChangeTimes->{{3.544295395095041*^9, 3.544295407323041*^9}, {
  3.544703986843593*^9, 3.5447040702879367`*^9}, {3.5447052625071383`*^9, 
  3.5447052989861383`*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {"ServingSize", 
     RowBox[{"4", " ", "Ounce"}]},
    {"AmountPerServing", 
     RowBox[{"160", " ", "Calorie"}]},
    {"CaloriesFromFat", 
     RowBox[{"81.`", " ", "Calorie"}]},
    {"SaturatedFat", 
     RowBox[{"4", " ", "Gram"}]},
    {"Cholesterol", 
     RowBox[{"60", " ", "Gram", " ", "Milli"}]},
    {"Sodium", 
     RowBox[{"70", " ", "Gram", " ", "Milli"}]},
    {"DietaryFiber", "0"},
    {"Sugars", "0"},
    {"TotalFat", 
     RowBox[{"9", " ", "Gram"}]},
    {"Protein", 
     RowBox[{"21", " ", "Gram"}]},
    {"TotalCarbohydrate", "0"}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxBackground->{"Columns" -> {
       RGBColor[1, 0.9, 0.8], {
        RGBColor[1, 1, 0.85]}}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.544295319095041*^9, 3.544295410922041*^9, 3.5442959009039016`*^9, 
   3.5442959568694973`*^9, 3.5442960428570957`*^9, 3.54453841078948*^9, 
   3.5447037753454456`*^9, 3.544704071182026*^9, {3.544705274360138*^9, 
   3.544705306531138*^9}, {3.5447069267867703`*^9, 3.5447069404241343`*^9}, 
   3.544707682912982*^9, 3.5447295971113677`*^9, 3.544731884468588*^9, 
   3.5447320685829973`*^9, 3.5447351905934896`*^9, 3.544878402720467*^9, 
   3.544883059341515*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["\<\
APPLY THE OBJECT TO THE EXPRESSION\
\>", "Section",
 CellChangeTimes->{{3.5448799473093576`*^9, 3.544879953086357*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nflSummary", "   ", "/.", "   ", "burgerNutritionFacts"}]], "Code",
 CellChangeTimes->{{3.5448799649263573`*^9, 3.544879990381357*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"30", " ", "Gram"}], "+", 
  RowBox[{"130", " ", "Gram", " ", "Milli"}]}]], "Output",
 CellChangeTimes->{3.544879991829357*^9, 3.544882879002015*^9, 
  3.5448830628385153`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Long form of the same expression", "Subsection",
 CellChangeTimes->{{3.5448800037153573`*^9, 3.5448800095073576`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReplaceAll", "[", " ", 
  RowBox[{"nflSummary", ",", " ", "burgerNutritionFacts"}], " ", 
  "]"}]], "Code",
 CellChangeTimes->{{3.5448800138463573`*^9, 3.5448800341823573`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"30", " ", "Gram"}], "+", 
  RowBox[{"130", " ", "Gram", " ", "Milli"}]}]], "Output",
 CellChangeTimes->{3.5448800254853573`*^9, 3.544882879063015*^9, 
  3.544883064620515*^9}]
}, Open  ]]
}, Open  ]],

Cell["Objects are collections of replacement rules", "Subsection",
 CellChangeTimes->{{3.544880319181373*^9, 3.5448803349737406`*^9}}],

Cell["\<\
Replacement rules act like functions\
\>", "Subsection",
 CellChangeTimes->{{3.5448803255549345`*^9, 3.544880343020439*^9}, {
  3.544883073020015*^9, 3.544883073827015*^9}}],

Cell[CellGroupData[{

Cell["\<\
objects act like (collections of) functions\
\>", "Subsection",
 CellChangeTimes->{{3.544880118643736*^9, 3.544880150189622*^9}, {
  3.544883082075515*^9, 3.544883084242515*^9}}],

Cell[CellGroupData[{

Cell["\<\
This is also true in ordinary object-oriented programming \
\>", "Item",
 CellChangeTimes->{{3.5448801394935784`*^9, 3.544880165678001*^9}, {
  3.544880201760254*^9, 3.54488021649759*^9}, {3.544883089506015*^9, 
  3.544883090147015*^9}}],

Cell["Methods are always functions", "Item",
 CellChangeTimes->{{3.544880218320763*^9, 3.5448802516986275`*^9}}],

Cell["\<\
Properties are optionally backed by functions (get, set) in C#\
\>", "Item",
 CellChangeTimes->{{3.544880170782445*^9, 3.5448801969278154`*^9}, {
  3.544880230537817*^9, 3.5448802458570976`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 StyleBox["Applying objects",
  FontSlant->"Italic",
  Background->RGBColor[1, 1, 0.85]],
 StyleBox[" is like ",
  Background->RGBColor[1, 1, 0.85]],
 StyleBox["calling functions",
  FontSlant->"Italic",
  Background->RGBColor[1, 1, 0.85]],
 " "
}], "Subsection",
 CellChangeTimes->{{3.544880090498181*^9, 3.544880113845299*^9}, {
  3.54488034993605*^9, 3.544880371895918*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["\<\
... RULE APPLICATION IS FLEXIBLE\
\>", "Section",
 CellChangeTimes->{{3.5442948337209244`*^9, 3.5442948431589804`*^9}, {
  3.5447071108231344`*^9, 3.544707116886134*^9}, {3.544728991245472*^9, 
  3.5447289971080585`*^9}, {3.5448803801225967`*^9, 3.544880385488078*^9}}],

Cell[CellGroupData[{

Cell["\<\
To any arbitrary expression ...\
\>", "Subsection",
 CellChangeTimes->{{3.5442943267534585`*^9, 3.544294333921175*^9}, {
  3.544883173188321*^9, 3.5448831764369516`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fatRatio", " ", "*", " ", 
  FractionBox[
   RowBox[{"9", " ", "Calorie"}], 
   RowBox[{"Gram", " ", "fat"}]], " ", "*", " ", "4", " ", "Ounce"}]], "Code",
 CellChangeTimes->{{3.5442943183366165`*^9, 3.5442943433151145`*^9}, {
   3.54429442797458*^9, 3.544294485706352*^9}, {3.5442945469764786`*^9, 
   3.5442945535191326`*^9}, {3.544704198492756*^9, 3.5447042482627325`*^9}, {
   3.5447043304819536`*^9, 3.5447043354584513`*^9}, 3.544704393334238*^9, {
   3.5447052207759743`*^9, 3.5447052229281893`*^9}, {3.544705549395138*^9, 
   3.5447055612981377`*^9}, {3.5448831859537306`*^9, 3.544883188408187*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"36", " ", "Calorie", " ", "fatRatio", " ", "Ounce"}], 
  RowBox[{"fat", " ", "Gram"}]]], "Output",
 CellChangeTimes->{{3.5447042141723237`*^9, 3.5447042242063274`*^9}, 
   3.5447043364755526`*^9, 3.544704394202325*^9, 3.544705231658062*^9, 
   3.544705562700138*^9, 3.5447068757126637`*^9, {3.544706927025794*^9, 
   3.5447069406501565`*^9}, {3.5447076816148524`*^9, 3.544707683132004*^9}, 
   3.5447295771823673`*^9, 3.5447296829923677`*^9, {3.544731880463187*^9, 
   3.5447318847946205`*^9}, 3.5447320690440435`*^9, 3.544734610890332*^9, 
   3.5447351907544985`*^9, 3.5448779737633147`*^9, 3.544878402879483*^9, 
   3.5448828791180153`*^9, 3.544883192632981*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
... apply numeric, symbolic, or mixed rules\
\>", "Subsection",
 CellChangeTimes->{{3.544294347202503*^9, 3.544294375066289*^9}, {
  3.5448831690040417`*^9, 3.5448831815758977`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"fatRatio", " ", "*", " ", 
   FractionBox[
    RowBox[{"9", " ", "Calorie"}], 
    RowBox[{"Gram", " ", "fat"}]], " ", "*", " ", "4", " ", "Ounce"}], "   ", 
  "/.", "   ", 
  RowBox[{"fatRatio", " ", "\[Rule]", " ", 
   FractionBox[
    RowBox[{"9", " ", "Gram", " ", "fat"}], 
    RowBox[{"4", " ", "Ounce"}]], " "}]}]], "Code",
 CellChangeTimes->{{3.5442943773555183`*^9, 3.544294422351017*^9}, {
  3.5442944917729588`*^9, 3.5442945330300837`*^9}, {3.544294816391658*^9, 
  3.5442948172065763`*^9}, {3.5447042369426003`*^9, 3.544704275560462*^9}, {
  3.5447043105459604`*^9, 3.5447044022001247`*^9}, {3.5447052282087173`*^9, 
  3.544705228943791*^9}, {3.544705570898138*^9, 3.5447055799931383`*^9}, {
  3.5447290106384115`*^9, 3.544729030095357*^9}}],

Cell[BoxData[
 RowBox[{"81", " ", "Calorie"}]], "Output",
 CellChangeTimes->{{3.5442943990876913`*^9, 3.5442944088996725`*^9}, 
   3.5442944935701385`*^9, {3.5442945336481457`*^9, 3.544294556431424*^9}, 
   3.5442947522060766`*^9, 3.544294818243472*^9, {3.544295899805792*^9, 
   3.544295901153927*^9}, {3.544295955838394*^9, 3.544295986274438*^9}, {
   3.5442960418079906`*^9, 3.5442960431381235`*^9}, {3.5445384102954807`*^9, 
   3.5445384109124804`*^9}, 3.5447034281349*^9, 3.5447037755384645`*^9, 
   3.544704276407547*^9, 3.544704396638569*^9, 3.544705234856382*^9, 
   3.5447055810071383`*^9, 3.5447068757746696`*^9, {3.5447069270878005`*^9, 
   3.5447069407081623`*^9}, {3.544707681672858*^9, 3.54470768319101*^9}, 
   3.54472903192654*^9, 3.5447295772703676`*^9, 3.5447296831383677`*^9, {
   3.5447318805541964`*^9, 3.544731884880629*^9}, 3.5447320691340523`*^9, 
   3.5447346109303346`*^9, 3.5447351907955008`*^9, 3.5448779738113146`*^9, 
   3.5448784029224873`*^9, 3.544882879174015*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["MORE NFL: ADD UP THE CALORIES", "Section",
 CellChangeTimes->{{3.544705610030138*^9, 3.544705636740138*^9}, 
   3.5447058248831377`*^9, {3.54488039516094*^9, 3.544880400434366*^9}, {
   3.5448832067952127`*^9, 3.544883207153284*^9}}],

Cell[CellGroupData[{

Cell["Beef-up the object ", "Subsection",
 CellChangeTimes->{{3.5447059406771383`*^9, 3.5447059490601377`*^9}, {
   3.544706017057138*^9, 3.544706019664138*^9}, 3.5448804061068354`*^9, {
   3.544883215114295*^9, 3.544883220764843*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"beefedUpBurgerNutritionFacts", "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ServingSize", "\[Rule]", 
       RowBox[{"4", " ", "*", " ", "Ounce"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"AmountPerServing", "\[Rule]", " ", 
       RowBox[{"160", " ", "*", " ", "Calorie"}]}], ",", 
      RowBox[{"CaloriesFromFat", "\[Rule]", 
       RowBox[{"81.0", " ", "*", " ", "Calorie"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"SaturatedFat", "\[Rule]", 
       RowBox[{
       "4", " ", "*", " ", "Gram", " ", "*", " ", "saturated", " ", "fat"}]}],
       ",", "\[IndentingNewLine]", 
      RowBox[{"Cholesterol", "\[Rule]", 
       RowBox[{"60", "*", "Milli", "*", "Gram", "*", "cholesterol"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Sodium", "\[Rule]", 
       RowBox[{"70", " ", "Milli", "*", "Gram", "*", "sodium"}]}], ",", 
      RowBox[{"DietaryFiber", "\[Rule]", 
       RowBox[{"0", "*", "Gram", "*", "fiber"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"Sugars", "\[Rule]", 
       RowBox[{"0", "*", "Gram", "*", "sugar"}]}], ",", 
      RowBox[{"TotalFat", "\[Rule]", 
       RowBox[{"9", "*", "Gram", "*", "fat"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"Protein", "\[Rule]", 
       RowBox[{"21", "*", "Gram", "*", "protein"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"TotalCarbohydrate", "\[Rule]", 
       RowBox[{"0", "*", "Gram", "*", "carbohydrate"}]}]}], "}"}]}], ")"}], "//",
   "gridRules"}]], "Input",
 CellChangeTimes->{{3.544295395095041*^9, 3.544295407323041*^9}, {
  3.544703986843593*^9, 3.5447040702879367`*^9}, {3.5447052625071383`*^9, 
  3.5447052989861383`*^9}, {3.544705961352138*^9, 3.544706008680138*^9}, {
  3.5447065360937047`*^9, 3.544706546395735*^9}, {3.544707649768668*^9, 
  3.544707654504142*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {"ServingSize", 
     RowBox[{"4", " ", "Ounce"}]},
    {"AmountPerServing", 
     RowBox[{"160", " ", "Calorie"}]},
    {"CaloriesFromFat", 
     RowBox[{"81.`", " ", "Calorie"}]},
    {"SaturatedFat", 
     RowBox[{"4", " ", "fat", " ", "Gram", " ", "saturated"}]},
    {"Cholesterol", 
     RowBox[{"60", " ", "cholesterol", " ", "Gram", " ", "Milli"}]},
    {"Sodium", 
     RowBox[{"70", " ", "Gram", " ", "Milli", " ", "sodium"}]},
    {"DietaryFiber", "0"},
    {"Sugars", "0"},
    {"TotalFat", 
     RowBox[{"9", " ", "fat", " ", "Gram"}]},
    {"Protein", 
     RowBox[{"21", " ", "Gram", " ", "protein"}]},
    {"TotalCarbohydrate", "0"}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxBackground->{"Columns" -> {
       RGBColor[1, 0.9, 0.8], {
        RGBColor[1, 1, 0.85]}}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.5447065250806036`*^9, 3.544706547312827*^9}, {
   3.544706927154807*^9, 3.5447069407711687`*^9}, {3.5447076559312844`*^9, 
   3.5447076832560167`*^9}, 3.544729688254771*^9, 3.5447318851146526`*^9, 
   3.5447320692240615`*^9, 3.5447351908395033`*^9, 3.5448784029664917`*^9, 
   3.5448832118771825`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["MINE FOR CALORIE FACTS", "Section",
 CellChangeTimes->{{3.544706061495138*^9, 3.544706066294138*^9}, {
  3.544710097745126*^9, 3.544710101280126*^9}}],

Cell[BoxData[
 RowBox[{
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
phbUVNbUV9TUl1fXVVTXIymvqi+rrC+trCutrD9TVVeGpLquvKYOJSivri+r
qi9FUsn9raor5U5WVKHb68uxEk6D+Jc74G+srU0/aH9tevuzv/Rsu8G5eYpr
+087nvtV6zv3V5/OLK9pKK9uqOAMwFlwOvFBTV1ZjXCMreJyPIMME0xCyhuk
q9gY/hJKyWddJRhWwRWQL1q5eDJiNp9SfqZMdALKDh2QdyFBpT6Ds8NpsH9q
Ip5BH6tqG2obGpqaGluaG9Hf+sam2vqmhqbGVvSxEZ9vbW1EqGtoaGlptFCJ
lkUiqCWxECB4AAAAEE/0d7d7PlppW3dF68KzYihIYeehTWRGqHuPzziSbBLP
EVlDUBVIfMO4jF2afcndmOAhQQeI4GUX1tfUN1bVNVbWNlTW4YPaBo6FNDe1
tDS3cByloam5rqG5tqGprhF/bG5Bl9A/TQ2IujQ0cffiG5lSW1/Z0Ir01+Yf
a/p6Z/3HG+3vrnHs21B//K2a0yeq6lsq65sQKZLSV8tv55VzVjU2YauQAc3I
JHQGWY4E2YA+NuPz2Kr6xkahRBomsYXIDmvj1OJjPjv0t66xEefWgkxp4s4L
HkCXUHrkt4rahoIzdZmFNccLaj7Pqvn4u9oDaTVf5VR/daLqWG7Vl9k1X2ZX
ZRVW5xbXoQQWKtGyIFbMk2f0t7S6lv9oWYDgAQAAQDwRKD/uy3rbsfLXrXde
Z7t7sm3ORNucCbYF420Lx3F/1TKujTtvXzIaiW3xGHzA/112vf2B6+3Lx9ru
u9K1+VZ/zj6kXMoIde/xGUeSTeI5ImsIqgJMyUwKSfAunZd+11On8s9g2lZT
31TH8SfElGrqm8trmkoqG4orGvLPNKQV1H2TW38kq/5wZt2XJ+rTCmoLSmqL
KhpLKhvLqhEZQzSvubG5pb4RMa7m2nrur0pqMGVqqm1sqWlqK6qzt1cXtdeW
lza48F31TTV1TZRbOFX1mFJiq6rrm1F2JVWNp8sbECn9Nq/+UHrVobTKg2mV
hzOqv8uvzyupLyxvOFPVhJKhe/m76mjGaAhyRYPohNIqXMbC8voThdXf5tV9
llGN8kKZfpldnXm6/lQZvorSYA+gWxqbKmubSqua0k/Xv/1l6bo3T05/quDW
DXk/XZMzZkn2L9dlzduR98CrhffsPL3itcJZz+atfj1/0zuFc587aaESk0SA
4AEAAEA8MVD1df8L9wTm3dyz8Gc9C/6tZ+HPexbf3LPk5p7FP+1ZopTgUu78
0puDK6YEV3Ky6obQyikh9PfByVjWTgo9OCX40OTgw2PCH63uO31Qygh17wkf
YkayoCpArMysSATv/NlpP5mfPu+FwrySpvrmllrEhZpaGxpbSiqbPklr3Pxh
+eKX8/+6LffXD+X924M5U1acQHLjypwblp/4+ZrcPzya/5ctJxfsKN78wZkP
vyo9WYxutdU1tqIxv66hta6xpQ5pQ39JaWqub2qt4wRlV91oq2m082cQ6xPu
Ig+449qG1vqmloZmbNUH39Y89l75wp1Ff96U//M1OcgY3iRs1YoTN63KuXVD
/u3bTy995cwTH1UcTK+tqG1C+usbOf28PaRytTQ11zYiJ+DsEE/79Hjto++c
mf/Cqb9sKUAeuFH0APp708qcW9bm/u6RvNnPFW14p+T9b6pKqlqq6prePlp9
70slyGOjF2ddPj+DZ9EXzUm/cHbqhXPT1+8pqahrXv/umcKK5kMZ1ctePb14
16mlL5+2UIlJIkDwAAAAIJ5wPfgn27QJSOxzfmqffaN9/g32BTfgv/On2BcQ
svBG+z032Rf91H7vzY77b3Q8MMVx/2T70kmOxRMdSyY4HhjvWDbe8cAEx/0T
HCvGOR4cZ192pWP1GNfW30kZoe494UPMSBZUBVp0hSE8wbtAWIOXfueTJ3OL
Gx0OW21D06epNSteP3PbxrxJy05ce2/mFQvxHO5FeMFe+nmz0s4V5YI56ej8
JXdnXLEg49p7MiY9kPnbh3Pv2Vn43jcVpdXNNputqaUNc8WWtkZRGppaW2xt
FXWtBzKadn1Ws/dYzcGMhve+qd7zVeU3+S31za3NrW0Nza1C4maeBLY6bLba
xrZ9afUr3jjzHxvzJy87cc09mYiUXjoPW3UBx1HP4wQdICPRyUvnZ1y5MOP6
+zJvXJEzdWv+lg/OfHOqrbkNaUImYasaCatIqW1sbW5ra21ryyhs2rK3HHHI
GyLZZeDsUEazsKC8LuDyQt67bH76qPsyJz6Q9fsNeciTk7gNLOfPlpLhnSwX
z8VbWtAtj75b2tjatuWDEmTGy4cr3v666tv8+oW7TluoxCQRIHgAAAAQT7Td
Md4+92bE7mxzbhRJ3Y1YFk4R/i66yX7PzYjytc0a1zrj2rbZP2mbfSn6a19w
nWMx4nU3OJZPsmN2NxETvBXjHWvG2teMcTw4wY4Oll8lZYS694QPMSNZUBUg
LmRWhAgeR4oQP5m/oyi7uPn9b6vmPHvyxpUnrlqUhc6fMz3l7LtSfnhXyo/u
Sj1vVioicjcsz/7p6tyfr8mdsiLnqkWZ58xI+8FdKf96Z8oPpqWgY8T6fjIv
/cYVWX97PP/Fg9XFlS0OR1tjq6OhxdbUakf8qr7Z7nQ5i6pb1+4pnbz8xA3L
T/xq7YnJyzJ/uS7n6U+rGlrsNoejscWOEqPjphb0yVZe17b7aNWsZ07ehK3K
PG9W+rkz0340gzcs9UfTUy+bnzF6cdbkZdmTlmUjloV41DkzUs++KxWZfc6M
FJQYUb5R92Xcsi5v8a7C/RmNDa1Ou92G9De2OXirmrmDJs7O9nZXQXnb5vfL
frc+d9TiLExoZ6YhhUgbyvHcmanIhonLsm5alTP+gROXL8g4f1baD6alfu/O
4z+ekYpS8tmdg49TkQMv4vgzOvnjmfzfFEQIH9pd6nA48staUHa5ZS0V9TZU
0PSiZguVmCQCBA8AAADiCfvdP7PPvsk256YIu0OkTmB3SG6yzZ3UNuM626Ib
HA/9h/vJ6R075re/tLjjxfmux26z33+jbdFV9iWjHMsmOZZNdKwcZ39wLEfw
xjnQwYPjHWsnShmh7j3hQ8xIFlQFTa02syJF8M6flYqIyh8fzZ+/o/DfHjyB
yMn3p6WeNzP1xzNT0dXRS7L+a8vplW+UPfNpxe6vqj9JqTuQ0YBkX2r9O19X
v3ig4qHdJYjOTV6WhbQhEohuRKQLUS/EfxbsKPw0pRYRJ4fThUhUS5sTkT3E
oIqr25a+WvzjGSn//LfjKPH//Z/vrlyY8fhHlSglon8tmG457A6X3eH8Oq/p
gVeKEatE9On7d6YgU5F5F8xJv2Jh5m/X5y5+qWjL3vI3Pq/ce6wWGfbx8br3
v6159XDVpvfL57+AypJ7+QJECNN+PAvTre/dcfyiOam3PJS/8b2K7JIWh9Pd
YnM2tzpabU4kKNM2u7PV7jqYUT/3+ULE4r53ZwrK9MI5iJUh/6T/+uH8RS+V
PvFx1e6jNR+n1P4jrf6j43Xo+Pl/VCIL/7ix4MqFmSglYnQXczG9i7np70vn
pV93X9akZSduXpn989VZk1ec+MWDOc/tK+vocCNBvK6j3e10ulDWXR63hUpM
EgGCBwAAAPGEffbNdondzcfszsbRPBvH8Wx3j0fUzvXo7Z73t/jz9oWaivs6
7P093X1ee+D0Ee8nT7mfnm5fNcW29HrE7hwEu0N/MdlbO1bKCHXvCR9iRrLg
KkAUxaTwBA9PIM7GM7A/mZ9x9nTMzS65O42bt0396arsJa+U7DxU/WVuS3m9
09PRHvR3BLqRtPu72tFByN8e6HLVN9u+K6h/68uq1X8v+c3DuUjVubNSEbH5
8Uwc07tlbe6O/ZVVDXa3240IW1Mb0uMuq7OvebPssnnpKJcrFmacOzNl4rLs
Fw/VIKtcbkQFnS6XE3G8j47X/3XbKcSyfjAthZ+NRQRy7JKM2c+cevzDyk9T
6wqrUFJ3T7c7iCzxYcOQST2+dsTTcktbPjhW99j75f+9Lf+ae/CNF+PZ5HRE
8y6emzF/R/E3+Y0oF5RTqw1TO6Snxe5+55u63z2Se/b0FETVkHmIoaG7frM+
b8O7ZfvSGgsqUKqOnu4OlAUqftCHsvN4Pag4tiPZjcikPz5agIxEZPIi/HZB
YQPLf2zMf+Vw9QffVu89Vr37q9p3v6nJKm50oHztTpsDUUpnGz5wWajBJBIg
eAAAABBHYHa3gAvZzZemZW8UON7dN9iX/czzwbpeey2feEC8Szro63R2HnzW
vuEX9tVjHIjUCexurG3NWMe6MY4N10sZ4SU4CR9iRrCgKmjjeIIpESJ4syJU
hFtQh+hZ2jX3Zk576tTbR6vrWlyIyXR62xEhaUMkxI5oSUT4j3anq72jvcff
0Wxz7kutX/Bi0XX3cbGsuYg0pn//zuOXL8jY/H5ZRb2tvcONlCBt5fWOlW+U
XsJxocvmpyNWiYx5fn81utrejnigy+F0fZLS8PM1mGtdyM0go5SXz0//ry35
z+0rO1Xe0t3Z7uvqcLrdiBpJlpAmIT7p6+5od7vSTzdufPfMLetyL+Jilcik
82alnTMz5fbH8xEJRJYjUomA/v4jo/mm1TiAefHdOPJ23kzEddPvevr0/owm
pxsxunaUkM9OyovLzomcg2geIsBf57fMe6Ho6kWYT/IrG388M+23D+fuT6vz
epAGD292hwf5060WC5WYJGKM4JVtH3XWWaO2l8WshxuZiNKNg1cLUL8aODD1
LAFTD1hLAADIwM3D0gQxvWW3dH/zNkoz0Nsb5kndgMTs0CGHPnwpcPKYY/2t
PLXDOywQzXtorHPDaMcjY6T0qHtP+BAzkgXXtdNlVgSCN5vb4DmX30OB52Sv
vTfzoT1lZfXOrk4PIkp2pxsxOJe7w91OF3QJCUrmcHYgAlPX7Hjq05rx92cj
goQ0XzYPL0hDB1s+KK1rcXo6OpDaygbnqr+XXYL5D15B96PpKeOWZr1woAbx
u44OpMSTXmT72xOF58xI4fcmIMOuXpR570tFuaWtnV6UpEO0im4YbxLSZne4
UXqk9LPs5r9uO4lp2+zUS7kYIyr4A6+XltXhYno63FnFTbdtKkDZnc/FM8+f
jSN4dzx5qqDC6fV28H7g1VKzQ/TM5nAjCoeKv25PCQ5gIqLIxfHOnp5606oc
xP2QwYgocnraqZ60UIlJIkDw4gggeEMPEfbGcJBuAhKco4EGjnRwK+4iuyps
C7jw3aKb2uaN6f7yzYHe4ABP6vp7A7kHO9683/nY752b/rP972t9x/cMhHrQ
lYH+/oH+vkDBF/ZVo22rxthXj7M/NMbxyGgsG2QEL+FDzEgWVAWIOZgVieAh
VsNH8JBcfU/m059W1bW0e71ed4enw+Np7/C4Me3yeDzeDiToZEcHfwaHorjz
SLgD9NHb1el1uj1vH62esiKbm/DF4cHzZqVeuTDjvWPNDldnwOetbnKt3a0k
eDsO1LjbPV6vx9ne9dS+2ksw58QzxfxittVvlta3IIu8nd5OPusOzjDeAMlI
yST+DHcS34I0p5c5//rEaX6ulvv9jtTr7ss6lNnQ3+Otamrf9lH1ZfMy0NWL
uEjm2Xel/uHR/Pxym8fTiW5v59Ri5ZIriL/cQQe65Gr3+rs9FfW2O58svBiv
SEzjy4j43sIXi2uaXEG/l6OIgjbeTlGz6RpMHgGCF0eAG4ccuCrTomS6CWTg
2CAQvJEO+Z5ZfNA2/wbb3Intb64OcTOzAwP9va5Gz56VznW/tt8/wXbf1bZ7
r7Uvm+xYd4v7hTuCNXl8UK/P7/Uc2ObYMM6+7lrHBiF853xktJQR6t4TPsSM
ZEFVwAqvaQgRwUvnJhNTESFZ93ZFVaO7x4dIFKZzHkK8nk4PFq9Hdd4rnu/A
93T6uzudrvateytG3Zd5zgxMbxCbQsp/uz7/2MnWgQFfZYN77dvll8xLP0cg
eKljl2S+sL/ajQlSZ15Z26xnTn9v2nGBHM5M++0jOYdPNA4Eu5FVahu8umcw
7ez0+bp2HsKhRVTSi7mXqyDZ+H4l0plfbv/LllPnz0o9H1Gyuekox2vvTd/8
/hlfd2d3ZyeXKUW/9FfKDhFQlB7xto/SmiYtO8EtHcT8md97m1rkDgW63Zh0
CsxQYaeFSkwSAYIXR4Abhxx0q8xcnQLBA4RlU7RTuNV3N9rmTbYvmuwvyejv
Cw0MDPS2t7a/scS2eGzbomvs9493rJzkWDHZcf842wPXtC251PXcnT21RWEu
jhdsq3Y+epPjwSucG8c5Hh7t2DDauVkWwUv4EDOSBVVBBx9eMyMSwbuYe7cb
Yju/WZ+XWeoK+Lu9XpSg09tpRTDF83YianSqyjH7uaLzOMrE71Y4Z3rK9o+r
fP6ummb3g7sxwSMjeDsP1bo7vP2h7gMZjb99OBed5Kc4z52RtvzvZ8obXX5f
F47wmTcJMylvp9/Xeexk2583nTz7rhR+Iwmic9OfOVXR1PFNgX3c/Vn4JXWz
hfDd7zfkf5Hb3N2NiGFnh9dQpnwu/N/yRs//PH76PO6lKDiINyPlvFmpb3/b
5PYgfRxF9NJdN0TFJMGLzEepxjQ+lKG+rBoBOR3ECeYQiRPi8xHNYioiL8Vo
SUyY0XMhbpWu0izQnkwjs1El0rVB32kRA8QUouns29UulBuiF4YS7tdylL4z
9MkOmXrU9gNkmdRF1tFvpYVQy87Uruk/VgK6wfKMgOWNYEjszsbF8drmTWmb
P8Xx2G3B1toBRNv6egP5X7QtvMq+dKId8boVEx3LJuA3oqweb1873vHwDW33
XNT5+Uv9wR4c6evx21+baX94lGP9KPuGMa7NY9q3jpMyQt17woeYkSyoCjBh
MCnSJguO0qRctTDjiY+r7O6unoDP4+nq7OrusiSdXYgUdSF+iPS8crh67JIM
7nVw6Rfj1WgpM54pLK1ztzq8q98quzgyRXt8/P3Zuw7XdXi6BvoCr39ZP3n5
ifNmpl7ERfDOmZG6/ZMqRztiQF1epN2CScJdXQVVrjnPF/14ZmTi+E+bcgrK
2z4/0XzNPRncYr+0S+elff/OlGlPni6qdXViL0i3Gyo49193bUvXkldKL1+Q
jkOCd6fx+2qf3V/V4vQE/D6Pl67QQiUmiZgheFOnjjqLNnIpxy7FGKbgJcLo
p8muIilHbd+uHEWVmck1KUEfXhVX1TZohFoomiIJ9W3QNjeiik88alREhYHb
CYsV7EPuKmr9Er4wd6fRxAzdCv+QRdbRb7aFGLNHdKIlgsc2GAgeQADJ7uwL
bmy7e7Lt3inu1+7rddSFcfiupfPjbfb7xtiXT3As59gdOljFvxFlnH3tBNuy
KzxvLwu1VQ9ggudzf7ndvmmy66FrXFvHu7aN6dgsI3gJH2JGsqAqsBDXkl6T
cuk8vNd13P3Zh060ebzdfr+vs7O7u9snSRdxbEQwV+nsGugNfJHT/Lv1uYih
4b0Sc/DWhl89lPt1QZuro+vBt8oVa/B2Ha5FuYeCPS8crB27FL9m+WLu5zMQ
+Xx+fxWmdxwLYmaqaQ+66uv2FdW6F+4sPn+2MEWLsvj1QzlZxS3f5reMWZJ9
ITdpe9k8/CqV/952Kr/C1YWV+jQyVWWEk6KDyubOe3eduXx+OrdlAxO8C2an
vnCwxubyBvx+bydFIcrKWsg0GcQEwVOOrKqRUM0u+DOyYJg0zNHpHwkqFaSY
IXyU2ySdUfAWhR0MK9j8TrhPYZTcE5o2KOJSLKepMqLSMHXASWYJyxBqoQw5
SgHt8uq4TtWs1IXS0W+yhdCtZ1dBWLN5UhMYMRi43UgHPy3Lv/7Oho/HO+6f
5HnnoT5360A4HGwo7Hh1kf2BcfYHJtiXcQRvNWJ3eCcF5nhrx9uWX9u+a3pP
RTpSNRAM+L58zbnlJvf6q9u3TnBsG+PcKpuiTfgQM5IFVYGFuNaYJdyk5Bz8
4rsfTku5eXXO8WI7ohmY4HV3d/mwcLRIEPKjdMwnU6bs7u7s6g4GfRkl9r89
ceqHd6XwVO28WWmTlmXvz2z2dHY/tKf8UmKKlo/gofOBQGDHwVq8CZfbDYHu
+tH01BcO1Hg5csdRLbol1I+ChdxdCCV17YteLDlPjOAhOjdlxYnUYmduRfvP
1uQgDobp7t3pP5x2/BcP5u3LaAn1+HzYG12s8ios6eTyQf+frmn/06YCbiMt
Dl2igwtmp32Q2tKJCSN2Dt14q1HThIsZgseaZ6WO6STxIYY1fJqfmCNu1hp/
yWvqBe2s8Vc9v6i+V6ZerkhjHDY+RDNsMOo0zcLSl/aTTFqMLhlaHqYmeEap
oWZ5addpU+pygsdyLkV/FC2EVS6FhmjW4LEMBoI30iFG8Ka0LZhiv/cGHKxb
Ornj7TW9rma8AM9R431/nW3x9YjgIXZnX829yni19CrjCbb7r/D8fV6o8RSO
4AUDnV/scj51k3391Y7Hxrq2jXVukW2ySPgQM5IFVQFPfkyJIoJ386oTOaVt
gYC/pyeAWF53wIfEF/D7A35EutAB/5EXdOznLvHJ+I/8JXzSj2iOv7e3J7/c
NuOpgh/chTnkRXPwVgvE3Palt3R1+9e+LdtFi86/fKTW2+3rCfY8f7Bm3P3Z
UgSPI3jVmKQh6un3qy1hGRlJ4MdXUZqyhvZ7Xyo5l5uVxruGZ6dNXHbieKG9
2emZ9dwp/DMcs/C7TRARvWJhxvo95Si3nh5/lx8zMZ+qvH4idx9X6i6fL9Qb
8Hb59nzTeP3irO9PS+HflnzuzNQblucUVLrD/UFPN+bQfsKNvJ3IQguVGIX4
ODEanNQWq5sslGRDPcQp2Qx/iI/QACed0BrxVNc0zQjLRtQImLOwlNgLSb40
5md1B3x9G/Sdpu9zOjTmpJnMgrYGz2CZjc/RUr0q081cC8nSb7qFMLNmnTZP
8MwZDBiJiEzR3jvZcf8k+30T7EsnuXbM7HU2hPHWiV5/5ie2e6/Bvza7Zjw/
M+t4UCB4jrUT7csv7PriqYFgECXuDXQ79j/keGKia/N1zsfHIYKHRMoIE7y4
jCPJJvEdkZmCqsBnHj9bk4PoByIzl87L+N4dxxHf+yKvFVGvYA/Hzzje4he5
E/lRKTyIMz4ujDXQ1/NVQcsfNuYihnYxR/AQnfvF2pxvC2zeLv+6PRSC18kg
eDsO1nBBOD/+T8pUboZgpMoY3h78b8Bf3uC996Uz585KjRC8B058kWsbGAi+
+nnDZdyM6kX4h8bSkEk/X5P72YlWlGkQUy+fVtkx88Q+QwQvGAycqvbc+kg+
/9qZS7nXAP5kQfqj71faXV3IJ1yMVK6Bt98fsFCJlsHHDH2MsKdZiQ/Bk9iT
wO+kWJPmVgaTw7d6AwhzepSqzRDp1BnwDdsweARPHXzTpV7WCZ52eSlpTRI8
Hf3JR/DMGgwYicDsbv6NtvsmO5ZMtC+ZhMS2eLxt6fXB6rww93LjUHOZ4/Hb
7KvH2hGvWzsB/8Lsgzh2hw6c669ve/7fuyuOY0UDA31dTvcLf3BsvNr1+Fjn
1jHOx8e4nhkvZYS69/iMI8kmSQJUBQHzmP1swbX3ZPyYe43J2XelXL0o49n9
FS5PZ39fsNsX4BgTQg8n4rG/h6Kox88l6RFuwWl6kIaB/tDrX9aPXZLJs6aL
uMjYjGcKz9S3uzzd694mp2iPcwSvjqOXeA3eeDnBe35/NWo8mKL5A4INPT2E
bZxhfO7ovGQjn9Lf4+fOowtlDZ337Co9d1aKNEU7aVnOoey2cLi/vNGzAC/P
S0P0D/FedIDkdxvyvyu0IYf09QYRKUWF8vkQ/cUKOW6G7UGuQpYhaoqy6O3t
yS5zzX6u5GLuV9W4n1fDWzlu25h/pq4jFOTMkbzEOUq0ljA7LpBYMTXsaVZi
QPAMTXXxzK5Mmprlmd12LX5ncvimjJ3mCJ7I8DQmjenZaF5k2WBsitYkqdaE
xnI0qwRPp7yUTPSnaFULATT0R0XwBmOK1rTBgJEI/F6UexGvm8iLY+kkOyJ4
943qPPBkX4cNMbyBvt6eqlznU//VtvQy27IrcOxu9Rj7yqvtq39i3/RL38kj
/SE0TPf29/j8OR+5tk10Pna1c+s4xPFcT493yglefMaRZJP4jceaQFXAUQ5z
8v6xxusXZ//LHcd/Mp//RdrUWzfkltS3IzKDCV4PjyAn6mMCwmnhEs+70Ifa
Vu+il86cO0MIl106H++ifXpfrb8n1GTvenhPhWIN3stH6jFLClII3o6DtZgX
ccqFjIJBwh7CMHQ+SFqG/3I34Qvljd5Fu86cJ0XwuDV4n+e0DQz0oxKfKHfd
/sSpc6an4J9FW5DBvRYv9Y8bC974sr6+rSs80Iu+EvX3Yj2cJQHeR/19IXR+
oC/oaO/6NL359u2n+ZfPoNIhmveDacd/sz7v8xwbStkb6pHcKtosWYsPLFSi
ZeH/FVpw1A05FgTP+GL1UaNk93AbJtnDnQWCRyRXLEIzMvRzNuG9whojumrP
gWqxoUEbDG2yYBqsMkORO4VNqRdSsjWbIXjs8tJdF7koxiG1CZ6G/ugI3iBs
sjBksEliDhh2sN83meN1HLvjad4DExwrb7Cvnuw/9fUAfvtJH0oWrDvd9eWu
jpcX2jb/qu2xW9p3zPB8uj5QljHQE0ApUIJQS1n7jtucW0c7Nl/vemKc8+nx
rmfGKyJ48RlHkg3xHJE1BFVBQApoGZYmR9ftTxScfddx8V1teFPD5r1Vbq8/
HO714oAZpkVyRHgJeS7I86dgEIfz/IG+EKZfT++rGb04i/8dB0Sl0MEt6/JS
CvEPq9W3da5/JxLBO3s6Xpu360i9zx9AOtQEb+dn9dzaQEysiFzJvzxFCvIM
L2ISzwRFXlje2LnopdLzCYJ348qcL/Ns+GXeflzalCLHnOeLED373h3ILWn8
L45NeiBr6Sul733XlF3qrG7xdHg6kc7eUC9SibzUaO/Mq3B9lNK0bnfZLWtz
z+d2aqC//3rHcUQU/7rt9KHsNq5cvOcCMq/JSGrQQiVaF77tREKvUamLCcGj
v5ODcoMypqc92lmeopXDQEBMlqPeCEyZHlUM8AZt0HaapQWHetoNrCy0OEVr
JBvWzLKRKVqq/igJnoF2a32KlmpwxAEQxhvBQNQOR+2WCuzOsWyifdkk272j
21+5N9hcjrdO9PbwP0Hb3+MP1ZV0n/y8q+BwsCo/5GqWlISayzzvLHI+dp1j
82jnE2MxtXt2vFMdwYvLOJJ0kuj8eUFVEOEKhiUYChzIaLxpRTb3gwsC4Rm7
NOv1Lxu8vkB4oFeMmCnidUF5lCwCvx//RTd2+Xo+TW+5aVXO2Xdxmufid9ld
Pj/9ra8a3F5ff39vs1MRwUsdtzT75cN1Ph/WrSZ4Lx6qw22Ii5tRMpZCYEQ8
TKRN+FSAC+Ah1lnR5L1HGcFDBM+OnoDObj8XZAudqnKve7v8ptU5l9yd9r07
j583C1NTxAnH35/534+fWvVm2UsHq97+pvH971rf+bbp5SP1G96rmPb06SnL
s8+fmXrOdGHb7BULM3/1UO7y10vTS1z9vSE/75oAGVaUhCeppqsvWonEOJUG
WZAYEbywcvBWj1/KmJJGQEmA+eFbNrwKezmMLGnTPMc0jV5U8zbQNZn3ucpu
BZ9icwrLBE+7vLrpaS86Vt6qpT9qghfWa7fmN1noOMTU7mbA8ARedxdhd5Pt
D4y1Lb7a/dy83ra6MP87s8KP0VKAzvf7vMHKLM87Cx3rLnI9Pt75+Fg+cOd8
apzruQmuFyZIiVH3Hp9xJOkk0fnzgqogSEauDEow5O0Obv+09vrFmYiZXDQn
7SL87t+08fdn7fysztGOyVa4P9gXwpngqVM+DBYMccLVZgCdDHLMqycUCg70
hfr7g7Z233vHW25edQK/bg7vrUhDDO2KhRlrd5fb2zsHBpDO3jZ39/p3KogI
Hp6ifeVIvd+PuQ4ieIpNFi9+VsdPswoNSArYETG8kPAfdzXECS6icCoUCiHy
VtXqufeVknPlU7RH822ovXNr6IIBf0+4N9je5TuU0zb/xeLxy7IvX5DGb4NF
ZPX701IQU0UGXzov48qF6VcuzLgU6ZmNX4zMvzyZ58kXzE6d8MCJt47W+5C2
cK8vINDSUI9gW5Cnm4KEsHH4oMdKJVoWKSIbiXVaF2MEb6TAytI2QDQAjwNG
Hhwcu8OybBJmd0uucj51W7ChkP8ZC5Sgz+vw5x7oqc4Nuer7Oh193R1YvI6Q
uzHUdLr7u13uZ3/t3HCV64lJeN3dszhqh6gd+ut8brxr50QpI9S9x2ccSTaJ
64jMFlQFrLiWBviKcXoC2z+pvfaeDH7TwcVz8Xq8qxamL335TG65u6s7IHKQ
YC/HkUiIZ/BVPyJ7wUBpQ/sj7+CfoOV+4lb4GdarF2Use73U5vb19/UiHoXa
XavL9/CeyIuOfzj9+IQHcOSQJ0LPH6gZL3/R8c5D9f5AgKd2IQZEhhcSLQoJ
vAkzPCGCV9niueflM+fNTCGnaDmC14/IGJecX7CH+arL6z9W5Fi/p+TWR/JG
3Zd1+fx0ZCq6kY/RCcKRusvm4QP+x20vxG+DSbtyESK0FadrPHhuVnoKJNsk
C4O8hQITtVCJ0SMo/o1GgOARgBVSgwq1ezVfQwwADFM4lkxy8DOzyyfZl1zr
evo//ZUncNSuvx8H6ELB7u/esi+/xrZmTNtrd3gObuj+7rWuY2949z/WtmeO
c8tE56NXO7eNcW3jYnfPThBidy9OcO6Y4EAHz8ojeHEZR5JNkgSoClSL5QwC
l8LTFXjvWPNNq3LOn5V6IcfxcDRvbvqU5dkPv12SUexweRDz8iMC0tvbG5LY
ShCxO8xLfIEQ0nCizLH1w8pfPZR/yVye2uF1fefOxPHAJz+tdnr8fRx94oNa
aoKHkr32BbfQjiN449QET5jg7NEoDLOQMoJXcq6c4H3JETzEPKX0PAND3BV5
x9vtb3Z2Z5e6kYu27K1euLN46rZTt206+R+PnUR///bEqSWvlDz8TsXtTxZe
e2/W+bM473Hyk/npN686setwfbvXL/o6yHPIZID09UsZULQkQPA4RKbVYG3U
4MHMskAAYNjCsXQS/m3ZVVNsi65yP3NHoCYXz8qK4Ttf+kf2NZMda8c7Hhnt
3DDG8cgY7u9o56Nj+NfcOdHfrWNc28fx7I5bfTcBCd5k8fwE965JUkY4gheX
cSTZJEmAqoAV19IFun2gvzfQE0wrdt67q+TqRRmIUCGict7sNMT3rl6UPmXF
iTueLNz6Ufmn6Y3pJc6T1a7iOk9RrSev3JlW7DiY1frUJxUzni382Zrca3AY
EL9Y74LZ+D1yl85Ln/H0qc9z2rxdPeH+Xj6c5g8EUfuzuX0b3qtAFOi82Xj2
9sczUyYvz/770YZAIIgo5M7P6iYuwz8cdtn89EvmpZ83M/Wlw3UBvAcCW2ut
jOhvX6i3qs275LUzF3K/R3bJ3YiM8RE8B3om/FwET4F+/KT0IcGxR3+Pyxto
dfobbL66tq6atk70t97W3erqtrf7mhy+z/PaZj9XiAzmo5eIu547M3X04sxN
H1S6vX7JFss1NUhQBhQtCRA8DqoNnoDBgeFlgQDAsAVmd8snOFZMti0d5d2/
HS+R6uvrD+GAT/fXb9oenGJfM8b5yBjHhuudj1xvf+g6x6PXOTePcmwa5do6
2rVtjHMLYnfiurunxzmeHufaOdH13Hjns+Pduya6XpJN0cZnHEk2SRKELUXw
Qr0hHJELhRB1wu8AGeitbPbuTWmdv6N48vIsxH/Onp76r3ek/NP/fHfOjJRR
izN+sTbnjxsL/nPLyb9sPf1fW0//aVPBHzYW/PKhvDFLEENL/efbj//zHcfP
np5y0RzMaqY/Xbjn26ayRk8I88++HsFZiEmGBsL9zY6uZa/hzQ54q+mstH/6
2/GrFmW8cKDGHwghKrj9k5orF2YinvmjGak/mp76v6Yee3pfbY+kQgV+qlg6
5v/pJRKGuGgjIngVzZ0znyv6p//B+1t/iPRPT732noxD2Tb0tcfn71GpxXp5
Lo8+cq9J6edWpyqkn5e+3hBy4DP/qB67JIt79R/+1bMfTDt+/eLM5w/UdPl6
UIqgVAiFhdyH2NL+eAIIHgAAAMQTmN1hgneDbfGVnYe2S+e9me/aNv7Cvvwq
x6PjhPDd+tGOx8a4t45r3zqO/51ZF2J3T47D7O5pPDOLV9+9NNH1/ATnCxNc
HLtTELxEjzAjGmFLETyOGEU4XhATxX5M8xq9HxxvXre7/G9PnPy3tdmjF2dd
Ni8d0aH//dfvzvrzt4L8J5Jj+OAvx75/J/5BrlH3Zd28+sRft51a/Wb5nm8a
T1W3I6rGG4aUi7SLJ5N99nbfE59U3bzqxM0rT/xmfd6NK0/ctin/3e8a0VVE
k9482njrI3lTVmT/cl3uL9fmTlqWjRTyM5xBWgSPJ0tkoUKK9YICme2tb+t+
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
Nauo88Qd/imYa8WZPHFVMNXTZFmjcQns48EbPWb3TLB9NWbBiYTGUdrdEbKW
wUwuKfBGbflVLdGdQxqT3wxXG7lc+A+pG9AWeNZgrkzrk7MUIvLgjQLPHmKG
wFudg7YFl9KPDJyNwEunWBV4/S5/mw160RVrsndHD/2w0Pgv5cGEwDOBwOMQ
l5o/B287SrXNezL97M2jNQFPJNSP0n6cJ+PNyYnhXbW+wxF4vZFvrPHZHmOb
lNmPZws8IavYZn15gfcgFrd6emwayRV+Pzblj0lN3/EI9uOgTf2l9CMD1yfw
xhyjG11b4FlRQeC1g5ppAoHHyayinb+K0UlbZbGERr1EvxoePOF5CwTeqIis
BaokR+ZaktEG14OXHqI1PXjWGhajfOxVtFN2aqtoz1Lg1d/4cKdeGqM3H5k2
4bznK/ozC/z1fvvuKxPKCxru+Zblc0STtcabd4zIrVfpOLvlD3/TVy2ks+PZ
Zt4Ffp6WNj9MYlNvZzDfuWDnTr3TQXSx/RtB75WR9NUMRtYMsxuKvSrwpu7T
6kczry6ICjZ1l03LuTWsM7OTGy+YT3bhn+QdqdV5+0UeUT/a9MQ59cSNyigG
p1AMi6O03Nz5dzxRIN4dd1690XDLokfSb3D4o7RvZZYPZrpArK+Lyjl4n8s1
sXgfPBJy0ja91HFUVnbfPDLlrMzoGwVMJPCcpbuc6FVlhlJiswFpgLYhWq7x
opHWXXbmwFY561PnKvCsdwROzy7fSm56W6YZ1onICClg7T/94vyWLwlRJcEu
V6/WqUbOXoKk3iHKlaL9OtFkdsIX9DAtoF/vpMMY6trIQs0knSNVNqQ2CNlM
3rLkaA5tdqLYaw4QohLkjbDe1WW/Eiso2Npd9i2f3w9H3xTnJsdvnKjac1Zq
dZ48gk55ysy3PHFBmThR0bzzl1m578+rPmVu7vw7nisQL8VI4KVvmZ163OB4
PxgWVmb5cKQKxFe2beXsNxrgPBkXepwp17YYtug1+QuNCzzxVMsHlv/S5JfO
nZ2t8FSDb6sbcYXyARDnomjPEpGrYYP5pB/MViCVFIOfzE5L60kXwxjlF5lb
35RJ8zXiN3sfROWXdB7C/orZiWKvCDx+pf5WHRlrK1gVXWj5+DdNwk/OkrVG
6rU6P90116qtdanMTSTwrDLxoyJX7P7cbEoBmPou9ZT5uXPveLJAEk8BvXif
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
TywtN0duYcp8LriP/AeAUTRbXrbuqbhwRCHqYk/lcSo+Xpi8TgSVZz0PXhg5
+erfehmzU3SqNoZ3dkzB8YsFxiSfJj9YrgSiS4ycqZ8Cjr5zK0/yoZCW7Pck
ZgzzjUnXzGwDCNJYauZvP32/lsQ5R7F0jjafGVYnNuk6fnI+xxx+vrqb45eu
vtoVdQ8e06LSP1EyYPzWJkZ3V9GGS5jKs+f/nHVzVLFEMrSud+wG5BLimcrt
g2f13NFtWXYfRffDRaldtvapauFYxUSKPZVH00rpU7Urz94CLx+5Iav0rZfx
OkVn1cbgzlqKz6lg0T54wd1zgiVLILhE5IxVjRKLL2CcypN7KAxLGp9E1xMd
1WrTmJaambhl9ALvbzBQ1XJE7Yxh5/Hczs3XH+Qju+4QLR0JJmnuDn//008/
qNHhOVFz8JieEQ7HfEIs+vFYb/NPOl9hor6dAICzBD3GYlB0JlrgnbKDamce
buG5M4ghV5FIgTfpmqJouPoTl5C/6dE+8KSP/DFhIT/JaDKLQUeXS0if7b8M
JUKzafytT5h2AgDOFaiUxaDotroQ5PDnieu7nb0nbR5IYrmxClLgzfrI+tqH
NAVe7z3j0oqGsef8uYOl6hImJJMJeeny4zxfdqIY1AXg8oBKWQyKboBPMBbj
kic+vwz67uKYpJ7lDxN+KvdrbRVtGUBNrLR13ItamplDzXFC7ui0sKd8jRKt
uEEBAAAAAI4OGWNcTeCxyXrKseZrI2+WnEFbQt0p03EYCDw30dgNCgAAAADw
cnherNlbtZLAi67NDnDOU+j8Qd2GhPb34FXtBAAAAAA4Ao7KMddG7CPwDNG0
YDPkxKS3hoSiOXiGwFtiJzhxfn733TfvzneeyZc/fvvhj3/dbv/6y+tX332z
+3z7y1+WxPP0dr9C6IrxFf38+LNh6ndvf+XHJrNfqbtATr3+8GW285VIyLrW
TGvi1x+/edUX2uXTlcOufNyiONS1AIATga0ZnY+UA4fw4I2DnUYShm32qgix
wmM2uSUhHsl0pSfw/ESTqzfAyXHmAm8neDop1eViobTr2LsQOjFAZJiThFAL
vYQrV/XKbbKhP1UCd6e8yPtopZg00poZJCIE3kGvBQCcEGJ6mVR7a8/B6+In
KjL0dzHTUjvPNSXk7oNnCbwg0cBOcMKct8D79cfB+D1zsXchdKrJVwKz242G
+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

     "], {{0, 765}, {843, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   BaseStyle->"ImageGraphics",
   ImageSize->{796., Automatic},
   ImageSizeRaw->{843, 765},
   PlotRange->{{0, 843}, {0, 765}}], ";"}]], "Input",
 CellChangeTimes->{3.544709963230126*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["ENCODE CALORIE FACTS AS RULES", "Section",
 CellChangeTimes->{{3.544706157604138*^9, 3.544706162977138*^9}, {
  3.5447064324313393`*^9, 3.544706434447541*^9}, {3.544880417121791*^9, 
  3.544880418985942*^9}, {3.5448832315899444`*^9, 3.5448832317649794`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"calorieFacts", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"Gram", "*", "saturated", "*", "fat"}], "\[Rule]", 
      RowBox[{"9", "*", "Calorie"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Gram", "*", "fat"}], "\[Rule]", 
      RowBox[{"9", "*", "Calorie"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Gram", "*", "sugar"}], "\[Rule]", 
      RowBox[{"4", "*", "Calorie"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Gram", "*", "carbohydrate"}], "\[Rule]", 
      RowBox[{"4", "*", "Calorie"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Gram", "*", "protein"}], "\[Rule]", 
      RowBox[{"4", "*", "Calorie"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Gram", "*", "cholesterol"}], "\[Rule]", 
      RowBox[{"0", "*", "Calorie"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Gram", "*", "fiber"}], "\[Rule]", 
      RowBox[{"0", "*", "Calorie"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Gram", "*", "sodium"}], "\[Rule]", 
      RowBox[{"0", "*", "Calorie"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Milli", "*", "Gram"}], "\[Rule]", 
      RowBox[{"Gram", "*", "0.001"}]}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.544706168865138*^9, 3.544706240576138*^9}, {
  3.5447063081331377`*^9, 3.5447064286599627`*^9}, {3.5447065730193973`*^9, 
  3.5447065741145067`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["APPLY CALORIE FACTS & SUMMARIZE", "Section",
 CellChangeTimes->{{3.5447064490580025`*^9, 3.5447064539204884`*^9}, {
  3.5447066084879436`*^9, 3.544706614792574*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"beefedUpBurgerNutritionFacts", "  ", "/.", "  ", "calorieFacts"}],
    ")"}], "//", "gridRules"}]], "Input",
 CellChangeTimes->{{3.5447064557206683`*^9, 3.5447065120693026`*^9}, 
   3.5447065605831537`*^9, 3.544706621307225*^9, {3.544707661149806*^9, 
   3.544707663436035*^9}, {3.544880441404854*^9, 3.544880442908004*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {"ServingSize", 
     RowBox[{"4", " ", "Ounce"}]},
    {"AmountPerServing", 
     RowBox[{"160", " ", "Calorie"}]},
    {"CaloriesFromFat", 
     RowBox[{"81.`", " ", "Calorie"}]},
    {"SaturatedFat", 
     RowBox[{"36", " ", "Calorie"}]},
    {"Cholesterol", "0"},
    {"Sodium", "0"},
    {"DietaryFiber", "0"},
    {"Sugars", "0"},
    {"TotalFat", 
     RowBox[{"81", " ", "Calorie"}]},
    {"Protein", 
     RowBox[{"84", " ", "Calorie"}]},
    {"TotalCarbohydrate", "0"}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxBackground->{"Columns" -> {
       RGBColor[1, 0.9, 0.8], {
        RGBColor[1, 1, 0.85]}}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.5447064687829742`*^9, 3.5447065129073863`*^9}, {
   3.544706554614557*^9, 3.5447065796560607`*^9}, 3.544706622042299*^9, {
   3.544706927493841*^9, 3.5447069409591875`*^9}, {3.544707664402131*^9, 
   3.5447076833910303`*^9}, 3.5447297065846043`*^9, 3.544731885361677*^9, 
   3.5447320694210815`*^9, 3.5447351909355087`*^9, 3.544878403057501*^9, 
   3.5448832365598927`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["This is just a new object: APPLY IT to our first expression!", \
"Subsection",
 CellChangeTimes->{{3.5447071882191343`*^9, 3.5447071947631345`*^9}, {
  3.5447072345531344`*^9, 3.5447072418801346`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"nflSummary", "  ", "/.", "  ", "beefedUpBurgerNutritionFacts"}], 
  "  ", "/.", "  ", "calorieFacts"}]], "Code",
 CellChangeTimes->{{3.5447071627411346`*^9, 3.5447072458761344`*^9}, {
  3.5447076678454757`*^9, 3.5447076700126925`*^9}, {3.5447080167583637`*^9, 
  3.5447080192946167`*^9}, {3.544880427963713*^9, 3.5448804324600787`*^9}}],

Cell[BoxData[
 RowBox[{"165", " ", "Calorie"}]], "Output",
 CellChangeTimes->{
  3.5447072473351345`*^9, {3.544707670916783*^9, 3.544707683450036*^9}, 
   3.544708029150131*^9, 3.544729577457368*^9, 3.5447297003509808`*^9, {
   3.544731880680209*^9, 3.544731885451686*^9}, 3.5447320695120907`*^9, 
   3.5447346110853434`*^9, 3.5447351909775114`*^9, 3.544877973899315*^9, 
   3.5448784031025057`*^9, 3.544882879234015*^9, 3.5448832393604097`*^9}]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 "but but but -- they said 160 Calorie?  What\[CloseCurlyQuote]s up with ",
 StyleBox["that",
  FontSlant->"Italic"],
 "?"
}], "Subsection",
 CellChangeTimes->{{3.5447072599431343`*^9, 3.544707276768134*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["UH-OH! VERY SUSPECT 160 HERE", "Section",
 CellChangeTimes->{{3.5447044404939537`*^9, 3.5447044488547897`*^9}}],

Cell[BoxData[
 RowBox[{
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
BjnkktIoypkkkEsQo3oZ8S4oKOhdjrdZJ6/PPLI4PCgoKCQsJCjQ1z90zDe7
H1e2IgaEX5pzZvFnYT5DRy1ac6tKqNSrZTWPjkXP+2zytLHfn1x9klYvUFra
LGpxfWrsN19OnvTVmrhH9ZzGgoToRSOjQkN8fMP8/IPCI0aO/XT8mC9/3HS1
sr6h4l7c959PnjJ85tqvN56+/vD+ha0/zJz0+dd7UusbG4tvRS+YNfHThWu2
pFSl1MhrC5N2fz8yPCwgKDgsKGTk6HHjxkz9es25omq+GmktyTi+dOqUzyb/
FJfEkKr0WFY5v4adfPDHZQsnTvt83MSJ4z+bMnH8vBX7rzJqeTj41kN8+tn9
a2bOnTZq4hfzf45LSHtwbsOXM6ZOmjxpyrfbjjyo5cKGHrC3FuFnXVo365NA
j/4DfQLHxdwo4Cn0FovFbDbjO7M1MwfisR+eWTNt8uefjp8wZcqUiRMnfPb5
nEUrT+cV1Um0Og3eCcvhVstbKhm3Dm+ZP3HyhM8mT5gwYfzYCRMnzfnHqiOP
X9ITYmZPHh3mHxAYGjZ89NhxkyZNm735Jq1abDDodHBTcf7NTd/MmTHl84kT
J06Z/NmESRO+3nT6fllLA/o7hUoHJxfZcrxDw2l5NL2WKqBDel7CKkZMXsIq
5oq8hFXMFXkJq5gr8hJHsbeb423WyuofxX0dHOjjM+qz2TNnjA/z9Q4Y9W1c
akGTpLHkxfl/TAj3HjLq65W36gRKg1JYfmP93MBBbr5/G71lSkxacStsbrMo
eFXxP0X4uQ0MmLUyoaS2kXFz50+TxgwP8vMP8PULCAkdP3Xq9GmLl8feq6uv
Z15aO27YUI/+HqP8R82a990/f/pm/qzZC5Ycz21sqH1+en5IwOC/j5y34GzR
OSZcVZJ2cOnE0cND/AKDgiI/nTZ9+syFP2+6UlIjUMsa8m9tnuA7dIjb2JWX
nggQtVZYm3d4+dxxgT5efhEBIyZOnfXVjOmTooL9QkK/+OVAUjUPMaokzWmx
v8wNjfD9cNCgYcHDpy/68ceF8+ZMmfSJv7uXb/AX2+Nf1ojVhu5CxxqYl352
9RcjAjwGDPYNGP3TvmuZDHZZRUVxcXF5RWVNHV+p05rbJNL6zBtb5kREjpsy
86svUZo5dURAgJdX+ORFq4+9rHimMCtMZpNaXJt9JnrepxFBASEjJkyfMXPO
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
cd+O9BrmHjR18YHkopoWkRglkZBXW1LyJCmnRiwR1WceXezn4+0dseBgYmFd
K+o4WK9tEHDyHyUmsYuKanAqK8i7FP3NKB93Ly//EasurrpTUyejau2QirpE
vKnJleTmJaxixOQlrGKuyEtYxVyRl7CKuSIvcRTrxeRK7RtEvDWyutSD8/y8
PN3Dfzj5sAHWmNvMWlFN5pV1c5aO9QvzdPdy8xg1b/mNWr7CbISFZZe2LB4+
zGvwEE+f8JEzvl22fmP0pjXLv4oM8h7q4T9nxSU2HzEYUD0TDyxd+8WIIPdh
/oFjFy1dvnbbwUuZLU0NrEtrxrsPdfvfAfMj/nEy0Tni/ezkwkjfwYOHL1h4
6MWZF4hYqUXE7ItbFoR6uvv6j573/bLorQfOPKpplmqkDbSbWyb7eg32mLji
0nM+rFa2lCduXjA+xDPAM+CzqM8WLVuzbv2KH76ICvD1GbFwzdkXjRKtStyc
tnv97KAR3v0HeodP3/SQYwPeWXu/ChjqNjRq6eGEYm599xFvbtrpldMifAf9
7e9DPIavuZjLR5wSUkwaOVSe8uJy9HejUaDv9+lX3y5fv2nTpphV302ODPQe
GDxmxIq76xNaWqQ6Pcxj3oxdPC7A28t7xJRvf1yJYqvomA2rf/lp4aJ5X228
W90sEOTf2jwpwM/DPXjSnO+XR2/edzGrriyrOvtk9PxZsxcvW7c+OmZTzLbN
McsXTB3h7xs54YeNlxn3S1UyDRXwJhV1Ad5UAR0yyyWlUX1h1hU55JLSKMqZ
JJBLEKN6FfHWInRab3O8tVBj5pklY0ZERk785VwmB9aascQHtRBmJ7w4v+67
KWMjg8M+/37j7Wqh0tRmMqqayjP2/DR/clRkWHBIcMjICVOX7DtxYvs/P/8k
ImLUd9tuFouUBotJJ4ebcpgPDq9DwWEkNsdw+PhZy84U1dSU3dw2Kyo8zP2T
f05ddj7VYVUTA8ylnfvhs5Eh4RN/XHWKdaNAK1WZzQaYU5i07dsvPgkOHh4S
+smnM384yihrVUPN7Adx80eNCI+ave3mC4FSZzbqkUZ27qlf5nw1PuSTyKDI
yPDw8Mjh4+b9EnufXStSG80WnZz77NjWHz+dNNIn6JOJ82MzmyXaNpNeVpl3
6JuxEWHhn609kVjJ5ZjadJ0DxxYdIsiN3zZv4icBnr6Rw6fuuPJMhOicephN
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
l/7y84qDLxpqW/KvHI/ZklTGrEjYsvvglRd1fGWbRc6tS9u2ZE9aTWNTZd6Z
TbHJrNqmpqqsE7u3bj2z92JOlUSBA29ZE+vciugTuawmCFZAomYR+2bBnV+P
x53LYxSdj449e7+ghPki/uDxnMpGMaJAVCpI2FiZlXB0x2lGebNE1FRZXSuA
NAajUaPWGYztS3WbVFDd4/gdq1YvXf7Pb+d/Pmb09IXfHn184lkrHwfeZp2y
Of/h4a2/ZrPrm2pKruzbHXM47cS9ioqC5zeOHM0oaRRBCoVCpaWWNaHoz6D2
iHf+S1p3kyv//FfTH/TeQ0fgM+USlojDkL9IRLJuwjm3xXmp0uNxqiHuyr/8
l+Y/P1C8P8iGsfG96mMP1ccOpxTwJsaXFym/kckgl5RGUc4kgVzCGNXr5QTp
vZhcaTYoefX5N/dtjz16LSXzSfaj5BsX4o7efV7F5zfVpu59eGrtrhPXHiRd
v3zi8NmHtXXVtVc27zhwMVcIYYt1m+V1Nfc2zZ/z1brEyiauMD/+eMzO++Xs
yps79x6If1bLV7SZZdyaR1tX7kmt5goFjamnduw9c//e41uHNyxdEn18Z3xu
nUSBgWSLVs59cfHA7j0nktMyn6Y9fHDn4vGLx45fvJxVXlR0em3smeT0h9d3
rNp0MCE540lOTvaL/JcsRgkj6+qxXUcv30u+fTLu5M2nlUKZXFxZ3ICt/m1p
wxcisZhNOljCa25uqi/MT41dsvHAjfQSbotCr7PGxk16iMO+dWpn7Ik79xIu
xh06e+1ZbV5JOePOnl9i9ly+n5H9NCf3BbNGrNZTgW+K/nCyAu/Q0LC8PJpW
28cmV+JZJRBqKT5fEqp8CpVnydPvw9hkyRCNf5A6KFzpHYR8MEjdf4j2/UHq
D91RgI1llfQfou7vhvQbhOAfavEPFf0GqahUE7LxElYxV+QlrGKuyEtYxVyR
lziKvdUCOmajXimspqUc27J988ZN23buu51TwoO0RqPOoGzhFOfGx+7dun5L
3LnEymYpIm3NT7r/KKccVukxXhMia8m/fvF6bosUViE1+dl37jNaOTza/QeP
8muEMArO1TJh6e34ZBZPrtKpOYXPzu/et+1w3OZV0bt2Xbh093mdXGmbXGlU
cqvpCQf3bdsUE7Nxx+5jCfEpLxpahJC4PuvOwzRm3sNrx7Zvitm+bfvm6E0b
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
EJWE15PrcuX0GafQpFifM9/t/eyUby2NXu536tN1L+/e9tW1tMb6LIfPPtr3
+dWiFkq56ye7X//qfEROfkXI/pDjb73/yQEHnwT/M1+99eaH+/2qmIB62m4g
oKgnPTE6LigkpbJuVI7o5t85Y8TbevfuXRQKGY99vJ/o5CwKIKRMtJ6eSVKP
xcAxlnMTtL6LpH4Cga9Blk37RyLHG6/hrIe2a5GLIjbTAuxa5KKIzQR5Tfdj
rsQi3hQKZdeuXQTwJuRZy7heI+cPdre1Uls76nJvhIcmZ6ZFuZw7/PN33/x2
8GxIMU2ITIZ9USw8eCvkp62b1r53/AOXjBKOVMhnxZ/95d0du88kt41wxjpa
Km+GOZ8/e/zHn7769N2t7/zhVtHVled+6IOdH3rk9fXSW+w//fiNbd9/ddSv
ZHCAVhd+4oO3jnr6+rhd/mzPD16FPeIZmS3jGpBZHXnyvT1f2/kEB7sff2vX
h1eS24alWvRmQQmxO1prcqKdjx35+dN3Nr/+q31hd1d5yOnPXt64Y+t3Dmlk
cu61bz557xu3W+0tlIDv/v73n6x8guLCD+69+M7ynXu//PXolYvHD/zw5XdH
r+YMCeXTrOq1apjDYfPYbJ5EqtDfqwLUBLz37t05Cbzrv/ziO3p3OV6YK58a
cdhdJPVQbRZYUwoHBsxBUm98Vi9drTZS1U+8XLJCuWUHRCvDSC0XbtciN9Ny
7FrkoojNtAC7FrkoYjPJELdtPrvgJGV8UxNRXEkInsSgBFhNmVGRsanZwdYH
fv3lmw+//P6b70/75HXxFVoT/kSB91BN6E9bN69978j7jsm5QzzWcHvAkS/f
3PHG+eSWXnp7fVV2qr/D2fMXf/7t528+2P72QdeSrq5Cr2Of7PqHd2FfX2+L
/Wcf793y7VeHfYpGx5iDpe4/vvnVoX/t//Wnd/adTKIy5DMTO/RqaXepz/dv
vLv/6Knjx37Y+e6B8GoGH7ltUMlBRndDdWFqsMPxowe//2Drnl9sc7u7ysLO
YMB723dXM8jNeS7fffze1/aFDQ23vL5/+53frD18I/x/3HZqz/M79n594KTj
NTcvV0fXgKhqlhSZN437njIJvHdRKM0arJ3gBPCWiVvw8535VL+Qp0jqNQNS
FR9srplNUr90FWzE2/MBb8AIvHH7B2jx/VV9FLsWuShiMy3ArkUuithMMlFc
SYiZybhBC3P6ahNjE3NLs+KsfzvgHp8YnpPkf+mPw645NKHc1CJErwZoFf7f
bd6wctenOw44uCcVFqS6H/x0z/Y3v/PNbigNOPL5Jx/tt4/Lr2isyY50/mn3
W/vdcju6c90P79v5kXspvbe30eaj97a99NlH/3IrGGEJBV3Jdt/t2LzhtY2b
3zoYUDss1cxEwON6Ja8r1/aLHbt37dmx6423j4bUDoGI/raG19sWeeqbjz/8
2Sq8KCft+m+73/qndUZXZ2noyX+8tG7bts8ccxooxS7fvff629/ZBoZ5HXp/
696fLvpExMWdeMvmw9U73v6Xk19qfkFxUUllXTdPpn6o/id3Uk12UyitGo3O
fAh0ntivhJMk9UYCnTbRaPNMkvrpDQnXYPknU8WYRHElLn9HfjJVVxP8TRjF
0iTrvYnOadYxNN8Qeo6xKMRmWsCiiM20ALs4WdSC2wkSBDqE4EXGNQpBZ3Fk
kNfNPvpAV777qYMnbKyP29mdPnrOKbaGC6pMkWi9GqRVBX+7c+Mr615ev2nb
lp17du7YsmXPl6dc83v7B5sjj3zw1tvfWQcnxIRkeJ09+ckbf//eLrulPfva
kX1//8ippLOH1nDp/Xe3vfTpx/vd8ka5ECJuvenz7esb129+93xMHQfS3JXX
oZcLe1Kvfr/tlbVrN+49EVHFArEehFrRQFfC+U/f3PvleZ/4oGsXP3nzrS8u
pbW0l4Wf/nj7y5ve+Mw2i9zVmX/p2zc3bdrz94+/+faN19787kx8NaWnxLvQ
64fP9+3YtnP3G2/t++yATXQNA1Q9XMB7qrhyF5lsinhbenHlg+ry2maS1GMN
CZXGhoTwpi3Qpq13SOr/vFyxZRtRXGlRujysFBcUTVbjTj2jWn3oyVAGdFei
D/QAND7ffQzNPVQB9paDY60gpwsUtsyeXIDjDbGQEjYL0MWtY+aoix/H7lNc
CQqoKoJAhxA8iV6t4HQ2lhY180C5UiZoLU0J8b521dHDKzK/jyWZatE9rlMK
BxpSAq97u3t4env7+vq4e7r7xxT3MQCtBpEwG5NC/bzcPcNDQ27ERMZHx/rH
5HeOjNBvZYX4hJb38oUCRnl4ZIBbdFRyea9IAkO8jurkE+/v3fuVfRqVL9fO
kU+tVUEDzQUhqCGv2Bo6H9EajG7IAVZrRmiwl5tnWERYXHTc9ej8ltHRIUp+
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
h7SAjJoRdSO8rJdKq/I69Y1nfGVGhNe1wLiAq6fvRdzMptAGa0sqGwaUsHb1
28bvgDfle8AbUTLs5zNz630RkM6k4ugU4pZr//qefsfrzgC8d7vrt+/T/td1
aLrHVof4rM7EgbeoW93nB0b8mQDeOzYZeOtw4O3+HuyTD8wNgcrVT56teLm9
MLlOaRTpTMraxZU24L1Wqgn+tW/QqXnshoIQv7QeyjhfKhMKhApQg6p4tOyQ
gOvnT104fc7rRmQ5W6iCJKPt6QGXPK56X/j677fSmtiCyZnZobzMyvr6/KSM
dolQKhtqrcgompjh1GYlXPfwun3h5K3rly6HJCQEBdy64e1fzJRAhiXRFqtV
h4knRsuT0gubORIxb7ja369kkisUjTZl343tnuKOyQWtpak3z3l5e56/EBAT
FxJ82/uKf/EQd256pjqqOuKyx8VbIbe9YopLKUpYRwa+SbIXspiMqFIqlChl
HFbRua8+vxhXlhd348r14KuXLgYH+eRWPaitKu2ZE4Bao2WtdoKLqSbkAJ2t
INeRjCIGxzdC335INM3bttZkdodINSE673kBk90KEe3ZnSnAebvlYxHK9C/R
t95Clg2v3LRUE9d30Dv3FRwqIKc4RAmbc8h1SqO2uDPXUVxJ5HjTaLR1FFda
rWYtIBwpv3f92hW/uJyK5k6mSCUV8hrD7yTmtg50z48NUmvjAmLbGMym+zER
qY29PQMFgR7eyXVs3sjUeH9CWE5ZaVpwaK1wXiilVhXHZI6OjJZGh/vFNfRS
B/qayv0vB+W39PZ0FgeG1XHF8FK+CWrR0OaYZWl3M6qoQgiS8/rTryW2zEvU
6rn+ouSA6umxNt5UZVKYf1RNR1tbpHdQakV/Z9+DgPCS+qbCSM+IsKvJ3Z29
vflhvgFxzUIlRgJvkuyKLCZMMtKcfPbrMz5lI5Pj7JpQb5+A2OT4ouLS8sqG
2hb2BI1CGxcDqJkcoEPy2rtiP+JdrCLM/Are445uc3f44spde5Dt+9HfXQen
ewAZ89mduThdiBsD5h6H39yPbV9BvZdaXLnNFXN9R3chHuTSQCXNQUrYnIDX
bhVzRF77UWzt4kqjHhkaGvroo4/WzPG2Wkx6FJQJ+bNTE5SqtLDLXrE17VRa
vmdM3cC0QvfQBMpmauLuZNTU378flT7El8nF3KrQlJIa5hydNdwTH5lTXJwR
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
vUYNt9Uxnt995OXuHZNajfnhSkjY0ZTlefxRbpsAlonLEwMuOD04f+55fkZu
5qMTF24GVwogzfD6SxQoDAP0Grm4MS/4/s1bXr7eDn/tOnot1TNbzIU1ep1G
xqmIu7tv66FLsdUNNeUx7s6nr97x9AoJDX8RER2bQi/Py8krY0uk2oF9754B
OgwGNUDHAmgJKxgxaT98czrAKwYr/NHlkxWjrLvzTIY1x9sGHW2jmDgL9UoE
WcWGWTlkNSZFS3zBzJGWOIIN5wAdhaS9OOre7g2HHE+ePX/mSlhmeVU97c71
4KwaMaR6rRY3ViXdP+FT1M4RCUpjnnrey6ioCvAMjy9sEgqiymnuuw8ePOp8
2s3V9brn0/SKqrTnIY/u+z94EBiajFGoJXXVaVfcQ9NqANSYzKrXapCOhtwn
np53nr4MT61jC2WGLBK5oC33/vH7uW08AOblRASevJDi7lnHae5gJ9x96BtS
gstCgQLRoEX41aHntq7b7XjFzenv+Uv/2HbL4WF+aRuEilsZwec2bNt3PqKU
JVWqlFI+q5XVTqsqT4gM9w0NDbh76cjGjQfuJ5WKBv5jTs8Anc4cb7yrCZXj
TVa+pFSK0Mmf/CKwNRv03YZ8N97Yvnv4I96jxyHf/Crffw2uKgT5dDIbk5BK
UcYkAV+CKDW8Od4yQTs9MujKrezyqnYOhw+hEJuZf9U9OLteBGtea8G2hlRv
x6vxjLLKylSf+7cfZ1eU+3sGRWVXsYH00go/pzO34pKzihmFJTk5tR0dqWHh
D+/6PXzsH5jUxBIpMcc7/erl8Ix6QI473jq1jFmd9fTOQ9+4/MKq5qYOLh+U
qvD2KHJBe+6DEw+y2wUgImREPznlHHTWPau86FVFiKv7vZBKIRXxpkBA6FGA
mxX04NbNy6eObV0yc479SpetF6KyKutLUz2Pbtl3+G5aQR1XYmhfooD4Dbmh
qeGPvX1fJD+75Xb9+mWXk1d809sA9K3+QJ2gBuhYGC1hBSMm7YdaG8Tuo/ok
+L9psrE2yMh3HPtuSo736HEKqx/QP51hRmavWTmkNCZFaxaCmSMtcQQbIscb
+yGvMqmrCZ7jjYpaGLHBV+/mcwRyw4sol5Vz7UpQRiUPUupeK2FxdZb3+ZMn
L58/e/WaV3hpQ1Nj4LXLZy6F5zc0NrUXxT9yPXP+4rkLFy+6+dPqW1LDnj28
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
KZNGxiuoHG+CQKuU8aqLCzLTslNTc7KysnHkFRTUtAEKdb8+nF6rUUi4XGaT
RKXsv78zfo0S4tcVFuZm52RnY5umJmdl5BRWsQD0Q/xL06HXqmRibl2bQMKC
NSrtkCz1GjnYUZKfmfEyr6yGg3nBvda0GrmAWVmQn56VnZWemV/ZyEFU2gEK
DjFj8qvp9NzCV8V17aBCZQJjJdRRnZeWW90BKjXvZRqDrasLMjIyU2m1bIlM
PWAx5HCjy/GmcrwthJawghGT9l02FxQBLVnghZXo+AmKkTYDjn1/vxxvK2t0
7M/wtitgIw0UMshvTIqWMqYlGrOQ397tn+M9vQV4AJzWdYr38Vbhjjfdzs4e
c7ypiPfnhE7KrY102LB88cxZc2bMsrezt8Mwb/GqU155HFDZnyeogcUN0Y+f
PPWhiSWK/jfVq2WC4miPNcsXzJxpj+04w3aq/Zylq/beya6TDOisDyP0Wphd
HXPv5P3EsvAG/UBS9oJK1JHvsXnt6j83nfWLeAUhqp4lHSJqCnffuWK+nZ2t
rf2sRdscHxexQXn/v0lQTkvCsc0bV248dehGJI0HqPq7qje0CqQ5P+bR5Xsv
8hsgRf/tsoeAGuEWhZz4e/nabbvuJhS1S+Sf2PG2tbWj0cpUKq2hq8lmY463
4Td+1y2P/67Hfp73OuX0PW6nG/5G1t8S/rseJ+93qZ+Pl0+5+edSijKmWfB9
p815DLAhHby0HLa2kY82uNZff4s9EENWidHT7n0MW9kgVjb9LmHPCsN4nZ6l
r8YhYybKdt0Q1uYDfDr5jWkuSlHGJAFf4ijFNdHxpk2fPlgfbwqfAlq4vfTJ
mikTvv7f/3vEiFFfT5j4w8SJP02dscjhXiZLjKplkIjLYnI4PJEQRBC1VqNR
i+uLIk9v33/8VFQjC+4/fq1XwexMr8MTvxn5/42wGjPO+utR/3fkiK/HzfjX
M6MZcy+1SkgsYDNZbB4glWt1OjyIrpJCgASUyxEYgUC5Rq3WSAFALBaLhGIY
gOQqQ4aHTqtGAB6Xw+YIxIBci5OqUaUMFoGIUq1WKyAxjGq0WrVcVPEy6My/
f+y+l3AlH2qD+qSH6PVaFQphO4tFIgCCYJVWrZY25AdunvTjpOnLTwfF1SAy
dbd5VGgzLcp5za82Y74ZN26ctY31z3O2P0gsaYXlCkxsrRIFeWwOk80XiCGl
FjNmtf/aqZO/n7pp5XGvVKZQjvMCcV4SAFTgAmtVCAgAQjEEQKgcxlTk1+Un
+nh4xtAaYaVaq5UBYi6Xw2KxuVwBgChxyTHryHCtWRwuD1Bo+sbFdRqUXRp+
dsn3E2Ys3+yZRGvl8mEIFEtkqAyGIEChVWs0qASQCEViQKpQ4dk+elwIGBRL
1SqlFLM2JMX+VTUKCBMRAWRKJZ6go0MRGJAAMtVg8XPc8XZxsbWfQaOXqvB2
gsbiymTK8SYnX1IqRZBvZNzxTgPPLYLHWssMjvebzvMbPrYVPtey/6W3nXbM
8f76R9mh+8K6AoBvAcY0F6UoY5KAL3GUMqWdYKfjPZ1yvD8ztFJ2RcjOJTN/
+mHS5N9Wbz9z5879h16eXoEpjFbMBWwuTI4M8H0aEBjw7Hncy+wmDl/IyfM5
s9l+0sw//rn8vKAF8zb7c71VCD/P12Xujz/brdp27NJZp22rtsz9ZcqUmdue
5LUL+MzqlBehAT5Pn/rFZZSwJVKVDBG1FGfEhkcXFL5MSE1IqOR2NDdmv3ge
EhQU4BMQHRqbX9YqQJVKkFefGR8UGOjvHxoRV9IuhiENp7itJDkkOqW0qqKa
ERuaVNDGF3NqX7pvWzpz8vTZu87vfJiUVC1Bu7Jm9JijCrArcmOCA3wD/H1D
o+NSqtuZrOboq0fmT5oyb8WhoJxXYmV3jo1Wym8IOb157pTJ8zcfd79+/YzT
1jm281YfvBNf08FSIsKOstyYp08DnwSEhESmVnNhSUfts90zZ8+Yv2vzOb98
Fh+BOBV5OK+g0Odxpe1CzJttz0+IifQPjo+OL8hPjMrIZ7wqY0SHRhbWc6QK
Ka+jIDY6MCjI3z8gKCA0NrOai8iVCL+lID4wIAB7MSCW0dAGKFCNvvOnhF4J
sHIfOv499cdpa/+7nFqQWUqPy0qJC4vIzUuLT0hMqucx25oLnz8P8fUPfJFW
VMmBBAolDLfnYdbOqKgqSU+KjYjLqm+qb6DHhoVFJEdkvqrhIQgCVeW8jAqP
orfy5ZrB+nhjjvf0WbNodAZVXGkBtIQVjJi077K5oAhoTAX3TpVZG1qaDG9x
5cixsvGT4YsBYCvGyAKMSdFSxrREY5owQKcz1YQqrvzc0EpZlaE7F8+a9KPt
tIXrd5+77+3j99Q7ML6oidVR/sz139Xb/jvvdsHln0W7VizZccEvs6DQ67/F
k7/7buJ3P/++0z25XiTvJ3VEr5Ly8oJOzZ08ZbmzT2puDs3L2Wvn/Fm/Tl5z
O4meF+t+bOPqnafdTx1ft2zprssR9KrSppLQu8eWz5r356blSzZs2O//3PfC
4VV2dtPt7O3t7WbO+WPjrqsvKmsrUp4cX7Nu54mTrie3/LF0y8mIrAL2y/Np
Hn8u+m3x35u27Vs3e/6CVVdCcrJ8zm+e8531+Alf/zD1l+W7DgW/4iLGLA6t
Em7NfX550+LZttOmz5g6ada8eSuPnPGODjq2bOHPE7//duLCPZdCW0VIp+Ot
k/AaXxxdM2+q7T+3MiqZYgmruTbK64nvi9RiFru5rTTd02HHhs0ubh7uDv/8
uckhsKKppiZi1+zZMxcd2nEprLixvizuxpaVc6ZPt50xY8binadeFJZVxJzd
sGzeDz/PmbNo49rl64/d9vHxvrh82UrHwJz62mI/1x3Ltjqccrt546LLvr9+
//PQ7ZziMnrQ6U3rNx66dP3MnrVrtjg/TK8rEutkBoX0aqiV8WT7osk//vLz
5Jl/X7rkdM5l5b//Lpo275+/l/yxfqNTSMQT95MbZ8ycZTt92swFq7fdTrqf
21JZnez23+LZ8//au3HZ/Fm2M1fsPu507J8Fc6b9OM1+0b9O3jm1TVVhl3b8
tXbdpagKoWzA3KBOx9vOjlZIFVeSny8plSJG1RUd4NOEVSHAisnIKLyJ9zAX
V46yQWwmyS4/g5roAI/0xjQnpShjkoAvQZQyZYAOPjKeRqeKKz8/tFJ2Zdh/
y+ZM/eGHn3761dZ+3oIFCxcu++vIg/iKqhS3A6tmr95+xMlp/5/z/l64YN2R
hyVVDfTAS1vmTpm7ZqdHDK0VHjDinR9wZsHUX2cu33TwjPOhrSvWz/tlmt3c
/zwTom8fWDR3xsKtzldPndi1cN7ylc5P/aJSIp9eP7Jskt28XRfuP4/LiPP4
97c5c5f95xEQHB4dEvQ8LCIypbA42e/EBvuJ8zceP3P5xJZFc+cv3XfJtyj6
dNK9v2bOXbDukKury/41035dftLvZVb6w4N/zLO3XbjX7aB3WkYTIDfmZ2hR
YWX0+X9m/TJvj+uNp9Gexx+dXLb0j7mb3L29rzgssZ/z+1/Hw/Pq4e7aSo2A
Ve2/bfWcWb85ptTwFLrXWpVC2NbY2M7hw6BA2F5REBcW4Of98M75favnL150
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
ds6Kv3bdDK9isltL/HetXX/wfEi9AOmd04wTNJW9uLDjryWzZs2cOXPWwr/2
nI9+1cBH2OzazKALh/5cvfWwo9NFpwN/rd9xwDutuDTa+e+1aze5ON6NesVm
ttTGuh1ZNw+jnL9ki3tQaXNrY9bN3euW2s9avfukXz0fQqWi3NArm9euuxSW
w2LWF4ae3vz3onlzZs2aPee31ZtO+eU3tTNLI67vXb9+x6GTJ08c2O58yyuj
js6RS7vajahlIlrklXVr/r3gX1DXkBN6fZfD378vX+UYWsaWqtUorzbxkeOy
xbNnzJq1ZKfjleSylx28lra0myc2r912K6empirm9OZ/txx+UlhRnOK7c82h
eYu2nvLOq62JvLvv77//9kgqE8kHbHLYTx/vlZuoHG+y8iWlUsRI/qQDglxh
uQfwy88fIeJtg0/k+WExmJYKdhRZgDHNSSnKmCTgSxClTIp4y6kcb4JAp1ZB
3I7W1pZmDI2NDdijvqGpmSOC5QqpiIO93NDU1NjW0sRksYSIWqPVaeQgvx27
tLmdByOwmNfe0trKBhBAqe2ejqPHHGxI0NbayhSC8r6zHjFXViZmtzY31NfX
N7YxhVKVWqfSqCAxv6O1jQ2gKuxqvG2gmNXa3Fhf31DX2NLYxuUCco0Gb4zH
ZTY3YKRNzR1CGHP29DKBTNje1sbiSxTYm4rX0dbOA+RqzHcXstowVRoamtsx
HuqeTHS8l56Q3drYWF+HKdraxhJjSmnUcgmzrY3NAxVvTfjRadTYZu0tONuG
hqZ2tlCm1uhea7QqTEXMPthWTUwmxpjJEsEoCnHa2lo7OGwR3hRRo5GJuO24
GI3NTBGs0qgxwZhtLQ2NrR1ciQIzpk4jBQQYMR+QqjVqJcxntjdhnOowXi1t
XAD7yaKRQwJma31LW2NTc2MbRwRh6ul7hoYaTd3e1sGTyJRKKShgctqwfxAO
Roq3ItRpUJDXglkbswSTJ0ZVKD5aE8EUausQyBQKBfaP397BEsvkKIKZgN3U
0sEVY6+DQvw9wYcHm3j0VsSbyvEmNy1hBSMmrembGyLelbfBKT+iXYHu4cvx
Hq/4cjz6yybwVQbAL7UAY1K0lDEt05gm5HijeDtBKuJtFtDp9brXg42Ht3CY
Nhr+Q5l0/TsM334fjJ6uJjQ6leNNfr6kVIoQyZ90gF8IVgaASyYjVmOHP+I9
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
uPCoqNDbfvdj00nz83MFKbkFeVlZOdlRMSVtU0LO6mz5w9DGhYWl2b6ixLjo
iMgQv4CQ+zFpVYNzcyNZURGhwWGRsfdDomsXBLDe6k+NXDzeXJQYHh4afO/y
1eTuacbifM3Nc5du+oSEx+cUVnZTqW05cdFx0Y/u33uY3zwiUFi1Cyoui5J+
+dip2wHBd+7dj37SOrfCotVlx4aHRYSHnjgefd23jLbIYI1Vh/oGRYc9DAx9
lFIxxuFwyQ0lyXHRD8MjIyJi7z+MbZpcWZkdyAjyC4oM97t67OSd6LxpxoRx
DcHcoYd4s+WPAu6FB/qH3n+QUDe7srowmF2bFnT1YtCjwICrl6Mqu5flKtNq
9GpgkVKeEB13725EZOj1W/djc8lCUG2+avRKOYSotXq9TgNzZ8mFj+IKpvgA
hpyVQm5f3KPM2iGRWG4E0fc8NrCoZaC/uSAovp+1yuP2lWSnPB0a63uSlB4R
nVc1jF5gq21x/nm9q1KlqW+tgoO+2zHBYX6+QQ9D79+58zC3aXJqvPlpXHQ0
eoE9CHzYNLUgErJXmgvyn+a0tBWnPAz0Dwz09QtK755anaOV+Vy88qf/uRQY
kVJcVZaXn/ckr62/qyYpMT7i0aPgoIjGYbYYsfxHxqAEmT3lMQG3H0SE3zr1
9Y34ajKdlBiWF3Evv627uyE3Le5xfGTUo4ScsoGh5shLp47fyKkkC1Zka2r9
2iswK+NtA97bXUDHmlHQTZaSZ8Xezrj69QZXrucVxCXz8wbSWa9I/MmhgMuN
sntfIB8dhN/e/3oY7137kXcPQn//hSy/XDY1CprU3V7pTK+6Qghn7oBxcbIo
DxlvMpnsgcbbqNUqhXzm6MjUzPToEoiYgDfCY7XdvXb72o2ggJCIyIjQsODw
/Jq2itSAExf8oiMj7187fuVxyegCaYpaHx4YWzM6zeaxZ7oKQ+4V0sYWWCsL
1JHhEVJFQsCN6yfPfX/nYVRUpM+V09GNlP6agrCQejp5bDT/SXxEWVp239Qo
LTm8pGWYBZukJihMHqhMuJc3Psk2gTANwB8rfJSX3zW/MNBR/SQx9r7v1e9P
hbXSlhbE3KH60oTY3Oy8koKyxpKE0MelveM06pOQmKy28S6uGtKatSdakDNZ
EPvoaenE6vxic9TDkCcNyZ3LfBkMC2abigtS4yN9L1/yDSimTy4UpxaUFWbn
52dFxRT0TIt5jMXqiOiOsdHBiojjJ25FhsXE3Djue/7bi2Hp3X11j0Lu+gTF
JpW19jSNigCljbfWqqDZ4Y7c5Ccxwfcu/un77D761GTDA/+Uyu6xKaGYuTrf
+CTgxElfFMbfv/LtpcjCCRFkIXrlLGZ3qs/F+7VUGm2iNiE5rnpyfmS4Kfdp
Skyo/8l/O3n+WHAVhT7dl3np0t2Q2IyM0p5hGoOzRE7wv/XNSZ/j18NQ5O13
6URgTlNTRdLD9O7x6Zmx5oSAh4/yp5ZG9WuIEWOjWfSigPsZQxOz02Okp8FB
9WOjw9XpjfGPohO6Jki0zphHuSX9Ihl214PeQ8h40+01FXlPnqZERdw5e/FO
cNGSAFpXcusUkISxONpXlZaeX0JlSk10uAHmr9ZFpmTWj0skyjX56igl41Z6
TXdHZap/Lo3JFQspVZlPkrr62+ISUx8m5LVMiyQ85tBTv5TmRaEccyICCjoK
Uu4FF4al9E3OLi8vTbYPj6+wFwZqKp+kxgf5Xrt6IaF3nLHM43WWlKbEJEY8
Tkhvn5qkUesj/NPbhod7qwK+j795LXdgYpnJXKnPyXsSk/wo2Pf8rTD00r17
7ph/LmWGb1qgUacQTTVlh8eUjkxM0Aee3nuQUk4aH3kcWhx+63FZRuj5C9ce
REdH3Lt17XZg6eBoTXpJZtX8PE+Nou5XE4Jr1XgfeoUabzvGe2M6QcqzY+8h
G9dtweHbCLy3nIzp3sFKd+OS+cHtxPDZ1uPOTUlOwLF62dnfIQcPqEzY+9Vq
vFHUvV/148+RtDrZ0jAgHQb47laNe2cSbQlnvqHO9FDj7VHJeEzjq9Oq1Vqt
RmXVHKPAuzXoVtCDR2lJecUFxaVNfaPLy/TK5MCTd54UlFTWNFS2jU+L+AOz
5KpH4aVkNiCXS8caC4IjO5l8uU6nkogZ0/SSwPu3Tl32CU7ILSopq29oIi8s
DreUR8T3MBeYC9WZT6JzM3Nb6XTak0flrRjvi4nGVTJuT2nyvfwZOluDzsMg
F622pTzOL+ql9pdmpKXlpKekPLh6LqiGNjch4vTXFSfG5T7JKMxqmqYN5oUn
5hdlJUVkt1EZUti4ZqMktbBosiYrKaWorbMqIjStsneeLtIiCkg4Vp+ckJxZ
kBcbdOX23czRiYWK1IKS3KdZ2emR0SWddCFjaTTNP6J1iNxe9ODk7biC/OLa
mqKK+tqG/gk2c2myr6EoOeTMuZshj5IbZ8VyrWU0BFzpKXsSn56dmZ5w58Sl
xDryxFhzRHgtZYovX9NCktnq5Hsn7qAjVVVXVdZT5iVKa+AfzGZ2ZgVeSR5d
YQlYvdm5icXdgy2Vmck5aFdxN7786tLXNzL7FhjMmba6wqigGyfP3kkoaRsf
644KDrgUnOabWFFQXNZY39RDpraXhQQ3znIkoHisOiMprmhicRBZk6OIWStZ
Hc+6GVMzz5OBgvnaRP+CgdH+mqKWtKeJGTTmPGMkPTq7qJUJIthdkAriUqrT
HqeERj/NyM+M8b18627mOA80LRRF3XL2Iqk6KzElKjYjt3WFI7NqZpRCbn/8
o4yaIYFIrpfMj7XF3S/splC68u8/bl9d5nDaS7JTsodGe5/EJUY8TK8ic3mr
y22R/vk9ZsbbIJcy67MzAqK64opXBVKlRivncpnMuZasJ09SCnJT4gOuXQpr
HVuc4XO7SgrSwsIeJKaWU0UiDpOacTu5oYfc1xR0p/z+/W4mB4RBbnNhUdKD
sPuhAb6RBaVlVTXVtT10kdSsd0fvLBjDpRkhqf0MIXrzWR+TmlNOGh1OjSqL
9Y0rTPL77nZYVl5RdVVVXfvg9NJMeVphVu0iU6TZBojt2szA+/Bhu+DK7Syg
gz01pzHZNC+3S+y9DrC5Q+sw2/rUndTEHpm/gs0yYdwyP28knfXc4z5j5ySQ
RQWHK03Y28x7vzLGez+yez/83ifKi1EQfUgmQu/+vN2Z3nGFEM7cAePiZ1Ee
ZDWhqpQearxdmQHmLTVHBJc2khYXQEgigxRKNSxlN2XH3ouq7ujqG2otaSFN
CkTU2bHG6PCiEaZUpZYtDZVH3U3uGRqZoJNqKivrGwoSIgLCHoY+bejp6evr
KisizS1QWooj4/pQ4D1TkZ4alZ2V2zI9QX0Sml7dsyBV6oxmxrsi9lZKdytl
gcFYnRsbqYqNSSlvHx4p8w1MaGhvau2IuvD93TzqDEXEHWwoTYjJSUvNTS9f
WJiZfRoYcvPMrYLRBZ7aUYFrUErZ/dkJ4dfOX4oo6pwxyWn0csF8ffSlwKLG
1o6GRJ9Ld9KHx+YrUvJLi4tz83Ijg2JLuwd7B8r8L92vGRknN6f5h+a0dXTT
SFUDPbXN7SPjI0MoGiMPdNdXZgR+fzqiZV6ImMULCil36Mmj++HFbXWttXfP
XY6to4yPNT8Mqx2Y4oOoZ0FOW2Gsb3Rpe3ffYEdFTfekSK62zFbOYnSmXD7t
k9ff3d+X+zg+rbmjKTEi/ElLS2Nnkd+3x899czWxhUaltuY3D7Y11eeH3PEJ
CK/r6ctJDAtOb4ypHu/u7iNVFfZMzJNacoLDSsiD5OGyyLt+UXnjSzQz442+
sws14YEJjRQKebgx4UF00zi9vz6nMiUl/ukYY445nBaTXdzKATFgqof59Kqo
077ZR0PbG9rbq2KunL+dNsrB5CRGg1K03JcRHhGcmPO4orWPMrHC5gOIWolg
AZpS7nzZo9iE7N5+6lhPQ2Pcnccd8/Pz9Np4/4Su9s727IT45NrZqemW5PCn
gfdSCrq6OlsT78Y2T3LlpvdNBYnQu6xgv4zw8DoqdRS9sygsrGkpi7pyL62p
vaW14v6lS2G1tEU6j9teWpL8OC0pMS6lkjzQM1B4P6ikh0qn1AXeKb0b2L3M
kUEArzE3LyH2SWxsRHRhT2/vIKmmuGNCIDIDb6MREbPasmMjUhuG+oca4m8F
xpWSRkcehxSH306uKEgMCIpt7ugmkXpba5onF2fKn2Yk5I9MsUG5GoEAmdwu
2HSbzInx3naNN+ACaW/McOKC8UZhLcduc4t7XWq8h+webZvtRdvm1BvXPrv4
xtuBTYA3jpkf3E4Mn22fsXOM90axdx2GvT88qH5rLyb5ftdz1vr5NN4mrvvd
nyH/4wtRurBa9gLyTnAm0ZZw5hvnzCGQYYHr2I08g2ySfJOsTzGNt9JUMv7w
oecqoGOUs5ebAvxya0dYK/o1My7Ua+BlWvUj33N/Pnr0z+d983unBBBpeqIy
5H7hwIJUpdPKuBNVjwPPn/j22ImztyNyKBPUxb7Ujpzb16+d/eO3J7/3fTo5
uzTaVBQU2bY0uzpakhwfkvokvXl6YjTt9rWL1zNGWRiVqpWxBzKv/u4PR/90
7MzFc+fOnLl4/V5K1/TSynJ74JUrZ0+cOn/96NH/OZfUO9HKZPWU50Q/TIuN
T08uneUx2ZSc4NMXIntWBIqNaMigBFaaY25/+Q8nklrmOHITF64DV6nZZ/54
7sTFS99981/HL8Z20Oj5CdnpZeSiuoGKuDtnT39z/PKlU6euVC4urC71ZIVc
/ubbY/919Ozx6xEJFeNz09MljwJ9L5w7e+nKxSsP6qd5CgvDroNEi/kxPke/
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
HTe1NdZiLW/rtxKNcZoH9E31r17UVL3WvpscmsMUuSv4fmdlYUzX+LK8rOxx
Ra12wrK2s7W2PNWh07a8rHxWaxizehab/7C1vjjW1TeJ32TZ211dNI90TazY
Fy3TPbXt9Q+ePnuKHQ7b2tbaum2gfw77EbG16pgbGHM6Mf2/bpt+19HSUF/T
OGBd3hKU3sGP8SZfkUvn8AlvnvASxlvBGG/2hIGoEHGPtKa2pDbzJrz1tHzA
4x1O+8qXudnkWGi3T7c4B6sdtTeX//W/rv3d32/8ze82//bv1v/Pv1n53wg3
+H8hdPh/cf3tefu/f775f/zd+t/+/fI3/3U1/sayodox2u6Y7nRY2/F48gjs
TNhXuRVT477KqZjIBXRExXhjQnlr2dpZ9+DGnco39S2v771s659f3cL0SU/d
tfjrMX+NOX/iRPzFpIKW/pGxp7dLrz3omxmZ1t3ILLjX+Eg71D/w6uzhYzHn
kgruNczhC6983F6xmJ5eu3ThWExm8omEmIPf/8eFR93vJobL89JSUuKjTiak
FphGhkcrbj+6ffl68d3izLSCnEvRsTmP+qz2JUvv07yEzFejo+/JSf9WrCMV
mfmlVb229+YZXWHyjfq+oUH9i5sZeRdPp1yKjTqZfK2s891w7630kgf3C1Mz
ynWTttW92fmB+vLLGW9GxicGmkpy05MTE8+fT75X0z32rvPR1czLJ2PiL5xP
ToxPyq2fXyQn4N5x2vpKU2N//kvUj389GX/hxC+n4jIS4y9ePHmhpLnT+LY4
61JSfOyvfz11ODq3tKJ/sPXupeQbDZML9sXpptvxF+93zZELy3zaW1kce5Rx
6n8dOHz6/Nnos2nluun5mbHqkrys7JT4y4kX4+LTbpb1LTgJsbe5MN90+dSx
6BNnLl6MPnUm9uj5Z0OjM8a6ZznF9Ub905z4mJNnklPP/ZLyoqV/1tjf/iTh
6MlzZ06cPBN7Lr1ucsY6bKi4nZ168UJi1NEzFxJyn2sHB4eqzh4+GhOLHY56
YjrujzsrFvPbey23LiWejY6Ojoo6n9/YPz7a9yj658PnzqUUPW6ZsOLzwHz8
tG2z9FxPL370vLm6MPliwskT50+fy37eMb64aDf31Dy+lvFycmys+0n6D99f
eKrDxHlfaWLuk7bhDvuaZa7rxa0rl5KTzl9Mvfrg7cC7vqLEM4d+PX0mJudG
YUWX1YH9APi4s2bpq8qLPxl9ISHqpz/+lnCrYXRm2jZtfFV6JTPlYnJyYsYN
w/BoT83towcOX4o7feTo8d+iknIf6mZmZk0VJRnpqQmX0+Iv3zS+GzbVF5+M
iv3x+5Opp04eOpp4+9nA/NT42+vJFxJOR1+I+ukvf4l/brrfYzXUVORduXOv
7Er04XPJ0ad+PJT20jj33jLdfDPuzLmzv56Jv3gu9mLChXu95JpAHzbts63F
ORdij5+KPRx19szJpPs941MjhpKTR09fOnXq4NFL18q6Ft0TEe6tLAw8yYxP
w/a2LZk7n99Iu/Z6yFhXdi0xOubYz9HRx46fz6voHBueqE9NLB+cml8YfPso
9apuYHTIMl5TkvrT94cTU/PfDM6t7QhFwuBLxsfEfBXMBXRIj7dgKLXI8BJk
bLYY4c3ZV0vua0cU7dbe/KHpSI+3Qj0/EenO8rlc+TOfMditxL2kwRpbV7Wt
s9bRW7lcl7j2j//3yt/83frf/W7lb/+vNeJ14+9+t+F6+/fOb/8f581Hzo5a
e1+NbURnx36lzhocRER3RHemAhoFnRkG5SqnUWJmNSE83mIX0Pn4YXdlcbTh
eX5iYvbLxv6l1e2P2/Zp093DJ7J/PnVX39nd1/kiLzH1dXfP0+Liaw96poan
WnIv337Y9EQ/1NdVEXcyp8o4aF4igoM/bizNNBVmZRXUdnVNmQcMtQ8Sf015
2jk6PVr36PGt3JxzR4+dii3r6x15cbOsMCm3tLg4I/vhk4rHV2PjH3b2DXW/
zIm7UjdsdZBzy33cW7aMV+bnl7/tHervKs4saR2aNc8PVj0pL7lWcDs769TP
h2NTX/b3DdzJKb37oCg185EeF94Lc31Nj5LSmnpN9aWXDvxyLiM9PTX6L8cz
7rQ2v8q8mHAcU9WX84ofv26p6Xm/Qvp7d+2W3tvJSbHX3uRWjbS0NiWfSnum
N2jbXyakPtUa9eWF965nppz8zz/++udfL+U3DHcZ7104e626u7fHcDU2pbJ3
enXXrciso2WJp6LSnpraddhGl8tqtNVFx345cT41+8rN3KyLUYeijj/omSPm
H9ywzjVlXEh90NQ9OD1pqn9bGJPd3DeofV2effXevYJrGdffGrXGt1kxyYX1
fZOmfuOr5DM5Dcb2LtPLW0nFfb09z3PPHfhrbE5mdvov/xrzw+9P3XzRpH2e
eC6nqtN9OD5tLVkMj7JT0s6l5z7uMukNFclnCl61denK405nvzENWbCD7Yq/
315c6CvMLCy9mpWQeKu6Z7DHqL997tQtfddr+9JwX03pjavVPfqX5flRPydW
NHb0mMpTbtbohhedzumxt7k//eVEclZOasyvB+MzX7cbSpLS8h62mwbNtkUH
HuODL400q32UcT6/vt3UrS+5FJdV2tbf3dP1JjP2RNTZtKs56WcO/ZhWoW96
ejv2XEmXyThjutP0PDMt73ZDU1VKzImjFy9nZaXEHP05vbKl+WnJ6VOlp+Or
u1o7WopuFpdU93S9zMrJr+jpM3W3XrlwLLXKdKdvXldTfjXzdvHNK5dvvu1q
6XidkvmgUj84oMs+mfO0VmeaG+8xvs4+faLQOGPHf3isW6fr0hMy7zZ2909N
97XUPbh0trShu72+LP5CWVdbe/vDW4XXnk/YlndcJ+aWeaAl++TZxx097zoq
85KL2wy95Tevncl9k1Q+bNQbGq7EXiuv7+qrS0t83j9ttgy/vZ+YresfHpx5
V5WfnpD1qvfd/PLGjnCsCSm8vwnmAjrEK9PFbaD/QTiNuT5twUARmirmn8eb
uyP2N+Wg9qL2BR66pO8LHu/w2jcwmePTnrTbF7owHLYOu0XnHKpx9NY5+mvs
vfXYq6O33om9Um8HGhyz7cTG1ELw0JkRvq9iK6bGfZVTMTEx3mKXjHdp7433
0423U3MyambM6x8/ftpcmGzJ/SHh0Q/ZpgmLwz5neJBz4Ymp61lJaUHZ8MTQ
dGVyUvbt+rstg70DdSkpj/uIBQ3xtLO80P8459bVygnb+91PG1M9XUXn8ioN
/V2NRTeuXc2/Gn/m8Mlz+PrsLwvKi1PySm7fupz5+HVbv748M+H6o4q72WnF
HdPvtzwTLa/bp1oe5BY9KLudk/nYNGNdXOiqvHfzZnra9atXr8YdPRQTf7+3
p6/kSmHp/aLky48M85a1j0OTvS+KLqY1d+hrbl348/GM6wXFd8ruPmt9Nzsz
MahvfFteei3x9IG/nMy6UaKbdWzghW0vWftKsu5eezhaYXo/NGzISHpsHJ+a
6n2dEf+wrrLs+rWCnCtXEn/7nzEHvj9/+cnM+OhIRdbF3MflpddTihsn36+7
K7zntIw/SE7KKNFa56fnGnOSSx/XP0796fj5rMz8RyV375aUPqps6FtYI1q4
YZlrTUu609C/4NxetvTrXiQmV3X3tdaWZ2fcvlVQkFvWZ5mYGHuYcONx3cBw
W09bVUbi88EZ88J4c1lqbkd3653s0z+eunrr5u1HhfkPHj59rnvX31WdkvzI
czg+ri/Mvbl2NflcyvVSrdU2N9Nz+2ze00aD7nVq0vPROSfN34rHeBdlFhRn
XTyR97jbuuywTLzOPnq5tuP25Na45d3LhzeycrILnj178uThvecPijIu33zV
PfF+Y2/x3bsnF/98JD7v2q3SknuPGnT9Y+1FV4qeNM5bl6ns99beD74quXj5
7bB50WZpKiy8VdzZ0dTe8jz27MnzKbnFBbfLnj5v6R8xVJelZTWaZ82fFmrG
jIXXivNfPC89fy7mTFpeYXHJo8cvm98NGyofXLj4KulKz/TIzPDTopL8J021
t9Puv+hZXHYsTNbfPJNbayrqtOhqX1zJLCgtLbp+v396eFqXl/HgaVNPT0Ny
fHlT79zip91F80BZ5pnS/uklrLN2nfPvHsfnFLzueW/f/LQybmy7cexmtaGl
6mlK9puZsZmpypLinJK+BfuG+4rZcszqHyTH5ZVV3s1NfzA4MNJdcuvq+Qf9
N/Tb5rnZkcdx18petZveZiQ9HZqemRuouHkhp6l3uH92oqb03vXSXpvd+9Lz
Lo/3l/t45vGW/LteTIw3vhePjhX/NCVvoAji4UotEcJNThvongUFk9xuwY9Q
5nPapbk24lXr+lsw5sSzfj3EeIdXucFo1Iwed4PPddgXDDbiFfvbuWCgvcX0
tg46U5mNgs4Mg3IV0igHltW8iRhQcK3uNJswqLeO+Q7c400Ib/HzeH9ct5sb
iq/dvtFkXdz4iOvQSW3hXw/m/nTyxdj0/MJ43fX4uFfGzifXbubeG3vXN1US
E5tw602hbqR36E3G5SeDcy4X9acPa7bJ6ivpV0p0C/NrnxwjXfXpp66WNTaV
3zyeVtnabmgui4uOze/qHq689bg09dr90qL0rPt1nVPvOp+e+vFCcuyZB31T
jh2aH/DD+sJUS3pS7sUfDt0xjL1fnO9/nPZrwpOfrhpbWnT1OafPJD3u6Rm4
f6X4TmFe/PmSlrmZlU/6gY7iS0cvvWlvrylIOp5RZ+x7NzrW1qgfHBxof940
8PTtu16jvrok58yRA5deT1jX8R8M761Dt7PvXX848dpkHxrRpaU8bx+bme6v
uhyTeysnMarA2NjaXp99NP/ED7FpzyfM1rmh2nNHLl6IPlXQNbbkCRjYW1kY
fZh65uTVupnxkaknZy+XPn37PPf46Wv1b0zmmbnJ4dGOhsZ+58omvvGGdb4t
K/lBff+iY3vd3N/+NDWldqBfW/M0N/dBQf7V7Fu62eER062zaYWY8G4fbK/P
Snk+hB2OoTdlmTd0PaaynJQLN/Td3YMW46t3+rrm/snhnvr0lPKueYd7FaGt
9/P60tTkhJjs669npkcn65Kjb5Y3deqqUpMrx+eX2cI7u7A4N/VUYlGrecky
M3LnzLHMGmOZ9YPF8d74/O75//nrlWfVnSNN2XdzT36fWm+YcW5+2Hs/Ovgy
/edzpXpj3/hYl06rHxzvLr5y51HdjMVBTcDyYcMx2XA/NbZANzM9M12dk5N1
p73b0NFenRSfdL/VNPJuYKy1unNixFBxMzH58dzU5KfpJ+8asjLy8l41VCTF
Jt9r6RwZfjfWVK0bmdBXl5+JfxF3pWNqePrdo6LSkhc6Q3laRvHbyUXzzOjD
+JOZ1aaSfrO+7mleTklhScn1e/2zw1Md19IePnnb392Wdjy30jg6+mltbrb1
2oXYor5Z/FfKxzXLRHXSxczyTqtt85Ot31gRH1XwplP/piIlvWZ6ZHqkoqQ4
r6THZl+nLpld50TPg2M/Xkg6H/dgYHpqvvfu1eyTedqsqsWpsQlt3tm8u7XG
zpqkc/eGJicm++5fjM562zk6Mjv56s7dGw97bQ5RwtsV462lxXj31q8sdjjJ
8FGXBTC6FabnLfNvk50wEQiPt3tfVIbUbN6Ur1tPE8B8a0ryTuLNJ7xZk3VT
sSUOV2wJx50+xwHlXXdwnN6Ux5tlM33rTNRXvJ2JtNVBzjzsyg3LRkFnhkG5
Ydko6ExsEDHxlbvkm/BeW5qrKcy7eb3ZTAjv3dX57oqEI5ei/3q54vWruuqi
9OT81r6B1zdyktJfPH9Rm/zLsVhMeLeP9QzUXU583D/rdrF+2nIudDzIyEov
rq9q7nnz5FHu0R9TSt+8eZT7w5kH1bW1rwtP/nbyqr5z6PnNR0VJuXeKClLS
S6q7ZydGW5K/P3w0Kr7BvLDBqNq23dZ7Iy7xt//vYOXgzLLT3FV26ffHCv8t
tq6yqvpF6qHjF+52dPXdySy5U1x8+WzGnTdVzd33yx+kRv0cW93d3fwkLy69
vOpNc2PTi4o3nT2dTcWP628+aGppaWssy4366c/xleOk8F60Dt7IKL5yd+yF
wT7wri054bF2eGqy71VyTNbVzHN/ufzmWU3d8+Qfcg7+8UTS4+EFu22+J+fo
sV9/jnk5ZV7z1HZvxTZy9/Kx/3XqRnXl89c5UXlP3hoby1MuZD99UWcwdbU1
tb56XNFjdxLrZ25Y5lrS4/EIdvv2+lyf4VFSUk1fH7ZFVt6Lsvs3Mi7fr3pZ
9/DSobhbdf2j7QMdNelJj/umZq191XdTrrb09dUWX03Oq6qub2p7XvTmeVmN
cXSopz710uPOObtbeO8uLwzWX8vOP5ucev3VyxeVt85feFjb0W+ovBT/jOXx
XrT25qffLi64nZ6YfbehoabmVdaZlNK2odaVT8611dGah6f/259SHr4ZmjVl
X4//8U+ZHQOLm3ufPqzMjjeXnI27UVH7trm1pvJVU8+7voKMwns1E/PUSYGH
eC+YXt86H19UVVH16kr06YSi5r6+voGWwpyUwtr6xuam5sf3jePD7ZW5p09l
vK2rMLzMLL8Vn3LtTmuXtvByalFNXUsbts2DtsExXdWjkxeexWa1T76bGrqf
X1T4pLv/ze2UjMLXb6peVVz69deECmNxv1lX++hqVuGtgsKrxT3TQ5OGnKR7
j98O93cWn07IL68s79LX1ZXGRZ8u6iVvD2wtzRsKEhKvldfU69vrnj27fi7p
iX7A2PA0MaVqcnhq6GXRrauFPQtLtJNzwzrdcOHA4SNRKQ1m8+LSaFX+1TOX
Ss7nvqp4UXEvMa7kRftAf2P6iXSsxa+epR87fLm+c3R4duJlcdHV+10L4oX3
vn06g2F7Z4cS3suLHb6ZF67wFjBrdOEtcvJAb89FspfORD1ZydweEYVCc3S7
hTftQUuhuHRPqIlSB6DIG1X9KTcsGwWdGQblhmWjoDN1wg9XOq3t21JDTdYd
5sYHBQW3dZb3m8TUJGsL4+2lmaXnfzty5OfDF+KuVQzOWmwDL/MvHfzhYMzZ
479Gp5W1PO+fGBpuvpJROTTvdGusj7ur1uGKW4kxhw8fPvvbj8d/O3Ag5Zm+
q7P6/NGTp86eOHzk+yNnrr3tG6m8+7Is5/bDuyVXrz+q77cuzA4/Szx8KPnJ
8MIq83mzj1v22eabCVFRVzpm3m9tO8fa7188GH3gfxw6fuZk1MED0XGF+t6+
+9fLX9Tqy3PPRcUcPhgTc+h4TMzppNqZycmRt0VJJ385ePCn44n33gxNj/Y3
3c0uvBR99vSJMzGx5y7daJl8TwR579htg6U3H94oG63sWBwaMWSnP+sYnZnp
r827Uvb0eW7UbycOnj8R/dd/O/b9n86kPXq3uLy+NNWUe+qXcwV98w7azNp7
K/apx7cSfv7+1xMnDh06m/naOGubHa3PTzh9Jvr7I1E/H4xJzH89bl8jdtlc
MOuvpj9sGLQ5dxyWd4aX2Tl1vf1a/OHKtk5jfUHKucPHL0X9/McLD9/0TRkG
TLV5ORV9s2brYENZeq5hcmzc9DQvMfr7Q4d//9PZIxcKX2jHRodbczIqB+mH
Y21xqaPCdD8j9dSvfz188HzeM9P07ORAVXray/F5VqjJQFFe2ZOq9uay9HNn
Dx06dSr9nq53bnVl79Pe7rq1tzLt0JGMMuPk5OiL3DOnEu4PzC/jtyb21pfn
jE/zzv58+ODPUeez7xsGR94V5d572jpt9awC/+nj3qZttKUw8djB36KOHvjz
4culTeNzlqXR/trs87GHfzx8LDqxqG9yvOdNwcEfDp85/duPfz300/HL+S97
Lda5wepr52OP/BZ99GRyUe/oRHfts/jLdam3BmbGZkeeFN4rejY5Ptj9IO3c
6aO//nrs518OXXrd87Df2vH2ZX7enYd3H9y63zMzPNV+I+tJRbtlbmrgcUbC
xdhfTsSeOh51OProvcFZ5x7x02DZ0lOeF3f610PHfjoYExuXXz88PT+ofZp9
tWl2fA773XEnv2x40bHl6bEPK5Z3Dy8cPpj8FDtpdzcc001PihKjzh7+z18O
/3oh655uzGabGy2/dDQq6uih6Ohz53Ob300MmSeryx7mP+pi5MQvvE/HnP7q
q6/1JuP27m5wHq707OUWsYRe9a6xuZ8jZiNBC29h1c0piBTb820Ij7dgtAk8
XBlO5YZlo6Azw6DcsGwUdKaohys3JTxcSYiI3Z3lBavVSi38gk9g7Ji1TfYZ
dW26zgGLfWt3d2/Tbhnr1OpMvf39Y+bFleXNbWLVeOcmfYGcD3vbTut4v07X
ZmhrNfX29M/bVzfWHTMDnfpOU8e7d6MTM8tr68sLiw6zxf5+0WKxvLdbR3va
H2Ukl7ZMLG2y53nAarKyODk0YVnd2v348cPW6uJsb0e/rlVn6sYqMjVhWVnb
WLI6nCvrS+bRToNe3zloGhgfm5ha3t7a2VlZmOlt0zW19UxanVs72+vri6OW
CZPJ2NZkaB+YXVhzrROEr9e+YLXZljaW13c3N1ctFscq1rqNlRmr0/7eMmow
YMV1dXcODQzMzNmW1x3T/cYXaYm3q7oX13botf2wh2n4udFeY49Jpx80YxIb
71rrdG+7obWptbW9ZxTrStcSNcQCOmb78iZWib2t9RXbzLRzbXXFaTNblh22
6W5d/eOHD3MvnC+sMky/f7+24piZWVzf2t7dXLabLatY6zaWLGPGVp22vmPU
MLy4uLy1hTocH7dWNt7PjPe3afXaAfPS+u729uaixexgrsWD94DVYrMtb6y+
n+3v1OpNJnxJe9dDox/wpWkmxrG9sTKwvybM9nXXo4EfP+xt2M0jHVptW0f/
zMLyxuaa1bLkWNlmLsFETNc306nTtXd0mEbmbI7t3e0P21vL86N9ulZth3HU
6nDYTDV3zsffra1/02Tq0w/NWhybe3u728vW0b4OrPK90xas+evLjol555R1
fWtja8tmxQ79ztYW1sABk16r7e4dHpxxrL7f2F5dXrRaFu3Yqb+0vr25hdXJ
5lzZ3HBahjpbamtfPi6/dz0353Jaw+zCuquJu1sO82hfu7alUdtuHLM6t3d2
N7A+n17Z2sDquWC32reojsVas/5+rFd7NyO5mDxp8UeUl5ZGe8ZNrTqdtn/W
traDnQubS7N9JoOuo2d4fNKysrGFnVNOm83KXlIKnUjh/c2+b3Q6QzAfriRf
KY83x9eNkNzefd0k/MLbvb0BNXsJs1yOx9sVGW7WehPeeni4Moz2VWzF1Liv
Yiumxn0VWzE17quciol8uFLcdII0zYhav3xvBxvyd3Y/epYKwVc0392lL6dO
bU5bTn0X3217G19PnPwEX65yB19yBUvEpuTK3Njny4ujz9NTYqPSXrybX0Xq
kY+4fKSthr67g1cLX1qGWHX+k2utc3K5deynAyb5iFLID/e2d7bcy9aQa6Bj
9cAk0NYus8G0d541zclFgj5sE63GFw368PHDht3SfDsj9njc/e5pO2pCOLzb
9nbo3Yav6ojVgrYYPKpMomewAnc3V8f0FdmnsHTi/NWHxtnFdWJNIc9aNJ7j
gR+frZ0PmIh2f4ToQHyJm138gNBqhNrqI7HguvtYsTb6SD8EH1k7fqCdJ+jM
Xd2AZ7xLnmqu1XmIUwVT8dvrjt63FXmF+jmLEztxdmirKBFnnWfpIXxNI/Lv
Dx8/UT28Q5xv+HJLVBvxde09df60vfJ+qCIv81J09Iljx09fTL35qmd+ZfsD
rYJ4QVt4faj9qPOIsUb8zuriwAvspI1JezFMnbTYLnu7+Mnl6WdyuZ+dHeLE
8XQDsns4yeXxxhfQ0Qb14UrqN77YyQPZYdi8ESM8wpvcnjYDieDy8YwA7zZK
eLvCxZFh3kyPtzI9PxHozgqPp67Co9ywbBR0ZhiUq5BGiVlAZ3tz2WDwtoCO
6IT7NJ3OpaX1Xf4FuPGlA1eXbUxvq7jc93Y2lmZnpqetK5IX+MZE2/L7xff2
dTkWuJdQ6o5zwTwzhTuNA7IiOdGZS/NTeJqzOTa9LXEYHok8hd4LnmZ+lrC3
s26fn52dxNLU9Ow8vj6Qb0XhOeEn7YznHpH8yf1w5e90uqbt7c2gLaBDvQrE
dZMubvdsJMyvaNKX1NLubdjKn8oKIdHZwp4V491G83i3MT3nWpTw1oPHO+z2
VWzF1LivYiumxn0VWzE17qucinlZQAcT3jtbK0aj8euvBZeMp+sIfMXtjc1N
Yl11l2dyc31jY2MLk5YftlaWjJVPbxW22xbX97Y3N7c2t/c+utUGsVA2HpTh
GO/SVTWNOla2Puxs4autb+9t7bm82h+3tzaxtEVbL92d9vA1vLc2N7CyqVXj
t7c21jfwZc9d/mHio811LIM92vrje9vr782jL/Jyb9wz2uybe/gmG8Qi6IFS
QpDCICFu1ficU2B/D5HCe9++L4O5gA4jB05ot9eYE54gE/eWHI+3ZzV5QYWP
8ni3eeQ3sxQHr/CGGO/wKTcsGwWdGQblhmWjoDNFeryxwXrfvn0ihDcmfDcW
Z0ea6+oaGwyj5vcbWxsrC++62pvqG+vr9IbOmUUHNly9uHc5zzA1MTPR1fi2
6a1u1LKwtrONKeytxbGRd536tp7ugbHpkaEp29qq3fyuvaHhbY1x1DBht2/s
7Gw453s72pqbmvWdo5blbY9zem9nd2Vqfry3ra25rtk4soBp9Q97a0vzve1N
dbXVb94Y3lns63t7u+sOc6+xra61rWMSK3YXj0det82PGWrf1D1IPxmbeF03
O2+e7GlvqatvaTIMz4wurG0ExhcNCVLQEmfJ+BDEeFMOZ7uZmoGEhY7+lu5w
Rqy2wxbeIh6l5Hm4cmm2lftwJdfl7gCPd9juq9iKqXFfxVZMjfsqtmJq3Fc5
FZMzxvvj3vrSjKk8J+n0qZPHDx6JL3zePzra8eh6SnxMbPyRqPPno5Mqh0em
2l88vHKjVld3N/vi8YPHDh+/kP9EO9lvs42PV509cuz0mfibt+6UV9zPK33T
bawrzUmNPRt/8NC5Mwk3XnWMTI415SVcTIg9ffZSYtYdk80zn8Pq4qL+SlbC
2WPRZ6KjDp4pG52z2edML/Izk+POx5yJjYlNK3ppnJuf7aspzUxPPHfhUnxm
YdfE3LJ9ZML4PD8h6sjZc4f/8t+PJBfrBgYe56VdPH02LjH2tzOlide0E+zZ
USBBUlniCO+2f/2XPwQtxpuczIRwevNJbobe5sZXI/blKH9yM745UkTEeHuE
N21SQbbTG2K8lenOCo/gz/AoNywbBZ0ZBuUqpFGiZzURM4/3x82l6a5XJUnx
d42m/oEB/ZOqht6hIW3F89Jbt67fjE+Mizn+Y0bbwEhn7aPcy7k3rmVm3DHo
W/UVGeczimuKGvu7jVVxJ9NfdPSNT463VTzITr9+LSP2aHTKjau5Vw/9+/mf
/3T65nPtm3tRMRezC0rvP61pqepeWd50u7xXrTO69LNZd5pNHQbd7XN52oFe
Q2XOTz/HZl69fe92Xuap344n36hrrb4aezomMft6Xvb5oz9nPWpoeZZbU3I5
8Va9ocPYVBgbm1ai7WhMj4uPu3yz9GXNkzv1DS+Ns461PZ42Q4KkikQK79/9
7sumJt3m5naQY7xR85l4gTWNNsJfjagAcpUc78LbPofbQ850gp5HNR3g8Q7z
fRVbMTXuq9iKqXFfxVZMjfsqp2Ja6xSlz/E5vRdwB7jO/Vbr8Mzj/TUmvPk9
3pj+3VpbGNWW3024optbWN/d3bC9X1xamDA8K05KTLh4Kfrk0d8w7VzdO2So
enQl/nLq9Ss3GqwL83OjT+IzCh9nvdAatHXpiU9755ZWV22myrKr2DYpx/9w
MDb+UnJS3PnEjLzCNwNT4/3PCi4f++XAH39NelZtsq5vuSXxMr50Y+qdil7L
3NTEy6S0BoO+4U7sf/wQFXM6LispPik1Nefpmw7d3dioI4ej4pISUtPyih69
qqopinlYdDFTN2lZXJyvLSgouNUx1q99cjvuyF/+7c8xlzIfPqnrGHYyp/mD
BEltye3x3qfV6re3iQV0/uVPZIw38Rvffcnjv+uxn+e0t/PMv6f0xD0ytu4l
N3MSfmDEXi6Pt/Azj56IazsnuBohp1kVMKO2ESG8cetnIVqEDDXhFd6kx5tj
M33qTMRXAp2JtNXBzDxUjQpcuWHZKOjMMCg3LBsFnWkWKbx12JAtGGrCEt4b
e7s7dpvVPKJ7WpCbeSUz72ZC0sXoXw7EvOobNFSVe4T33NxIeRwpvNu19Vkp
r9/NO9ZWbe2vyq4kXE5NP/XDuatXrhcUlJYWP6+u6bWY56Z1VfcTon/545+P
ZBc/brcuu+fqXraatdnp9191WucnxyuTU+u1+rf34v7zSEJiUlZx/rXbZWXP
dL1DxgfnTp44l5J781rRoxd1zW1v35aefFAYm6mbsLx/b2soLi7I148PD7ZU
5Scc+x///a/HT17IKrpfNbq4uotqNCRIKkn4dIKnT3/99Vd6vZYKNRkwVYVC
eLOXmPS8pZaPZApvVvgHT4w3+7lIUX71eVcYOd6i2TZUqInww5VKHbxUOjLC
iBwG5YZlo6Azw6Bc5TRKTKjJhsgFdGihJp1D74YGayqq6h5fjT6bXllb09n1
8HnZ5eO/nq3oGeyofZqTknv9WgYZalKZeTGzpLaosa/bVJeW+KJ/zrGystRa
UZaRfv3K9eRLt+rrm3X6xmfNjdUNponBbv3LZkNDXdX91NijR44WGGfdK5qv
WOf0mYnFVUbr/MTYi8S0V6Zu7aubp+JKy140Gjq0WkNDo9Y0PlCflZBwq7q+
pa214/XLzv6+7qqsisL4hPw6o7HLdD8xPiW/1theVd/W9vZNRVFuwl/+3yN/
PZBQ+W7WvrriWNvZi4i5+CCFXyKF9zff/INe30xMJ9gazIcrycAM76vnoDze
7uhujmxGTCeo5WQrJMLp3mw7r8cbIbyJmQ8h1CSc9lVsxdS4r2IrpsZ9FVsx
Ne6rnIp5f7hyc13skvEf99bfz5ge5CTFnDoVdfRUyo0n2taaKxfjT584FZd4
9PSpH3/9/nCZobfp9eO8gjf6+nvZF48dOnbk/OV7L7pm+x3WsdH6y4lPBufs
aysLba8eZt6uMejLriSePHji5IEfo6PPXH3RMjra33or40LsxdPnz16MSy3q
mLVvuaTwis1suJFxv7YD93i/SEuvGhybHmu8l37iSPTRA0ejDkWdv/mgzTIz
3l2edvZs1K/HT56+WNAxY3Y4RkY7nl+LjzoRffb4978/mHKvubvj+e3k+Atn
L8QlHzt47nzijVeDUxOj3Y0VhnnHOgR7Q1JjIoU3dhWHZAEd95OVAvCGmvAG
qPAKbyFt755QhT1HN17DuVZSeNt5lqp3IDzeCn1ASb1PP4Wq3LBsFHRmGJQb
lo2K8M4U9XDlhsiHKz+R0wnaZkcaa+tqatpGZhdXVxzz3Yam2trXBl1Dp2mw
a2BueXXJbhufXVlxLIx3vq2tqzWNWd9v7G5/3N5YXxwZWVjZ3Nnb3Vq2zU3P
OtdXF2dH2mrq6yqbBtp6rTbn1va6Y35A19RYXfemdXB8Yd2zxM7e9uby7Oic
Y2Vre3PTNj21uL65vbO8MG1sa6iqrKypae2dtq7s7uysv581aRurapq0ffNO
fHLv3Z31xbkRXX1dY0tLW9eEZXl9ZXGuX9dUXVvf0GQc75lwODa2Vp2Lw71T
a+vb4PGGpMbknsd7n16v39nZCfYCOgh3N8pB7Z5SmyWJxQlvsY7uJeQkgeI9
3vPwcGX47avYiqlxX8VWTI37KrZiatxXORXzvoDOtsQl48kFdDY2iAVqyPVu
NjbWt7c3dzBFTS7w/XHvA/7N3g6+IRW/gS+yvedetf3D3gdi9w977gV0dt0L
6OxiGa6vb2zssgI/iJ3Ixbg/uBa+wZcfJ4onF9AhP/pIfLSJr/Lu2hNfQGcT
+2R7e5csFS9jHUub23vk+ukfP2AZ7X6ESBNI6kzEkvExX3/1ldHUubu7F+QF
dJgeb35VTKhuri+aM8U3ES6OWrlSJFw5jWPWOUj/ttnF0ryeuyXlCYcFdMKm
3LBsFHRmGJQblo2CzhSzgM6WqIcrIUGCpNxECu9v9n1l0Ju2d3aDvIAOj8eb
o8Pxmf2QDzNqmbJZx60A64FN4dm80cJbBPQcwOMdRvsqtmJq3FexFVPjvoqt
mBr3VU7FRMR4b67odMavvhK7ZDwkSJCUlkjh/dW+fTodNZ2gomK83cKbJ6aa
UumedeEleLxdy/FQz3hKEN5mlurWUvN7Q4x3OJUblo2CzgyDcsOyURHemaI9
3gZxMd6QIEFSYuKsXKnIBXQ4EwkSOdD9zJ4oFO483gKIldlCGFivofbegMc7
LF1hYbCvYiumxn0VWzE17quciskf4w0JEiSlJWpWE71eT81qErQYb9JvTAWW
8MaBoJfOoXzdzMBvlPB2uH3U9L/9B8st5E4SaeVGpDvL53LDslHQmWFQblg2
CjpTSoy313m8IUGCpNDknsf7GyLUZDvIMd6ki5gZ1M2dc5sMNWE8WUltQJ+H
ZAk1qwlRBNspLSMKcJJI2lexFVPmvoqtmBr3VWzF1LivYiumxn2VUzGtY8ol
1xEL90xp4eFKSJDCILk93l+7hTe+cmW/qcod4y15fS7uypV864Lhpobp8eZ9
xJIZ402f3M/j7jYb0MIbU+buQG6HfL5uEieWG7crkDbTp85EZ+7HImuRuCyd
P+WGZaOgM8Og3LBsVMR3psMsUnjrsSH797//PQhvSJDUmNwx3vs8Md7/8ifa
w5XBEN6OeTLimudByznd0oxnLsGl6TbsLf4h8a1HjVPbSxfe3Om7xQpvd+UV
NIiA8A7HETkcyg3LRkFnhkG5immU+FCTb7755g9/+AMIb0iQ1JhsNtuZM2f2
7dsXqocryVf6A49c4U2pbvucli68PTOZ0LeXHmpiN/sbf6Kk26YQaiLjvoqt
mBr3VWzF1LivYiumxn2VUzGxD1d+/fXX//Ef/5GdnT00NLQACRIkVaXh4WFM
eP/DP/wDzeMdxIcriVfK3U3BN7c2XXgTqpseIu6S4qIerpQ3zNvl7lDEg0Je
ylXn00+hKjcsGwWdGQblhmWjoDNFerz1ev2XX365b9++f//3f4+Kijp9+nQM
JEiQVJKwCxa7bP/xH//xm2++cc9qEtwFdNz78rm+WUEglPCm+7rdct29V3Af
rnSAxzuc91VsxdS4r2IrpsZ9FVsxNe6rnIp5X0AHE95Gk+mf/umffve73339
9deY/P7yy98Rr66E/439+2ofBv4H8R3+P/kVsQm5GfGV55X2Fb4ztQlrO7IM
Ij935u6/qWw9b7/a56qJ+5OviOR+u89VW3cBnv/37fNs4K4eUeo+z75feurM
aJR776++2ocVhb0Sf7vK9WxJazuVP6Ni7nKJfDybfbmPXdaXVM986dmA/NtV
7ldf7XMfHVYXEZtRGdL62f2Xu3++pBfErJirzi6YG9OPEf0rsmL04/vlPk/T
PIdyn2cvKjfyqNK7iXUIPG/JKnqOOPsEoPb6ktZY2mnjKoH8lpnVPla5xN9f
EXgaxXplHSnG4WCeUfs4XcE6cPRrinlm0nKgrsSvPGcXlrArF/v7n//5nztN
nZTHO2gL6HjMC2euP8oN7uAIb3wXl0rXcWELb7P3iQT9dINjvw7U4vmJQHeW
n+WGZaOgM8Og3LBsVIR3plePt8PavrG9sry8YjSadDqdXq/X6bR6fbPRaCT+
xj9x/Y19b/K8NdK/wvbRamlfGelfYRvqiJ09G7hedczN8O1Y2VJ/Y/kTG+iN
JqO+k3jVuTYwEcmViSsL/BX7gChCyyqX/p3OnbDcm4lXemI0ing1mXSdnTqT
iV0usu2uOtPLJWpG5kNk4qmFezODa1+91rU5vVFED5iwn0mdXXgW+K6spnkS
lTmjn8mPqMyNOnol8IPsqhiqr4zYmUE/yjo9o7c9HUI7vp6a0zuTkSvxSpxc
Ik8Ak76z02jqRJ8A5MHUN+mMWjI7vM7s04ZesKvB+Amg12mpPnf3IufU1bEa
qKUfHfaZRs+IODdcdXYfB/fR0RFfsdrOOIo6Tz+TbdEa3R3CuKZMKysrHz9+
xGc1+W9/CFqMN2tfh9lbMDYmvGc8Utzt5Zbg8fY/nJsDfdEcJXhvwOMdlq6w
MNhXsRVT476KrZga91VOxbzEeNsthuV128b26sb66ubGytbmyvYm9rq8vbXq
/ntle2tta2sF32Z7FfsD+2qb+AqHthnG5sYqvi/xukn7amODzH95c3OVzHwb
z4eE2GxjFd9rA/uDyBbPAdvLVTq22Sb1FqvDNp4P9cnO9ioGuT3+IbbxlusV
Y8tdyvYW2ahlrDKb2OsWkcPm6oY7qw13K0jcbScrQOyLZbiNVQArEf+cKneb
2fZtdwOJ/MlM3OVu4K9UnckeIJrv2oxsO/bqaS9Zn60VekGbm2tY925Qe+HV
W/P02CaWwyqxJdUE90HcWtt0dyatr9id6doeL27VcwIQG29TJ4A7c/KrLU+H
LBNd4fqKrDlZnLuXXF95zgGs3I3VHfwccGXr2mzTcwJ4mo9VCa8w+gRwb+bc
cBfhKghr1Pby9rbrQLjO8K1l8qz2nAC0gty5rWFwT1rqb/JkY58GxFlNnl2M
A7dBndUeyAuEeXzpZyb9OsK7cRO/BIhyPReI69zeXF/Z3V77sLuh17b99svP
I701y1aOFzdgMd6keXFYRKxxM8+YzZvp69bjFowjvOkx3u5yudn6LrxD7iSR
Vm5EurN8LjcsGwWdGQblhmWjoDO9ebyJV0un02p0WrucCx3OhXaHFXvb4SRe
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
QDVqh5r0C+Nf/iUtB2H4CsIboCZh4W3T6ZY/vw5JEYk4Mfl2FJCaHHKpymsg
yYZJnZLaL1vtFEV7j5V3vpi7X0oLbx6gA7AslYX3JcgkvHb9F8c13aJ3WK4j
vAEqkya8bcXVvaIvpXZrpEnC5iQdO/Vof+r8er9oqcY2dyEEwytqRIERAq1l
q0QaPFMqP6zrqvJ1QRKEd2KnpPbLGjplSr90Grv77UBf+f+D3ihJGElSv4SF
t1ocMd4AW6Sy8O42VH7zVyWE24ruRngDbIVGILwNyaQFzWYR3q1G6mRSOGzY
0HhGFIRPSmnV/tb1lho1PS90WVWkc4gKvMmdktovq+iUCf3SV/7ZN6Mlv2jN
8ueNC29ivAGWZRHhbSftYoQ3wEZo0oW3I+pgpvBWYpsl4kqrz5djDt4SvzUz
78RPp/rU/9sxG6ksJbzlnZLcLyvolCn9Mnxr6L7WfXMp8ZSJbxlfLqqzhJp8
MVV4E+MNsCxLCe/h/MDuFe04QYQ3wEaQCG9bXI0SqJDwdi2BPrOqESjCcfSH
pfGeWf/fkPCe3CnThfdynTJLePed8sXnyp9bFt7OFe9ffhyCus9nev96XgDv
1r1vf/uJGG+AnFQW3o7zSbrtlmrACcIbYCM0iZsrO301BjYUCjURaDz7AD1N
cdmppPB2xlFEpddMgTetU6aHmizXKTOF91Bz9XeN7Qrv88bJw+3xcNHV7Z8I
b4B6LLK5UtPPtvDmVBOAjdAkCm9b1GU51eT0ke5TtriycwtrvMuyqio7rVjl
nQnvpE5J7Zc1dMpc4e3q5Z0Jb0JNAKpRWXgPxwkO7zrP6OYcb4BNEBDenZQy
1E4nKhxPHpl3ZPTpU75zRVI1nnn9sNa6i1CTmp3y1n/YS+VOmS+8zT7asvBm
cyXAsmQT3sNjcaxkxIdcVLSevvmrW72riSdXAqyNxi+8vU9OscSMvd47baXX
+UxGNUPfwrJapcADXxrrrIxz6IXy/6EC3pAJSRMmC29XLMdQt0jrdt0pqf1i
Hl3Y18Royym3QOt8n0q+xn+ZcdOFh03D5kqAdVBfeP9uPTLep6i/FFyD8AZY
kCYYamKfvRxe0uzSrOeqWOJTLVGi8cxq9+daXHLbuPC+zk5BeL/lAToAq6FE
qMlqCDcQAObSpMZ4A0AmpoWa8AAdgGVBeAPAZBDeAEtBjDfAFkF4A8BkEN4A
S5EuvF8S4w2wOCsQ3s6KIbwBNkArvN+magAAmE/KTfd2EN7EeAMsyxLCeyUN
BIC59ML7rXGjAUBlAqpbFd7OGO/3P9+dRPjx0C50H+5ODH8e3716zYo3QD4W
9xWVWdzgAHsC4Q2wEnyS2xDeH1o5rcjs07+3x1Z4d28dD3fHw/jnx3evCDUB
yMjivqIyixscYE8gvAFWgi22ncL72AvvXmafhTebKwGqsbivqMziBgfYEwhv
gJXgk9yG8GZzJcCyLO4rKrO4wQH2BMIbYCUIhTebKwGWZXFfUZnFDQ6wJwbh
DbA1lj+WJAfS9oY3V8pXvEkkEolEIpFIJFI4BVa8hTHeAAAAAACZaLZGchvn
xHgDAAAAABRjcWmdWXgnx3j/9J///V9/+51EIpFIJBKJRFpRauoyJaXGeP/v
4Yf3h7/nNROJRCKRSCQSibT75Inxvqx1f/j5fKZ3G/J9e/nzrMz//v7ww8ff
7v59f/d//7r7+K+79/d33Z+nf7X/H/5xwv3W/fmDp4+73zr9//CPf7efrZ/5
Uo3CmDsod5eNwpg7KHeXjSpY7i4bhTF3UO4uG7V7Y7774fg/mpA+Hm4/HFRd
HRHegc+al/3491/bzzreOq+0nz/ufitWbtHMl2oUxtxBubtsFMbcQbm7bFTB
cnfZKIy5g3J32airN2Y41MT611gtN/4t99nVVmyLn11txbb42dVWbIufXW3F
tvjZ1VZsnZ9dbcW2+NnVVmyLn11txbb42fVULLS58p3xfz0+3L4s8JZxmopx
WaTcopkv1SiMuYNyd9kojLmDcnfZqGLl7rJRGHMH5e6yURjzvOJ9+OGsxtt/
T/83/jT/H3jr9G/grU7w+zOPlFs082srd5eNwpg7KHeXjcKYWyh3l43CmDso
d5eNwpj/D4Jnc5k=
     "], {{0, 740}, {979, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   BaseStyle->"ImageGraphics",
   ImageSize->{946., Automatic},
   ImageSizeRaw->{979, 740},
   PlotRange->{{0, 979}, {0, 740}}], ";"}]], "Input",
 CellChangeTimes->{{3.5447072837551346`*^9, 3.5447072937181344`*^9}, {
  3.544708552395128*^9, 3.5447085550753956`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["\<\
ORIGINAL AUTHORS MADE A MISTAKE?\
\>", "Section",
 CellChangeTimes->{{3.544707333148134*^9, 3.544707341339134*^9}, 
   3.5447074108641343`*^9, {3.5447099191451263`*^9, 3.544709919505126*^9}, 
   3.5447102739281263`*^9}],

Cell["\<\
Data adds up to 165 calories; NFL reports 160\
\>", "Subsection",
 CellChangeTimes->{{3.5447073486191344`*^9, 3.5447073888571343`*^9}, {
   3.544727043028056*^9, 3.544727048011554*^9}, {3.544752590670717*^9, 
   3.5447525912767515`*^9}, 3.5448832508485785`*^9}],

Cell["\<\
We found 160 without units in a wrong weight calculation\
\>", "Subsection",
 CellChangeTimes->{{3.5447073913611345`*^9, 3.5447074048001347`*^9}, {
  3.5447270550922623`*^9, 3.544727055981351*^9}, {3.5448832601373453`*^9, 
  3.5448832759733334`*^9}}],

Cell["\<\
Hypothesis: Programmers made the obvious mistake and then also copied the bad \
weight output into the wrong calorie slot\
\>", "Subsection",
 CellChangeTimes->{{3.5447074159911346`*^9, 3.544707434719165*^9}, {
  3.5447270664774003`*^9, 3.54472707337309*^9}, {3.5447526462538958`*^9, 
  3.544752658491596*^9}, {3.5448832839803767`*^9, 3.5448832943663254`*^9}}],

Cell[CellGroupData[{

Cell["\<\
If we carry units, this kind of mistake requires willful malfeasance \
\>", "Subsection",
 CellChangeTimes->{{3.54470743776747*^9, 3.544707486602353*^9}, {
  3.544708191440131*^9, 3.5447081975091314`*^9}, {3.5447526890093417`*^9, 
  3.544752691549487*^9}}],

Cell["\<\
Symbolic expressions make the mistake nearly impossible to miss\
\>", "Item",
 CellChangeTimes->{{3.5447270878375363`*^9, 3.5447271075745096`*^9}}]
}, Open  ]],

Cell["\<\
Without units, it\[CloseCurlyQuote]s an honest mistake, too easy to make and \
compound\
\>", "Subsection",
 CellChangeTimes->{{3.5447074883065233`*^9, 3.544707496491342*^9}, {
  3.544707741967887*^9, 3.544707741970887*^9}, {3.54488332050975*^9, 
  3.5448833284112735`*^9}}],

Cell[CellGroupData[{

Cell["\<\
NASA recommended research in units processing after the Mars crash \
\>", "Subsection",
 CellChangeTimes->{{3.5447271107028227`*^9, 3.5447271271754694`*^9}, {
  3.5447527306457233`*^9, 3.5447527334778852`*^9}, {3.5447528122373896`*^9, 
  3.544752819900828*^9}, {3.5447529336553345`*^9, 3.5447529830391593`*^9}, {
  3.5448833511765504`*^9, 3.544883357776785*^9}, {3.544883393604639*^9, 
  3.5448833984535575`*^9}}],

Cell["\<\
Results include Sun\[CloseCurlyQuote]s FORTRESS language and .NET\
\[CloseCurlyQuote]s F#\
\>", "Item",
 CellChangeTimes->{{3.544752985575304*^9, 3.5447529966449375`*^9}, {
  3.54488337397838*^9, 3.54488338919277*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["IT\[CloseCurlyQuote]S WORSE!", "Section",
 CellChangeTimes->{{3.544707514732166*^9, 3.5447075197396665`*^9}, {
  3.5448834052163243`*^9, 3.544883406342546*^9}}],

Cell[TextData[{
 "We found ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"30", " ", "Gram"}], "+", 
    RowBox[{"130", " ", "Gram", " ", "Milli"}]}], TraditionalForm]]]
}], "Subsection",
 CellChangeTimes->{{3.5447075619268847`*^9, 3.544707596072299*^9}}],

Cell[CellGroupData[{

Cell["\<\
Check against the serving size -- use our original weight-finding expressions:\
\>", "Subsection",
 CellChangeTimes->{{3.544707602344926*^9, 3.544707617062398*^9}, {
  3.5447077929459844`*^9, 3.544707805762266*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Convert", "[", " ", 
  RowBox[{
   RowBox[{"nflSummary", " ", "/.", " ", "burgerNutritionFacts"}], ",", " ", 
   "Ounce"}], " ", "]"}]], "Code",
 CellChangeTimes->{{3.5447076225869503`*^9, 3.54470762298599*^9}, {
  3.5447077637630663`*^9, 3.5447077870753975`*^9}, {3.5447080370231314`*^9, 
  3.5447080392381315`*^9}, {3.544710285202126*^9, 3.5447102907441263`*^9}}],

Cell[BoxData[
 RowBox[{"1.0628053404821955`", " ", "Ounce"}]], "Output",
 CellChangeTimes->{3.544735191091518*^9, 3.544877973985315*^9, 
  3.5448784034805417`*^9, 3.544882879306015*^9, 3.5448834094266205`*^9}]
}, Open  ]]
}, Open  ]],

Cell["\<\
Almost 3 ounces of MISSING MASS?\
\>", "Subsection",
 CellChangeTimes->{{3.5447078146991596`*^9, 3.5447078285265417`*^9}, 
   3.544883415912843*^9}],

Cell["Willful underreporting? ", "Subsection",
 CellChangeTimes->{{3.544707831235813*^9, 3.5447078562133102`*^9}, 
   3.544753071421214*^9}],

Cell["Unreported inert ingredients like water? ", "Subsection",
 CellChangeTimes->{{3.544707831235813*^9, 3.5447078562133102`*^9}, {
  3.544753071421214*^9, 3.544753077796579*^9}}],

Cell["We can't say from the data!", "Subsection",
 CellChangeTimes->{{3.544707831235813*^9, 3.5447078562133102`*^9}, {
  3.544753071421214*^9, 3.544753080525735*^9}}],

Cell["\<\
Can we trust the Calories per Serving results?\
\>", "Subsection",
 CellChangeTimes->{{3.5447530820678234`*^9, 3.5447530947805505`*^9}, {
  3.544883434915497*^9, 3.5448834680245504`*^9}}],

Cell[TextData[StyleBox["BOTTOM LINE: Jacquard gives the IPE Developer clear \
opportunity to write apps like this",
 Background->RGBColor[1, 1, 0.85]]], "Subsection",
 CellChangeTimes->{{3.5448834508924885`*^9, 3.5448834786380315`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["THE POINTS AGAIN", "Section",
 CellChangeTimes->{{3.5447278212808633`*^9, 3.5447278381651745`*^9}, {
  3.5448835952441463`*^9, 3.5448835998275833`*^9}}],

Cell["Computing with Expressions beats computing with Code", "Subsection",
 CellChangeTimes->{{3.544727868160175*^9, 3.5447278776942215`*^9}}],

Cell["\<\
Planned interop with JavaScript, C#, Java\
\>", "Subsection",
 CellChangeTimes->{{3.544728198441373*^9, 3.5447282228393726`*^9}, 
   3.544753137772009*^9, {3.544879232124364*^9, 3.544879242102268*^9}, {
   3.5448836519441357`*^9, 3.5448836663405347`*^9}}],

Cell["LINQ is a Given", "Subsection",
 CellChangeTimes->{{3.544727914673523*^9, 3.544727920879902*^9}, {
  3.5447287235507054`*^9, 3.5447288013764873`*^9}, {3.54488367257712*^9, 
  3.544883672785141*^9}}],

Cell["Expressions are just more knowledge", "Subsection",
 CellChangeTimes->{3.544728730174368*^9}],

Cell["Expressions are universal", "Subsection",
 CellChangeTimes->{{3.544727943677373*^9, 3.544727953725373*^9}}],

Cell["Evaluators bring Expressions to life", "Subsection",
 CellChangeTimes->{{3.544728072479373*^9, 3.544728081718373*^9}}],

Cell[TextData[{
 "Authoring environments in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " now and planned for Cloud9"
}], "Subsection",
 CellChangeTimes->{{3.544728166434373*^9, 3.5447281823933725`*^9}, {
  3.5448793336013465`*^9, 3.544879337657304*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["THE COMPUTATION IS VERY SHORT", "Section",
 CellChangeTimes->{{3.5447086131562033`*^9, 3.5447086237872667`*^9}, {
  3.544709904922126*^9, 3.544709905274126*^9}, {3.5447306100243645`*^9, 
  3.5447306115993643`*^9}, {3.5448837036181*^9, 3.544883737443353*^9}}],

Cell[CellGroupData[{

Cell["The entire computation consists of a few expressions", "Subsection",
 CellChangeTimes->{{3.5447086353954268`*^9, 3.544708644091296*^9}}],

Cell[CellGroupData[{

Cell[BoxData["nflSummary"], "Code",
 CellChangeTimes->{{3.544708649788866*^9, 3.544708651717059*^9}}],

Cell[BoxData[
 RowBox[{"Cholesterol", "+", "DietaryFiber", "+", "Protein", "+", "Sodium", 
  "+", "TotalCarbohydrate", "+", "TotalFat"}]], "Output",
 CellChangeTimes->{
  3.5447086526321507`*^9, 3.5447295778923674`*^9, 3.544729727958741*^9, {
   3.5447318811682577`*^9, 3.5447318857397146`*^9}, 3.544732069757115*^9, 
   3.5447346113653593`*^9, 3.5447351911355205`*^9, 3.5448779740403147`*^9, 
   3.544878403520543*^9, 3.544882879366015*^9, 3.544883706168355*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["beefedUpBurgerNutritionFacts"], "Code",
 CellChangeTimes->{{3.5447086626221495`*^9, 3.5447086748943768`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"ServingSize", "\[Rule]", 
    RowBox[{"4", " ", "Ounce"}]}], ",", 
   RowBox[{"AmountPerServing", "\[Rule]", 
    RowBox[{"160", " ", "Calorie"}]}], ",", 
   RowBox[{"CaloriesFromFat", "\[Rule]", 
    RowBox[{"81.`", " ", "Calorie"}]}], ",", 
   RowBox[{"SaturatedFat", "\[Rule]", 
    RowBox[{"4", " ", "fat", " ", "Gram", " ", "saturated"}]}], ",", 
   RowBox[{"Cholesterol", "\[Rule]", 
    RowBox[{"60", " ", "cholesterol", " ", "Gram", " ", "Milli"}]}], ",", 
   RowBox[{"Sodium", "\[Rule]", 
    RowBox[{"70", " ", "Gram", " ", "Milli", " ", "sodium"}]}], ",", 
   RowBox[{"DietaryFiber", "\[Rule]", "0"}], ",", 
   RowBox[{"Sugars", "\[Rule]", "0"}], ",", 
   RowBox[{"TotalFat", "\[Rule]", 
    RowBox[{"9", " ", "fat", " ", "Gram"}]}], ",", 
   RowBox[{"Protein", "\[Rule]", 
    RowBox[{"21", " ", "Gram", " ", "protein"}]}], ",", 
   RowBox[{"TotalCarbohydrate", "\[Rule]", "0"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.544708675471434*^9, 3.5447295779803677`*^9, 3.544729728105756*^9, {
   3.5447318812652674`*^9, 3.544731885830724*^9}, 3.544732069847124*^9, 
   3.5447346114063616`*^9, 3.544735191178523*^9, 3.544877974088315*^9, 
   3.5448784035585456`*^9, 3.544882879421015*^9, 3.5448837071364517`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["calorieFacts"], "Code",
 CellChangeTimes->{{3.5447086909769845`*^9, 3.5447087022551126`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"fat", " ", "Gram", " ", "saturated"}], "\[Rule]", 
    RowBox[{"9", " ", "Calorie"}]}], ",", 
   RowBox[{
    RowBox[{"fat", " ", "Gram"}], "\[Rule]", 
    RowBox[{"9", " ", "Calorie"}]}], ",", 
   RowBox[{
    RowBox[{"Gram", " ", "sugar"}], "\[Rule]", 
    RowBox[{"4", " ", "Calorie"}]}], ",", 
   RowBox[{
    RowBox[{"carbohydrate", " ", "Gram"}], "\[Rule]", 
    RowBox[{"4", " ", "Calorie"}]}], ",", 
   RowBox[{
    RowBox[{"Gram", " ", "protein"}], "\[Rule]", 
    RowBox[{"4", " ", "Calorie"}]}], ",", 
   RowBox[{
    RowBox[{"cholesterol", " ", "Gram"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"fiber", " ", "Gram"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"Gram", " ", "sodium"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"Gram", " ", "Milli"}], "\[Rule]", 
    RowBox[{"0.001`", " ", "Gram"}]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.5447087031201987`*^9, 3.5447295780683675`*^9, 3.544729728194765*^9, {
   3.5447318813652773`*^9, 3.544731885929734*^9}, 3.5447320699951386`*^9, 
   3.544734611447364*^9, 3.5447351912225256`*^9, 3.5448779741343145`*^9, 
   3.5448784036045504`*^9, 3.544882879476015*^9, 3.544883708735605*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"nflSummary", "/.", "beefedUpBurgerNutritionFacts"}], "/.", 
  "calorieFacts"}]], "Code",
 CellChangeTimes->{{3.544708724682355*^9, 3.5447087417620625`*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["STORE EXPRESSIONS AS ENTITIES ", "Section",
 CellChangeTimes->{{3.544708780699956*^9, 3.544708788731759*^9}, {
  3.5447099102261257`*^9, 3.544709910394126*^9}, {3.5448837201066895`*^9, 
  3.5448837490044527`*^9}}],

Cell[CellGroupData[{

Cell["First encode in JSON", "Subsection",
 CellChangeTimes->{{3.5447088557904644`*^9, 3.544708864894375*^9}, 
   3.5448837515827007`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nflSummary", "//", "jsonStringFromExpression"}]], "Code",
 CellChangeTimes->{{3.5447087973156176`*^9, 3.5447088345103364`*^9}}],

Cell[BoxData["\<\"{\\\"head\\\":{\\\"symbol\\\":\\\"Plus\\\"},\\\"args\\\":[{\
\\\"symbol\\\":\\\"Cholesterol\\\"},{\\\"symbol\\\":\\\"DietaryFiber\\\"},{\\\
\"symbol\\\":\\\"Protein\\\"},{\\\"symbol\\\":\\\"Sodium\\\"},{\\\"symbol\\\":\
\\\"TotalCarbohydrate\\\"},{\\\"symbol\\\":\\\"TotalFat\\\"}]}\"\>"], "Output",
 CellChangeTimes->{
  3.5447088359454803`*^9, 3.5447295789863677`*^9, 3.5447297360515504`*^9, {
   3.5447318822513657`*^9, 3.54473188649479*^9}, 3.5447320703211713`*^9, 
   3.544734612096401*^9, 3.544735191337532*^9, 3.544877974562315*^9, 
   3.544878403770567*^9, 3.544882879690015*^9, 3.544883753504884*^9}]
}, Open  ]]
}, Open  ]],

Cell["\<\
Replace symbols with URIs to Expressions Taxonomy / Ontology:\
\>", "Subsection",
 CellChangeTimes->{{3.544708874887374*^9, 3.544708906032488*^9}, {
  3.544709766993126*^9, 3.544709768866126*^9}, {3.5447261860819197`*^9, 
  3.5447261939453692`*^9}, {3.5448837611170807`*^9, 3.5448837633333*^9}}],

Cell[CellGroupData[{

Cell["\<\
This replacement itself is just another Jacquard object / list of rules!\
\>", "Subsection",
 CellChangeTimes->{{3.5447089216180463`*^9, 3.544708933346219*^9}, {
   3.544709778040126*^9, 3.544709779913126*^9}, 3.54488377262018*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"nflSummary", "/.", 
   RowBox[{"{", 
    RowBox[{"Plus", "\[Rule]", "\n", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<$meta\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
          "\"\<knol\>\"", "\[Rule]", "\"\<knol:knowledge.merino.com/\>\""}], 
          ",", "\n", "  ", 
          RowBox[{
          "\"\<expressions\>\"", "\[Rule]", 
           "\"\<knol:expressions.merino.com/\>\""}]}], "}"}]}], ",", "\n", 
       "  ", 
       RowBox[{
       "\"\<knol_identity\>\"", "\[Rule]", 
        "\"\<knol:expressions.merino.com/WellKnown/Plus\>\""}], ",", "\n", 
       "  ", 
       RowBox[{
       "\"\<knol_types/is-a\>\"", "\[Rule]", 
        "\"\<knol:expressions.merino.com/types/builtIn\>\""}], ",", "\n", 
       "  ", 
       RowBox[{
       "\"\<expressions_builtIn/name\>\"", "\[Rule]", "\"\<Plus\>\""}], ",", 
       RowBox[{
       "\"\<expressions_builtIn/Attributes\>\"", "\[Rule]", "\n", "    ", 
        RowBox[{"{", 
         RowBox[{
         "\"\<Flat\>\"", ",", " ", "\"\<Listable\>\"", ",", 
          "\"\<NumericFunction\>\"", ",", "\"\<OneIdentity\>\"", ",", 
          "\"\<Orderless\>\"", ",", "\"\<Protected\>\"", ",", "\n", "    ", 
          RowBox[{"{", 
           RowBox[{
           "\"\<Default\>\"", "\[Rule]", 
            "\"\<knol:expressions.merino.com/values/builtIn/Integers/\
Constants/Zero\>\""}], "}"}]}], "}"}]}], ",", "\n", "  ", 
       RowBox[{
       "\"\<expressions_builtIn/Doclet\>\"", "\[Rule]", 
        "\"\<knol:music.merino.com/expressions/Doclet/Plus\>\""}]}], "}"}]}], 
    "}"}]}], ";"}]], "Code",
 CellChangeTimes->{{3.5447089119400787`*^9, 3.5447089779656806`*^9}, 
   3.5447093973431263`*^9, {3.544709617264126*^9, 3.544709743089126*^9}, {
   3.544710319742126*^9, 3.544710380154126*^9}, {3.54472620759515*^9, 
   3.5447262116413813`*^9}, {3.544726246356367*^9, 3.54472631599335*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["ONCE IN MERINO", "Section",
 CellChangeTimes->{{3.544709817430126*^9, 3.544709823974126*^9}}],

Cell["Build new Expressions by composing existing Expressions", "Subsection",
 CellChangeTimes->{{3.544709838453126*^9, 3.544709852767126*^9}, {
  3.544710394242126*^9, 3.544710405779126*^9}, {3.5447306263593645`*^9, 
  3.544730635726364*^9}}],

Cell["\<\
Indexing, Finding, Composing are all just more Jacquard Expressions\
\>", "Subsection",
 CellChangeTimes->{{3.544709855565126*^9, 3.5447098759571257`*^9}, {
   3.5447264172671423`*^9, 3.5447264215553875`*^9}, 3.5447306380703645`*^9}],

Cell["\<\
The entire system is self-describing at all levels\
\>", "Subsection",
 CellChangeTimes->{{3.544709876611126*^9, 3.544709884779126*^9}, {
  3.544710564498126*^9, 3.5447105756991262`*^9}}],

Cell[CellGroupData[{

Cell["\<\
Grow the Expression store by crowdsourcing computations\
\>", "Subsection",
 CellChangeTimes->{{3.544710576640126*^9, 3.544710609673126*^9}, {
  3.544726430172881*^9, 3.5447264722682886`*^9}, {3.5447269808558393`*^9, 
  3.5447269815209055`*^9}}],

Cell["\<\
exactly as we grow any other knowledge store\
\>", "Item",
 CellChangeTimes->{{3.544726467195998*^9, 3.5447264873011484`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluators everywhere", "Subsection",
 CellChangeTimes->{{3.544726493027476*^9, 3.5447265000598783`*^9}}],

Cell["\<\
Distribute computations for privacy (intelligent agent), perf (reactive \
framework), affinity to data sources (RESTLINQ & bandwidth saving)\
\>", "Item",
 CellChangeTimes->{{3.5447269120929637`*^9, 3.544726919388693*^9}, {
  3.544726962239978*^9, 3.544726972935047*^9}, {3.5447537923724504`*^9, 
  3.544753802801047*^9}, {3.5448838658489027`*^9, 3.544883900418477*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Semantic queries enabled by ",
 StyleBox["Abstract Query DSLs",
  FontSlant->"Italic"]
}], "Subsection",
 CellChangeTimes->{{3.5447104068651257`*^9, 3.5447104456481256`*^9}, {
  3.544710552467126*^9, 3.5447105554501257`*^9}, {3.544726398411064*^9, 
  3.544726399852146*^9}, {3.5447284592923727`*^9, 3.544728465635373*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "Example: you want to build a computation that computes ",
 StyleBox["the average age of singers in the US",
  FontSlant->"Italic"]
}], "Item",
 CellChangeTimes->{{3.544710461423126*^9, 3.544710486856126*^9}}],

Cell[TextData[{
 "This is similar to a computation of ",
 StyleBox["maximum salaries of CEOs in Kentucky",
  FontSlant->"Italic"]
}], "Item",
 CellChangeTimes->{{3.544710487493126*^9, 3.544710512853126*^9}, {
  3.544728480955373*^9, 3.544728480958373*^9}}],

Cell["Abstract Query DSLs find the most abstract form of the query", "Item",
 CellChangeTimes->{{3.5447284819073725`*^9, 3.544728507977373*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Create Abstract Query DSLs automatically from BNFs of specialized computations\
\>", "Subsection",
 CellChangeTimes->{{3.5447105134761257`*^9, 3.544710540389126*^9}, {
  3.5447263671632767`*^9, 3.544726410589761*^9}, {3.544728512033373*^9, 
  3.5447285139453726`*^9}}],

Cell[BoxData[
 RowBox[{"165", " ", "Calorie"}]], "Output",
 CellChangeTimes->{
  3.5447087424121275`*^9, 3.5447295781613674`*^9, 3.544729728285774*^9, {
   3.5447318814642873`*^9, 3.544731886203761*^9}, 3.5447320700861473`*^9, 
   3.544734611499367*^9, 3.544735191268528*^9, 3.5448779741843147`*^9, 
   3.544878403648555*^9, 3.544882879531015*^9, 3.5448837097646847`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["OTHER JACQUARD EXAMPLES", "Section",
 CellChangeTimes->{{3.5447271725870104`*^9, 3.544727181073859*^9}}],

Cell[CellGroupData[{

Cell["Get Me to the Airport on Time", "Subsection",
 CellChangeTimes->{{3.544727188354587*^9, 3.5447272012118726`*^9}}],

Cell["\<\
Reactive LINQ, distributed example monitoring traffic, current location, and \
flight status\
\>", "Item",
 CellChangeTimes->{{3.54472720898765*^9, 3.5447272370844593`*^9}, {
  3.544728705404891*^9, 3.544728706364987*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Help Me Buy a Car", "Subsection",
 CellChangeTimes->{{3.5447272410368547`*^9, 3.54472724498925*^9}}],

Cell["Distributed workflow with privacy", "Item",
 CellChangeTimes->{{3.5447272527660275`*^9, 3.5447272845202026`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["What is the Average Age of Pop Singers in the US?", "Subsection",
 CellChangeTimes->{{3.5447272941121616`*^9, 3.544727312384989*^9}}],

Cell["Example of large class of map-reduce style queries", "Item",
 CellChangeTimes->{{3.5447273174494953`*^9, 3.544727338150565*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
\[OpenCurlyDoubleQuote]If you Drive Out of Your Way, I\[CloseCurlyQuote]ll \
Give You a Discount\[CloseCurlyDoubleQuote]\
\>", "Subsection",
 CellChangeTimes->{{3.544727389044654*^9, 3.5447274069414434`*^9}}],

Cell["Partial-trust, geospatial, secret auction process", "Item",
 CellChangeTimes->{{3.544727415846334*^9, 3.5447274337591248`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["EXAMPLES IN THE WORKS", "Section",
 CellChangeTimes->{{3.544727353651115*^9, 3.54472736120287*^9}}],

Cell["Action & Task Brokers", "Subsection",
 CellChangeTimes->{{3.544727365451295*^9, 3.5447273693796873`*^9}, {
  3.5447306570063643`*^9, 3.5447306692753644`*^9}}],

Cell[TextData[{
 "Conversations: ",
 StyleBox["Schedule Me a Meeting with Bob;",
  FontSlant->"Italic"],
 " ",
 StyleBox["Negotiation Coach & Angel",
  FontSlant->"Italic"]
}], "Subsection",
 CellChangeTimes->{{3.5447274407348223`*^9, 3.544727472633012*^9}, {
  3.5448839958722715`*^9, 3.5448840186483583`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["\<\
APPENDIX: COMPUTING NFLS ON-THE-FLY\
\>", "Section",
 CellChangeTimes->{{3.544709892412126*^9, 3.5447098986661263`*^9}, 
   3.5447282482943726`*^9, {3.5448840390012264`*^9, 3.5448840534895983`*^9}}],

Cell["\<\
What would the NFL be for your mom\[CloseCurlyQuote]s Pasta Primavera recipe? \
 \
\>", "Subsection",
 CellChangeTimes->{{3.544710648789126*^9, 3.544710678271126*^9}, 
   3.5447282482943726`*^9, {3.544883534561824*^9, 3.54488353502487*^9}}],

Cell[TextData[{
 StyleBox["Only",
  FontSlant->"Italic"],
 " ",
 StyleBox["you",
  FontSlant->"Italic"],
 " know the recipe; no point searching "
}], "Subsection",
 CellChangeTimes->{{3.544710678899126*^9, 3.544710696820126*^9}, {
   3.5447274929470434`*^9, 3.5447274933700857`*^9}, 3.5447282482943726`*^9, {
   3.54472907312766*^9, 3.544729075191866*^9}}],

Cell[TextData[{
 StyleBox["Compute it on-the-fly",
  Background->RGBColor[1, 1, 0.85]],
 " by adding up the NFLs of the ingredients"
}], "Subsection",
 CellChangeTimes->{{3.544710697235126*^9, 3.5447107215231256`*^9}, 
   3.544728248295373*^9}],

Cell["\<\
NFLs for real-world recipes could be a whole business built on Merino
\
\>", "Subsection",
 CellChangeTimes->{{3.5447314285273647`*^9, 3.5447314511183643`*^9}}],

Cell["\<\
GEEKNOTE: This is a vector-space sum: unit vectors are the NFLs for the \
ingredients, coefficients are the amounts from your recipe\
\>", "Subsection",
 CellChangeTimes->{{3.5447107220741262`*^9, 3.5447107510411263`*^9}, {
   3.5447275000353713`*^9, 3.544727500227371*^9}, 3.544728248295373*^9, {
   3.544728822036553*^9, 3.544728822666616*^9}, {3.5448835696192007`*^9, 
   3.5448835717784147`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["YOUR SECRET RECIPE FROM MOM", "Subsection",
 CellChangeTimes->{{3.544730211763117*^9, 3.5447302282527657`*^9}, {
  3.5448840719803305`*^9, 3.5448840813312244`*^9}, {3.5448841619355807`*^9, 
  3.544884167157545*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"myRecipe", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"1.", " ", "Tablespoon", " ", "\"\<olive oil\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"16", " ", "Ounce", " ", "\"\<zucchini\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"3.5", " ", "Teaspoon", " ", "\"\<salt\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"1.5", " ", "Pound", " ", "\"\<eggplant\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"1.", " ", "\"\<onion\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{"2", " ", "\"\<bell pepper\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{"14.5", " ", "Ounce", " ", "\"\<stewed tomato\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"0.5", " ", "Teaspoon", " ", "\"\<black pepper\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"0.5", " ", "Teaspoon", " ", "\"\<dried basil\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"0.5", " ", "Teaspoon", " ", "\"\<sugar\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"12", " ", "Ounce", " ", "\"\<pasta\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"0.25", " ", "Cup", " ", "\"\<parmesan cheese\>\""}]}], "}"}]}], 
  ";"}]], "Code",
 CellChangeTimes->{{3.5443620540864058`*^9, 3.544362219111907*^9}, {
   3.5443684706175194`*^9, 3.5443684766695194`*^9}, {3.5443685871715193`*^9, 
   3.5443686086105194`*^9}, {3.544372018764181*^9, 3.5443720425355577`*^9}, {
   3.5443745690292053`*^9, 3.544374596102913*^9}, {3.544374756734974*^9, 
   3.5443747834076414`*^9}, 3.5443907471010656`*^9, {3.544390783275066*^9, 
   3.544390872118066*^9}, {3.5447286544053726`*^9, 3.5447286575893726`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["\<\
DATA MINING FOR INGREDIENT DENSITIES\
\>", "Subsection",
 CellChangeTimes->{{3.5447302394698873`*^9, 3.54473024919886*^9}, {
  3.544884184797377*^9, 3.544884191372299*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"myRecipe", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"1.0", " ", "Tablespoon", " ", "\"\<olive oil\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"16", " ", "Ounce", " ", "\"\<zucchini\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"3.5", " ", "Teaspoon", " ", "\"\<salt\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"1.5", " ", "Pound", " ", "\"\<eggplant\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"1.0", " ", "\"\<onion\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{"2.0", " ", "\"\<bell pepper\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{"14.5", " ", "Ounce", " ", "\"\<stewed tomato\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"0.5", " ", "Teaspoon", " ", "\"\<black pepper\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"0.5", " ", "Teaspoon", " ", "\"\<dried basil\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"0.5", " ", "Teaspoon", " ", "\"\<sugar\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"12", " ", "Ounce", " ", "\"\<pasta\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"0.25", " ", "Cup", " ", "\"\<parmesan cheese\>\""}]}], "}"}]}], 
  ";"}]], "Input",
 CellOpen->False,
 CellChangeTimes->{{3.5443908907660656`*^9, 3.544390898687066*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"getDensityQuote", "[", "\"\<olive oil\>\"", "]"}], " ", "=", " ", 
   RowBox[{
    RowBox[{"Mean", "[", 
     RowBox[{"{", 
      RowBox[{"6.68", ",", "7.67"}], "}"}], "]"}], " ", "*", " ", 
    RowBox[{"Pound", " ", "/", " ", "Gallon"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getDensityQuote", "[", "\"\<salt\>\"", "]"}], " ", "=", " ", 
   RowBox[{"5.69", " ", 
    RowBox[{"Gram", " ", "/", " ", "Teaspoon"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getDensityQuote", "[", "\"\<black pepper\>\"", "]"}], " ", "=", 
   " ", 
   RowBox[{"2.1", " ", 
    RowBox[{"Gram", " ", "/", " ", "Teaspoon"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getDensityQuote", "[", "\"\<dried basil\>\"", "]"}], " ", "=", 
   " ", 
   RowBox[{"1.0", " ", 
    RowBox[{"Gram", " ", "/", " ", "Teaspoon"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getDensityQuote", "[", "\"\<sugar\>\"", "]"}], " ", "=", " ", 
   RowBox[{"4.2", " ", 
    RowBox[{"Gram", " ", "/", " ", "Teaspoon"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getDensityQuote", "[", "\"\<parmesan cheese\>\"", "]"}], " ", "=",
    " ", 
   RowBox[{"88", " ", 
    RowBox[{"Gram", " ", "/", " ", "Cup"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"getDensityQuote", "[", "___", "]"}], " ", "=", " ", "1.0"}], 
  ";"}]}], "Code",
 CellChangeTimes->{{3.54438388322441*^9, 3.544383948586946*^9}, {
   3.5443839933904257`*^9, 3.5443840561547017`*^9}, {3.5443841005651426`*^9, 
   3.544384117055791*^9}, {3.544384175978683*^9, 3.5443841762507105`*^9}, {
   3.5443910263040657`*^9, 3.5443910566860657`*^9}, {3.5443911059160657`*^9, 
   3.5443911067470655`*^9}, {3.544451638851782*^9, 3.5444516545239153`*^9}, 
   3.544531335073104*^9, 3.5447276705999327`*^9, {3.544729411517495*^9, 
   3.544729415844928*^9}, {3.5447538320897217`*^9, 3.5447538703279095`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell[TextData[{
 "GRAMS PER TARGET VOLUME FROM DENSITY QUOTE \nargs: [ TargetVolume (",
 StyleBox["e.g.Tablespoon",
  FontSlant->"Italic"],
 "), DataMinedDensity ]"
}], "Subsection",
 CellChangeTimes->{{3.544729868338778*^9, 3.5447298969396377`*^9}, {
  3.544729933095253*^9, 3.5447299528232255`*^9}, {3.5448842218125057`*^9, 
  3.544884272257048*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"gramPerTargetVolumeFromDensityQuote", "[", "\[IndentingNewLine]", 
   RowBox[{"targetVolume_", ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"d_", "?", "NumberQ"}], " ", "*", " ", 
     RowBox[{"quotedWeight_", "/", "quotedVolume_"}]}]}], "]"}], ":=", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"d", "*", 
     RowBox[{"Convert", "[", 
      RowBox[{"quotedWeight", ",", "Gram"}], "]"}]}], ")"}], "/", 
   RowBox[{"Convert", "[", 
    RowBox[{"quotedVolume", ",", "targetVolume"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.544372844767008*^9, 3.5443729744140415`*^9}, {
   3.544373018176665*^9, 3.5443732274228926`*^9}, {3.5443733213308926`*^9, 
   3.544373325595893*^9}, {3.5443733780798926`*^9, 3.5443734087978926`*^9}, 
   3.5443735646148925`*^9, {3.5443737002118926`*^9, 3.5443737254688926`*^9}, {
   3.5443737845798926`*^9, 3.544373843319893*^9}, {3.5443739317318926`*^9, 
   3.5443739472908926`*^9}, {3.5443740785021577`*^9, 3.544374109367244*^9}, {
   3.544374952753574*^9, 3.544374958226121*^9}, {3.544375018484146*^9, 
   3.5443750235486526`*^9}, {3.5443751694202385`*^9, 
   3.5443751753498316`*^9}, {3.544386894041546*^9, 3.5443869071499233`*^9}, {
   3.544531292731119*^9, 3.5445313049951177`*^9}, {3.5445417998467007`*^9, 
   3.544541802725989*^9}, {3.5445465489764476`*^9, 3.5445465857150984`*^9}, {
   3.5447298104909935`*^9, 3.544729824923437*^9}, {3.544885181302472*^9, 
   3.5448851862994723`*^9}}],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{3.5448851719769726`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "WEIGHT RULE FROM QUANTIFIED INGREDIENT VOLUME\nargs: [ Volume ",
 StyleBox["e.g. 4 Teaspoon",
  FontSlant->"Italic"],
 " ]"
}], "Subsection",
 CellChangeTimes->{{3.5447299021881623`*^9, 3.544729939933937*^9}, {
  3.5448842757910213`*^9, 3.5448842962803373`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"weightRuleFromQuantifiedIngredientVolume", "[", 
     RowBox[{
      RowBox[{"quantity_", "?", "NumberQ"}], "   ", "*", "   ", "ingredient_",
       "   ", "*", 
      RowBox[{"volume", ":", 
       RowBox[{"(", 
        RowBox[{
        "Teaspoon", "|", "Tablespoon", "|", "Cup", "|", "FluidOunce", "|", 
         "Pint", "|", "Gallon"}], ")"}]}]}], "]"}], ":=", " ", 
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"ingredient", "*", "volume"}], " ", "\[Rule]", 
     RowBox[{"ingredient", "*", 
      RowBox[{"gramPerTargetVolumeFromDensityQuote", "[", 
       RowBox[{"volume", ",", "\[IndentingNewLine]", 
        RowBox[{"getDensityQuote", "[", "ingredient", "]"}]}], "]"}], "*", 
      "volume"}]}]}], ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"weightRuleFromQuantifiedIngredientVolume", "[", "___", "]"}], ":=", 
  RowBox[{"{", "}"}]}]}], "Input",
 CellChangeTimes->{{3.5443761551167984`*^9, 3.544376347594044*^9}, {
   3.5443835577508664`*^9, 3.544383567438835*^9}, {3.5443924123064775`*^9, 
   3.544392418695755*^9}, {3.5445313853461*^9, 3.54453140875459*^9}, {
   3.54454664764571*^9, 3.544546662616715*^9}, {3.5447299767546186`*^9, 
   3.5447300022161646`*^9}, 3.5447300334762897`*^9, 3.544730696745364*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["VOLUME RULES", "Subsection",
 CellChangeTimes->{{3.5447300479637384`*^9, 3.544730049947937*^9}, {
  3.544884212924065*^9, 3.544884215275058*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"volumeRules", "=", 
    RowBox[{"SelectMany", "[", 
     RowBox[{"myRecipe", ",", "weightRuleFromQuantifiedIngredientVolume"}], 
     "]"}]}], ")"}], "//", "gridRules"}]], "Input",
 CellChangeTimes->{{3.5443767318664675`*^9, 3.544376750833364*^9}, {
  3.5443836744545355`*^9, 3.5443836868717775`*^9}, {3.544386363259926*^9, 
  3.544386366096938*^9}, {3.544387062438284*^9, 3.5443870928282843`*^9}, {
  3.544730054429385*^9, 3.544730057858728*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"\<\"olive oil\"\>", " ", "Tablespoon"}], 
     RowBox[{"12.71297890625`", " ", "\<\"olive oil\"\>", " ", "Gram"}]},
    {
     RowBox[{"\<\"salt\"\>", " ", "Teaspoon"}], 
     RowBox[{"5.69`", " ", "\<\"salt\"\>", " ", "Gram"}]},
    {
     RowBox[{"\<\"black pepper\"\>", " ", "Teaspoon"}], 
     RowBox[{"2.1`", " ", "\<\"black pepper\"\>", " ", "Gram"}]},
    {
     RowBox[{"\<\"dried basil\"\>", " ", "Teaspoon"}], 
     RowBox[{"1.`", " ", "\<\"dried basil\"\>", " ", "Gram"}]},
    {
     RowBox[{"\<\"sugar\"\>", " ", "Teaspoon"}], 
     RowBox[{"4.2`", " ", "\<\"sugar\"\>", " ", "Gram"}]},
    {
     RowBox[{"\<\"parmesan cheese\"\>", " ", "Cup"}], 
     RowBox[{"88", " ", "\<\"parmesan cheese\"\>", " ", "Gram"}]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxBackground->{"Columns" -> {
       RGBColor[1, 0.9, 0.8], {
        RGBColor[1, 1, 0.85]}}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{3.544730058785821*^9, 3.544731886880829*^9, 
  3.544732070689208*^9, 3.54473519147954*^9, 3.544878403985588*^9, 
  3.544884216681058*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["\<\
RULES FOR WHOLE-ITEM INGREDIENTS\
\>", "Subsection",
 CellChangeTimes->{{3.5447300962955713`*^9, 3.544730109422884*^9}, {
  3.544884312055174*^9, 3.544884323941539*^9}}],

Cell[CellGroupData[{

Cell["More Data Mining", "Subsubsection",
 CellChangeTimes->{{3.544730194731414*^9, 3.544730198251766*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"getWholeItemQuote", "[", "\"\<onion\>\"", "]"}], "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1.0", "/", "3"}], ")"}], "Pound"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getWholeItemQuote", "[", "\"\<bell pepper\>\"", "]"}], "=", 
   RowBox[{"0.5", 
    RowBox[{"Pound", "/", "4"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.544387208533284*^9, 3.544387255917284*^9}, {
  3.544391130305066*^9, 3.544391168415066*^9}, {3.544392315430066*^9, 
  3.544392315656066*^9}, {3.544546764611312*^9, 3.544546770626109*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
    "weightRuleFromQuantifiedWholeItemIngredient", "[", "\[IndentingNewLine]", 
     RowBox[{"Except", "[", 
      RowBox[{
       RowBox[{"_", "  ", "*", "  ", "_String", "  ", "*", "  ", "_Symbol"}], 
       ",", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"don", "'"}], "t", " ", "match", " ", "a", " ", "triple", 
         " ", "rule"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"_", "?", "NumberQ"}], "  ", "*", "  ", "ingredient_"}]}], 
      " ", 
      RowBox[{"(*", " ", 
       RowBox[{"do", " ", "match", " ", "a", " ", "pair"}], " ", "*)"}], 
      "]"}], "]"}], ":=", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{"generate", " ", "the", " ", "following", " ", "rule"}], " ", 
     "*)"}], "\[IndentingNewLine]", 
    RowBox[{"ingredient", "\[Rule]", 
     RowBox[{"ingredient", "*", 
      RowBox[{"getWholeItemQuote", "[", "ingredient", "]"}]}]}]}], ";"}], 
  " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"weightRuleFromQuantifiedWholeItemIngredient", "[", "___", "]"}], 
   "=", 
   RowBox[{"{", "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.544387309806284*^9, 3.544387365015284*^9}, {
   3.5443875269202843`*^9, 3.544387534383284*^9}, {3.544387665155284*^9, 
   3.544387746221284*^9}, 3.544387818699284*^9, {3.544388138794284*^9, 
   3.544388147345284*^9}, {3.544390344067691*^9, 3.5443903471300783`*^9}, {
   3.544392084930066*^9, 3.5443921117770658`*^9}, {3.544392247586066*^9, 
   3.544392253347066*^9}, {3.5443923055510654`*^9, 3.544392374196066*^9}, {
   3.5444517565343137`*^9, 3.5444517938823814`*^9}, 3.54453150027007*^9, {
   3.5445418812978125`*^9, 3.5445418897696595`*^9}, {3.5445467825457244`*^9, 
   3.5445468464283714`*^9}, {3.5447301274746885`*^9, 3.5447301604029813`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["WHOLE-ITEM RULES", "Subsection",
 CellChangeTimes->{{3.5447307209853644`*^9, 3.5447307262503643`*^9}, {
  3.544884339926375*^9, 3.5448843443093414`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"wholeItemRules", "=", 
    RowBox[{"SelectMany", "[", 
     RowBox[{"myRecipe", ",", "weightRuleFromQuantifiedWholeItemIngredient"}],
      "]"}]}], ")"}], "//", "gridRules"}]], "Input",
 CellChangeTimes->{{3.544387407004284*^9, 3.544387443379284*^9}, 
   3.5443903347825484`*^9, {3.5443921217640657`*^9, 3.5443921440230656`*^9}, {
   3.5443921874290657`*^9, 3.5443922328110657`*^9}, {3.544392382290066*^9, 
   3.5443923868823934`*^9}, {3.5447301743873796`*^9, 3.544730179613902*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"onion\"\>", 
     RowBox[{"0.3333333333333333`", " ", "\<\"onion\"\>", " ", "Pound"}]},
    {"\<\"bell pepper\"\>", 
     RowBox[{"0.125`", " ", "\<\"bell pepper\"\>", " ", "Pound"}]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxBackground->{"Columns" -> {
       RGBColor[1, 0.9, 0.8], {
        RGBColor[1, 1, 0.85]}}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{3.544730180479989*^9, 3.5447318872688675`*^9, 
  3.544732070880227*^9, 3.5447351915685453`*^9, 3.5448784040985994`*^9, 
  3.5448843456893387`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["RECIPE IN GRAMS", "Subsection",
 CellChangeTimes->{{3.5447308060293646`*^9, 3.5447308114213643`*^9}, {
  3.544884351565256*^9, 3.544884354084223*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"recipeInGrams", "=", "\[IndentingNewLine]", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"ingredient", ",", 
         RowBox[{"Convert", "[", 
          RowBox[{"ingredient", ",", "Gram"}], "]"}]}], "]"}], ",", 
       RowBox[{
        RowBox[{"myRecipe", "/.", "volumeRules"}], "/.", "wholeItemRules"}]}],
       "]"}]}], ")"}], "//", "gridRules"}]}]], "Input",
 CellChangeTimes->{{3.5447307679703646`*^9, 3.5447308306703644`*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"12.71297890625`", " ", "\<\"olive oil\"\>", " ", "Gram"}]},
    {
     RowBox[{"453.592`", " ", "\<\"zucchini\"\>", " ", "Gram"}]},
    {
     RowBox[{"19.915000000000003`", " ", "\<\"salt\"\>", " ", "Gram"}]},
    {
     RowBox[{"680.3879999999999`", " ", "\<\"eggplant\"\>", " ", "Gram"}]},
    {
     RowBox[{"151.19733333333332`", " ", "\<\"onion\"\>", " ", "Gram"}]},
    {
     RowBox[{"113.398`", " ", "\<\"bell pepper\"\>", " ", "Gram"}]},
    {
     RowBox[{"411.06775`", " ", "\<\"stewed tomato\"\>", " ", "Gram"}]},
    {
     RowBox[{"1.05`", " ", "\<\"black pepper\"\>", " ", "Gram"}]},
    {
     RowBox[{"0.5`", " ", "\<\"dried basil\"\>", " ", "Gram"}]},
    {
     RowBox[{"2.1`", " ", "\<\"sugar\"\>", " ", "Gram"}]},
    {
     RowBox[{"340.19399999999996`", " ", "\<\"pasta\"\>", " ", "Gram"}]},
    {
     RowBox[{"22.`", " ", "\<\"parmesan cheese\"\>", " ", "Gram"}]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxBackground->{"Columns" -> {{
        RGBColor[0.88, 1, 0.88]}}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{{3.544730773674364*^9, 3.544730814238364*^9}, 
   3.5447318873638773`*^9, 3.544732071029242*^9, 3.5447351916135473`*^9, 
   3.5448784041516047`*^9, 3.5448843567362204`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Just for Fun", "Subsection",
 CellChangeTimes->{{3.5447308351713643`*^9, 3.5447308372273645`*^9}, {
  3.544884362220169*^9, 3.5448843629241695`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Convert", "[", 
  RowBox[{
   RowBox[{"Apply", "[", 
    RowBox[{"Plus", ",", 
     RowBox[{"Cases", "[", 
      RowBox[{"recipeInGrams", ",", 
       RowBox[{
        RowBox[{"q_", "*", "_String", "*", "u_Symbol"}], "\[Rule]", 
        RowBox[{"q", " ", "u"}]}]}], "]"}]}], "]"}], ",", "Pound"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.544446109883408*^9, 3.544446110584408*^9}, {
  3.544735658524254*^9, 3.544735660020339*^9}, {3.544884393011835*^9, 
  3.544884393683835*^9}}],

Cell[BoxData[
 RowBox[{"4.868064388789007`", " ", "Pound"}]], "Output",
 CellChangeTimes->{{3.544446115357408*^9, 3.5444461178544083`*^9}, 
   3.544447937415754*^9, 3.544448129777988*^9, 3.5444564862063885`*^9, 
   3.544456685884389*^9, 3.544456740877389*^9, {3.5444567772813888`*^9, 
   3.544456805797389*^9}, 3.544458735397184*^9, {3.544459872494031*^9, 
   3.5444599017166586`*^9}, {3.544459936198778*^9, 3.544459943124441*^9}, 
   3.544531126165187*^9, 3.5445315793660707`*^9, 3.54453190891057*^9, 
   3.544538513111477*^9, 3.5445419605257206`*^9, 3.5445460408875237`*^9, 
   3.544546699613314*^9, {3.5445468520903716`*^9, 3.5445468687033715`*^9}, 
   3.5445605462000003`*^9, 3.544560873043559*^9, 3.5447308457203646`*^9, 
   3.544731887548896*^9, 3.54473207120826*^9, 3.544735191701553*^9, 
   3.5447356610994005`*^9, 3.54487840420061*^9, {3.5448843738580456`*^9, 
   3.544884394389835*^9}}]
}, Open  ]],

Cell["\<\
atsa lotta pasta -- serves at least six\
\>", "Text",
 CellChangeTimes->{{3.54488438145146*^9, 3.5448844075857015`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["UNIT-NFLS FOR ALL INGREDIENTS", "Subsection",
 CellChangeTimes->{{3.5447309050003643`*^9, 3.544730910384364*^9}, {
  3.5448844154096155`*^9, 3.5448844265044975`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ClearAll", "[", 
   RowBox[{"nfls", ",", "nflNames"}], "]"}], ";", " ", 
  RowBox[{"nflNames", "=", 
   RowBox[{"{", "}"}]}], ";"}]], "Code",
 CellChangeTimes->{{3.5444519771587067`*^9, 3.5444519919801893`*^9}, {
   3.544456412207389*^9, 3.544456419523389*^9}, 3.544884438129367*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"createNutritionFactsLabel", "[", 
    RowBox[{
    "name_", ",", "\n", "servingSize_", ",", "totalCalories_", ",", 
     "fatCalories_", ",", "\[IndentingNewLine]", "totalFat_", ",", 
     "totalFatPercent_", ",", "\[IndentingNewLine]", "saturatedFat_", ",", 
     "saturatedFatPercent_", ",", "transFat_", ",", "\[IndentingNewLine]", 
     "cholesterol_", ",", "cholesterolPercent_", ",", "sodium_", ",", 
     "sodiumPercent_", ",", "totalCarbohydrates_", ",", 
     "totalCarbohydratesPercent_", ",", "\[IndentingNewLine]", 
     "dietaryFiber_", ",", "dietaryFiberPercent_", ",", "\[IndentingNewLine]",
      "sugars_", ",", "protein_", ",", "proteinPercent_", ",", 
     "\[IndentingNewLine]", "vitaminAPercent_", ",", "vitaminCPercent_", ",", 
     "calciumPercent_", ",", "ironPercent_"}], "]"}], ":=", "\n", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"AppendTo", "[", 
      RowBox[{"nflNames", ",", "name"}], "]"}], ";", "\n", 
     RowBox[{
      RowBox[{"nfls", "[", "name", "]"}], "=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<name\>\"", "\[Rule]", "name"}], ",", 
        RowBox[{"\"\<serving size\>\"", "\[Rule]", "servingSize"}], ",", 
        RowBox[{"\"\<total calories\>\"", "\[Rule]", "totalCalories"}], ",", 
        RowBox[{"\"\<fat calories\>\"", "\[Rule]", "fatCalories"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"\"\<total fat\>\"", "\[Rule]", "totalFat"}], ",", 
        RowBox[{"\"\<% daily total fat\>\"", "\[Rule]", "totalFatPercent"}], 
        ",", 
        RowBox[{"\"\<saturated fat\>\"", "\[Rule]", "saturatedFat"}], ",", 
        RowBox[{
        "\"\<% daily saturated fat\>\"", "\[Rule]", "saturatedFatPercent"}], 
        ",", 
        RowBox[{"\"\<trans fat\>\"", "\[Rule]", "transFat"}], ",", 
        RowBox[{"\"\<cholesterol\>\"", "\[Rule]", "cholesterol"}], ",", 
        RowBox[{
        "\"\<% daily cholesterol\>\"", "\[Rule]", "cholesterolPercent"}], ",", 
        RowBox[{"\"\<sodium\>\"", "\[Rule]", "sodium"}], ",", 
        RowBox[{"\"\<% daily sodium\>\"", "\[Rule]", "sodiumPercent"}], ",", 
        RowBox[{
        "\"\<total carbohydrates\>\"", "\[Rule]", "totalCarbohydrates"}], ",", 
        RowBox[{
        "\"\<% daily carbohydrates\>\"", "\[Rule]", 
         "totalCarbohydratesPercent"}], ",", 
        RowBox[{"\"\<dietary fiber\>\"", "\[Rule]", "dietaryFiber"}], ",", 
        RowBox[{
        "\"\<%daily dietary fiber\>\"", "\[Rule]", "dietaryFiberPercent"}], 
        ",", 
        RowBox[{"\"\<sugars\>\"", "\[Rule]", "sugars"}], ",", 
        RowBox[{"\"\<protein\>\"", "\[Rule]", "protein"}], ",", 
        RowBox[{"\"\<% daily protein\>\"", "\[Rule]", "proteinPercent"}], ",", 
        RowBox[{"\"\<vitamin A\>\"", "\[Rule]", "vitaminAPercent"}], ",", 
        RowBox[{"\"\<vitamin C\>\"", "\[Rule]", "vitaminCPercent"}], ",", 
        RowBox[{"\"\<calcium\>\"", "\[Rule]", "calciumPercent"}], ",", 
        RowBox[{"\"\<iron\>\"", "\[Rule]", "ironPercent"}]}], "}"}]}]}], 
    ")"}]}], ";"}]], "Code",
 CellChangeTimes->{{3.5444347314111977`*^9, 3.5444347645210915`*^9}, {
   3.5444350725627103`*^9, 3.544435125374731*^9}, {3.5444356468835597`*^9, 
   3.5444356963023863`*^9}, {3.544435727897194*^9, 3.54443573168141*^9}, 
   3.5444476074564066`*^9, {3.5444479019312057`*^9, 3.5444479028743*^9}, 
   3.5444480711621275`*^9, {3.5444511483209887`*^9, 3.544451151719989*^9}, {
   3.544451183599989*^9, 3.5444511905102143`*^9}, {3.5444564407683887`*^9, 
   3.544456475830389*^9}, {3.544456678543389*^9, 3.544456681276389*^9}, {
   3.544456731684389*^9, 3.5444567613033886`*^9}, {3.5444567960463886`*^9, 
   3.544456800419389*^9}, {3.5447309205173645`*^9, 3.544730925205364*^9}, {
   3.544731794106552*^9, 3.544731809771119*^9}, 3.5447320591370525`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["Olive Oil", "Subsection",
 CellChangeTimes->{{3.5447313261873646`*^9, 3.5447313286033645`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"createNutritionFactsLabel", "[", 
   RowBox[{"\"\<olive oil\>\"", ",", 
    RowBox[{"216", " ", "Gram"}], ",", 
    RowBox[{"1910", " ", "Calorie"}], ",", 
    RowBox[{"1910", " ", "Calorie"}], ",", 
    RowBox[{"216", " ", "Gram"}], ",", 
    RowBox[{"332", " ", "Percent"}], ",", 
    RowBox[{"30", " ", "Gram"}], ",", 
    RowBox[{"149", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", "\[IndentingNewLine]", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"4", " ", "Milli", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", "\[IndentingNewLine]", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"7", " ", "Percent"}]}], "]"}], "//", "gridRules"}]], "Input",
 CellChangeTimes->{{3.5447309643203645`*^9, 3.544730968898364*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"name\"\>", "\<\"olive oil\"\>"},
    {"\<\"serving size\"\>", 
     RowBox[{"216", " ", "Gram"}]},
    {"\<\"total calories\"\>", 
     RowBox[{"1910", " ", "Calorie"}]},
    {"\<\"fat calories\"\>", 
     RowBox[{"1910", " ", "Calorie"}]},
    {"\<\"total fat\"\>", 
     RowBox[{"216", " ", "Gram"}]},
    {"\<\"% daily total fat\"\>", 
     RowBox[{"332", " ", "Percent"}]},
    {"\<\"saturated fat\"\>", 
     RowBox[{"30", " ", "Gram"}]},
    {"\<\"% daily saturated fat\"\>", 
     RowBox[{"149", " ", "Percent"}]},
    {"\<\"trans fat\"\>", "0"},
    {"\<\"cholesterol\"\>", "0"},
    {"\<\"% daily cholesterol\"\>", "0"},
    {"\<\"sodium\"\>", 
     RowBox[{"4", " ", "Gram", " ", "Milli"}]},
    {"\<\"% daily sodium\"\>", "0"},
    {"\<\"total carbohydrates\"\>", "0"},
    {"\<\"% daily carbohydrates\"\>", "0"},
    {"\<\"dietary fiber\"\>", "0"},
    {"\<\"%daily dietary fiber\"\>", "0"},
    {"\<\"sugars\"\>", "0"},
    {"\<\"protein\"\>", "0"},
    {"\<\"% daily protein\"\>", "0"},
    {"\<\"vitamin A\"\>", "0"},
    {"\<\"vitamin C\"\>", "0"},
    {"\<\"calcium\"\>", "0"},
    {"\<\"iron\"\>", 
     RowBox[{"7", " ", "Percent"}]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxBackground->{"Columns" -> {
       RGBColor[1, 0.9, 0.8], {
        RGBColor[1, 1, 0.85]}}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{3.544730969804364*^9, 3.544731887750916*^9, 
  3.544732071469286*^9, 3.544735191790558*^9, 3.5448784043046207`*^9, 
  3.544884518311525*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["Zucchini, summer, with skin, raw", "Subsection",
 CellChangeTimes->{{3.5444361372046046`*^9, 3.544436142786924*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"createNutritionFactsLabel", "[", 
   RowBox[{"\"\<zucchini\>\"", ",", 
    RowBox[{"124", " ", "Gram"}], ",", 
    RowBox[{"20", " ", "Calorie"}], ",", 
    RowBox[{"2", " ", "Calorie"}], ",", "\[IndentingNewLine]", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", "\[IndentingNewLine]", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"12", " ", "Milli", " ", "Gram"}], ",", 
    RowBox[{"1.0", " ", "Percent"}], ",", 
    RowBox[{"4", " ", "Gram"}], ",", 
    RowBox[{"1.0", " ", "Percent"}], ",", 
    RowBox[{"1.0", " ", "Gram"}], ",", 
    RowBox[{"5", " ", "Percent"}], ",", " ", 
    RowBox[{"2", " ", "Gram"}], ",", 
    RowBox[{"2", " ", "Gram"}], ",", 
    RowBox[{"0", "Percent"}], ",", "\[IndentingNewLine]", 
    RowBox[{"5", " ", "Percent"}], ",", 
    RowBox[{"35", " ", "Percent"}], ",", " ", 
    RowBox[{"2", " ", "Percent"}], ",", 
    RowBox[{"2", " ", "Percent"}]}], "]"}], "//", "gridRules"}]], "Input",
 CellChangeTimes->{{3.5444347314111977`*^9, 3.544434776067752*^9}, {
   3.544434862438692*^9, 3.5444348698791175`*^9}, {3.5444349151697083`*^9, 
   3.544434921688081*^9}, {3.544434974944127*^9, 3.544434994648254*^9}, {
   3.5444351659130497`*^9, 3.544435237330135*^9}, {3.5444479199880114`*^9, 
   3.544447920414054*^9}, {3.544448072911302*^9, 3.5444480732153325`*^9}, {
   3.544451204671461*^9, 3.5444512090397716`*^9}, {3.5444587450291843`*^9, 
   3.544458749108184*^9}, 3.5447311682303643`*^9}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"name\"\>", "\<\"zucchini\"\>"},
    {"\<\"serving size\"\>", 
     RowBox[{"124", " ", "Gram"}]},
    {"\<\"total calories\"\>", 
     RowBox[{"20", " ", "Calorie"}]},
    {"\<\"fat calories\"\>", 
     RowBox[{"2", " ", "Calorie"}]},
    {"\<\"total fat\"\>", "0"},
    {"\<\"% daily total fat\"\>", "0"},
    {"\<\"saturated fat\"\>", "0"},
    {"\<\"% daily saturated fat\"\>", "0"},
    {"\<\"trans fat\"\>", "0"},
    {"\<\"cholesterol\"\>", "0"},
    {"\<\"% daily cholesterol\"\>", "0"},
    {"\<\"sodium\"\>", 
     RowBox[{"12", " ", "Gram", " ", "Milli"}]},
    {"\<\"% daily sodium\"\>", 
     RowBox[{"1.`", " ", "Percent"}]},
    {"\<\"total carbohydrates\"\>", 
     RowBox[{"4", " ", "Gram"}]},
    {"\<\"% daily carbohydrates\"\>", 
     RowBox[{"1.`", " ", "Percent"}]},
    {"\<\"dietary fiber\"\>", 
     RowBox[{"1.`", " ", "Gram"}]},
    {"\<\"%daily dietary fiber\"\>", 
     RowBox[{"5", " ", "Percent"}]},
    {"\<\"sugars\"\>", 
     RowBox[{"2", " ", "Gram"}]},
    {"\<\"protein\"\>", 
     RowBox[{"2", " ", "Gram"}]},
    {"\<\"% daily protein\"\>", "0"},
    {"\<\"vitamin A\"\>", 
     RowBox[{"5", " ", "Percent"}]},
    {"\<\"vitamin C\"\>", 
     RowBox[{"35", " ", "Percent"}]},
    {"\<\"calcium\"\>", 
     RowBox[{"2", " ", "Percent"}]},
    {"\<\"iron\"\>", 
     RowBox[{"2", " ", "Percent"}]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxBackground->{"Columns" -> {
       RGBColor[1, 0.9, 0.8], {
        RGBColor[1, 1, 0.85]}}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.5444347666502132`*^9, 3.544434870857174*^9, {3.544434916479783*^9, 
   3.5444349228101454`*^9}, {3.544435184689124*^9, 3.5444352384231973`*^9}, 
   3.5444357936919565`*^9, 3.544446117992408*^9, 3.54444793757577*^9, 
   3.5444481299360037`*^9, 3.544451210864319*^9, 3.544456486488389*^9, 
   3.544456686161389*^9, 3.5444567411373887`*^9, {3.544456777510389*^9, 
   3.544456806076389*^9}, {3.544458735772184*^9, 3.5444587517091837`*^9}, {
   3.544459872725054*^9, 3.544459902046691*^9}, {3.5444599364318013`*^9, 
   3.5444599433584642`*^9}, 3.5445311263191853`*^9, 3.54453190909457*^9, 
   3.5445385133224773`*^9, 3.544541960683737*^9, 3.5445460416315985`*^9, 
   3.5445467000942183`*^9, 3.544546852573372*^9, 3.5445605464910293`*^9, 
   3.5445608732794886`*^9, 3.5447311695103645`*^9, 3.5447318878469257`*^9, 
   3.544732071560295*^9, 3.5447351918375607`*^9, 3.5448784043576255`*^9, 
   3.5448845225635157`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["Table Salt", "Subsection",
 CellChangeTimes->{{3.544436126484991*^9, 3.544436131020251*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"createNutritionFactsLabel", "[", 
   RowBox[{"\"\<salt\>\"", ",", 
    RowBox[{"1.", " ", "Cup"}], ",", 
    RowBox[{"0", " ", "Calorie"}], ",", 
    RowBox[{"0", " ", "Calorie"}], ",", "\[IndentingNewLine]", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", "\[IndentingNewLine]", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"113174", " ", "Milli", " ", "Gram"}], ",", 
    RowBox[{"4716", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", " ", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", "Percent"}], ",", "\[IndentingNewLine]", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"7", " ", "Percent"}], ",", 
    RowBox[{"5", " ", "Percent"}]}], "]"}], "//", "gridRules"}]], "Input",
 CellChangeTimes->{{3.5444347314111977`*^9, 3.544434776067752*^9}, {
   3.544434862438692*^9, 3.5444348698791175`*^9}, {3.5444349151697083`*^9, 
   3.544434921688081*^9}, {3.544434974944127*^9, 3.544434994648254*^9}, {
   3.5444351659130497`*^9, 3.544435237330135*^9}, {3.5444353001437273`*^9, 
   3.5444353299994354`*^9}, {3.544435364303397*^9, 3.5444354262719417`*^9}, {
   3.5444463370794077`*^9, 3.5444463764734077`*^9}, {3.5444479212221346`*^9, 
   3.544447921664179*^9}, {3.5444480734603567`*^9, 3.544448073699381*^9}, {
   3.54445121617091*^9, 3.5444512196509542`*^9}, {3.544458759028184*^9, 
   3.544458763019184*^9}, {3.544459839956981*^9, 3.5444598411760893`*^9}, 
   3.5447311801423645`*^9, 3.5447313973153644`*^9}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"name\"\>", "\<\"salt\"\>"},
    {"\<\"serving size\"\>", 
     RowBox[{"1.`", " ", "Cup"}]},
    {"\<\"total calories\"\>", "0"},
    {"\<\"fat calories\"\>", "0"},
    {"\<\"total fat\"\>", "0"},
    {"\<\"% daily total fat\"\>", "0"},
    {"\<\"saturated fat\"\>", "0"},
    {"\<\"% daily saturated fat\"\>", "0"},
    {"\<\"trans fat\"\>", "0"},
    {"\<\"cholesterol\"\>", "0"},
    {"\<\"% daily cholesterol\"\>", "0"},
    {"\<\"sodium\"\>", 
     RowBox[{"113174", " ", "Gram", " ", "Milli"}]},
    {"\<\"% daily sodium\"\>", 
     RowBox[{"4716", " ", "Percent"}]},
    {"\<\"total carbohydrates\"\>", "0"},
    {"\<\"% daily carbohydrates\"\>", "0"},
    {"\<\"dietary fiber\"\>", "0"},
    {"\<\"%daily dietary fiber\"\>", "0"},
    {"\<\"sugars\"\>", "0"},
    {"\<\"protein\"\>", "0"},
    {"\<\"% daily protein\"\>", "0"},
    {"\<\"vitamin A\"\>", "0"},
    {"\<\"vitamin C\"\>", "0"},
    {"\<\"calcium\"\>", 
     RowBox[{"7", " ", "Percent"}]},
    {"\<\"iron\"\>", 
     RowBox[{"5", " ", "Percent"}]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxBackground->{"Columns" -> {
       RGBColor[1, 0.9, 0.8], {
        RGBColor[1, 1, 0.85]}}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.54443542747801*^9, 3.5444357960750933`*^9, 3.5444461180454082`*^9, 
   3.5444463773804083`*^9, 3.5444479377047825`*^9, 3.5444481299900093`*^9, 
   3.544451221022365*^9, 3.544456486563389*^9, 3.5444566862443886`*^9, 
   3.544456741208389*^9, {3.544456777580389*^9, 3.544456806154389*^9}, {
   3.544458735866184*^9, 3.544458764726184*^9}, {3.544459872804062*^9, 
   3.544459902113698*^9}, {3.5444599365068083`*^9, 3.5444599434374723`*^9}, 
   3.5445311263591833`*^9, 3.54453190917957*^9, 3.544538513373477*^9, 
   3.5445419607277412`*^9, 3.544546042324668*^9, 3.5445467007420883`*^9, 
   3.5445468526293716`*^9, 3.5445605467510552`*^9, 3.544560873348468*^9, 
   3.5447311845243645`*^9, 3.5447318879439354`*^9, 3.544732071650304*^9, 
   3.5447351918845634`*^9, 3.5448784045246425`*^9, 3.5448845262665157`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["Eggplant, raw", "Subsection",
 CellChangeTimes->{{3.544436117868499*^9, 3.5444361207006607`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"createNutritionFactsLabel", "[", 
   RowBox[{"\"\<eggplant\>\"", ",", 
    RowBox[{"82", " ", "Gram"}], ",", 
    RowBox[{"20", " ", "Calorie"}], ",", 
    RowBox[{"1.0", " ", "Calorie"}], ",", "\[IndentingNewLine]", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", "\[IndentingNewLine]", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"2", " ", "Milli", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"5", " ", "Gram"}], ",", 
    RowBox[{"2", " ", "Percent"}], ",", 
    RowBox[{"3", " ", "Gram"}], ",", 
    RowBox[{"11", "Percent"}], ",", 
    RowBox[{"2", "Gram"}], ",", 
    RowBox[{"1.0", "Gram"}], ",", 
    RowBox[{"2", "Percent"}], ",", "\[IndentingNewLine]", 
    RowBox[{"0", "Percent"}], ",", 
    RowBox[{"3", "Percent"}], ",", 
    RowBox[{"1.0", "Percent"}], ",", 
    RowBox[{"1.0", "Percent"}]}], "]"}], "//", "gridRules"}]], "Input",
 CellChangeTimes->{{3.5444347314111977`*^9, 3.544434776067752*^9}, {
   3.544434862438692*^9, 3.5444348698791175`*^9}, {3.5444349151697083`*^9, 
   3.544434921688081*^9}, {3.544434974944127*^9, 3.544434994648254*^9}, {
   3.5444351659130497`*^9, 3.544435237330135*^9}, {3.544435469825433*^9, 
   3.544435618004908*^9}, {3.544447922263239*^9, 3.544447922664279*^9}, {
   3.5444480739534063`*^9, 3.5444480742164326`*^9}, {3.5444512257567854`*^9, 
   3.5444512281024885`*^9}, {3.544458785707184*^9, 3.544458794818184*^9}, 
   3.5447311952773647`*^9}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"name\"\>", "\<\"eggplant\"\>"},
    {"\<\"serving size\"\>", 
     RowBox[{"82", " ", "Gram"}]},
    {"\<\"total calories\"\>", 
     RowBox[{"20", " ", "Calorie"}]},
    {"\<\"fat calories\"\>", 
     RowBox[{"1.`", " ", "Calorie"}]},
    {"\<\"total fat\"\>", "0"},
    {"\<\"% daily total fat\"\>", "0"},
    {"\<\"saturated fat\"\>", "0"},
    {"\<\"% daily saturated fat\"\>", "0"},
    {"\<\"trans fat\"\>", "0"},
    {"\<\"cholesterol\"\>", "0"},
    {"\<\"% daily cholesterol\"\>", "0"},
    {"\<\"sodium\"\>", 
     RowBox[{"2", " ", "Gram", " ", "Milli"}]},
    {"\<\"% daily sodium\"\>", "0"},
    {"\<\"total carbohydrates\"\>", 
     RowBox[{"5", " ", "Gram"}]},
    {"\<\"% daily carbohydrates\"\>", 
     RowBox[{"2", " ", "Percent"}]},
    {"\<\"dietary fiber\"\>", 
     RowBox[{"3", " ", "Gram"}]},
    {"\<\"%daily dietary fiber\"\>", 
     RowBox[{"11", " ", "Percent"}]},
    {"\<\"sugars\"\>", 
     RowBox[{"2", " ", "Gram"}]},
    {"\<\"protein\"\>", 
     RowBox[{"1.`", " ", "Gram"}]},
    {"\<\"% daily protein\"\>", 
     RowBox[{"2", " ", "Percent"}]},
    {"\<\"vitamin A\"\>", "0"},
    {"\<\"vitamin C\"\>", 
     RowBox[{"3", " ", "Percent"}]},
    {"\<\"calcium\"\>", 
     RowBox[{"1.`", " ", "Percent"}]},
    {"\<\"iron\"\>", 
     RowBox[{"1.`", " ", "Percent"}]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxBackground->{"Columns" -> {
       RGBColor[1, 0.9, 0.8], {
        RGBColor[1, 1, 0.85]}}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.5444356189349613`*^9, 3.544446118096408*^9, 3.5444479377577877`*^9, 
   3.544448130125023*^9, 3.5444512415635257`*^9, 3.544456486635389*^9, 
   3.5444566863603888`*^9, 3.544456741278389*^9, {3.5444567776523886`*^9, 
   3.5444568062253885`*^9}, 3.544458736015184*^9, 3.544458795931184*^9, {
   3.544459872881069*^9, 3.544459902278706*^9}, {3.5444599365818157`*^9, 
   3.5444599435134797`*^9}, 3.5445311264091816`*^9, 3.5445319092505703`*^9, 
   3.5445385134214773`*^9, 3.544541960789747*^9, 3.544546042905726*^9, 
   3.5445467012799807`*^9, 3.544546852776372*^9, 3.5445605468290634`*^9, 
   3.5445608735753994`*^9, 3.544731196738364*^9, 3.544731888048946*^9, 
   3.5447320717423134`*^9, 3.544735191931566*^9, 3.5448784045776463`*^9, 
   3.544884529646516*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["Onion, medium, raw", "Subsection",
 CellChangeTimes->{{3.544436108172944*^9, 3.544436111981162*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"createNutritionFactsLabel", "[", 
   RowBox[{"\"\<onion\>\"", ",", 
    RowBox[{"160", " ", "Gram"}], ",", 
    RowBox[{"64", " ", "Calorie"}], ",", 
    RowBox[{"1.0", " ", "Calorie"}], ",", "\[IndentingNewLine]", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", "\[IndentingNewLine]", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"6", " ", "Milli", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"15", " ", "Gram"}], ",", 
    RowBox[{"5", " ", "Percent"}], ",", 
    RowBox[{"3", " ", "Gram"}], ",", 
    RowBox[{"11", "Percent"}], ",", 
    RowBox[{"7", "Gram"}], ",", 
    RowBox[{"2.0", "Gram"}], ",", 
    RowBox[{"0", "Percent"}], ",", "\[IndentingNewLine]", 
    RowBox[{"0", "Percent"}], ",", 
    RowBox[{"20", "Percent"}], ",", 
    RowBox[{"4", "Percent"}], ",", 
    RowBox[{"2", "Percent"}]}], "]"}], "//", "gridRules"}]], "Input",
 CellChangeTimes->{{3.5444347314111977`*^9, 3.544434776067752*^9}, {
   3.544434862438692*^9, 3.5444348698791175`*^9}, {3.5444349151697083`*^9, 
   3.544434921688081*^9}, {3.544434974944127*^9, 3.544434994648254*^9}, {
   3.5444351659130497`*^9, 3.544435237330135*^9}, {3.544435469825433*^9, 
   3.544435618004908*^9}, {3.544435853353369*^9, 3.544435946694708*^9}, {
   3.544447730200034*^9, 3.544447731576172*^9}, {3.544447923218334*^9, 
   3.544447923528365*^9}, {3.54444807449346*^9, 3.544448074784489*^9}, {
   3.5444512461459*^9, 3.544451248225524*^9}, {3.5444588034331837`*^9, 
   3.5444588070101843`*^9}, 3.544731203252364*^9}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"name\"\>", "\<\"onion\"\>"},
    {"\<\"serving size\"\>", 
     RowBox[{"160", " ", "Gram"}]},
    {"\<\"total calories\"\>", 
     RowBox[{"64", " ", "Calorie"}]},
    {"\<\"fat calories\"\>", 
     RowBox[{"1.`", " ", "Calorie"}]},
    {"\<\"total fat\"\>", "0"},
    {"\<\"% daily total fat\"\>", "0"},
    {"\<\"saturated fat\"\>", "0"},
    {"\<\"% daily saturated fat\"\>", "0"},
    {"\<\"trans fat\"\>", "0"},
    {"\<\"cholesterol\"\>", "0"},
    {"\<\"% daily cholesterol\"\>", "0"},
    {"\<\"sodium\"\>", 
     RowBox[{"6", " ", "Gram", " ", "Milli"}]},
    {"\<\"% daily sodium\"\>", "0"},
    {"\<\"total carbohydrates\"\>", 
     RowBox[{"15", " ", "Gram"}]},
    {"\<\"% daily carbohydrates\"\>", 
     RowBox[{"5", " ", "Percent"}]},
    {"\<\"dietary fiber\"\>", 
     RowBox[{"3", " ", "Gram"}]},
    {"\<\"%daily dietary fiber\"\>", 
     RowBox[{"11", " ", "Percent"}]},
    {"\<\"sugars\"\>", 
     RowBox[{"7", " ", "Gram"}]},
    {"\<\"protein\"\>", 
     RowBox[{"2.`", " ", "Gram"}]},
    {"\<\"% daily protein\"\>", "0"},
    {"\<\"vitamin A\"\>", "0"},
    {"\<\"vitamin C\"\>", 
     RowBox[{"20", " ", "Percent"}]},
    {"\<\"calcium\"\>", 
     RowBox[{"4", " ", "Percent"}]},
    {"\<\"iron\"\>", 
     RowBox[{"2", " ", "Percent"}]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxBackground->{"Columns" -> {
       RGBColor[1, 0.9, 0.8], {
        RGBColor[1, 1, 0.85]}}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.544435949033842*^9, 3.544446118219408*^9, 3.5444477485348673`*^9, 
   3.544447937810793*^9, 3.5444481301790285`*^9, 3.5444512490647755`*^9, 
   3.5444564867093887`*^9, 3.544456686432389*^9, 3.5444567413483887`*^9, {
   3.544456777812389*^9, 3.5444568062963886`*^9}, 3.5444587360911837`*^9, 
   3.544458807604184*^9, {3.544459872954077*^9, 3.544459902343707*^9}, {
   3.5444599366568236`*^9, 3.544459943588487*^9}, 3.5445311265291767`*^9, 
   3.5445319093235703`*^9, 3.544538513490477*^9, 3.5445419608537536`*^9, 
   3.5445460429577312`*^9, 3.54454670133397*^9, 3.5445468534603715`*^9, 
   3.5445605469060707`*^9, 3.544560873643379*^9, 3.5447312043223643`*^9, 
   3.544731888283969*^9, 3.5447320718343225`*^9, 3.5447351919785686`*^9, 
   3.544878404629651*^9, 3.5448845330225163`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["Bell Pepper, sweet, yellow, raw", "Subsection",
 CellChangeTimes->{{3.5443646201030855`*^9, 3.544364622407316*^9}, {
  3.5443651338092875`*^9, 3.544365137425649*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"createNutritionFactsLabel", "[", 
   RowBox[{"\"\<bell pepper\>\"", ",", 
    RowBox[{"186", " ", "Gram"}], ",", 
    RowBox[{"50", " ", "Calorie"}], ",", 
    RowBox[{"3.0", " ", "Calorie"}], ",", "\[IndentingNewLine]", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"1.0", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", "\[IndentingNewLine]", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"4", " ", "Milli", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"12", " ", "Gram"}], ",", 
    RowBox[{"4", " ", "Percent"}], ",", 
    RowBox[{"2", " ", "Gram"}], ",", 
    RowBox[{"7", "Percent"}], ",", 
    RowBox[{"2", "Gram"}], ",", 
    RowBox[{"2", "Gram"}], ",", 
    RowBox[{"0", "Percent"}], ",", "\[IndentingNewLine]", 
    RowBox[{"7", "Percent"}], ",", 
    RowBox[{"569", "Percent"}], ",", 
    RowBox[{"2", "Percent"}], ",", 
    RowBox[{"5", "Percent"}]}], "]"}], "//", "gridRules"}]], "Input",
 CellChangeTimes->{{3.5444347314111977`*^9, 3.544434776067752*^9}, {
   3.544434862438692*^9, 3.5444348698791175`*^9}, {3.5444349151697083`*^9, 
   3.544434921688081*^9}, {3.544434974944127*^9, 3.544434994648254*^9}, {
   3.5444351659130497`*^9, 3.544435237330135*^9}, {3.544435469825433*^9, 
   3.544435618004908*^9}, {3.544435962400606*^9, 3.544436084622597*^9}, {
   3.544447924046417*^9, 3.544447924617474*^9}, {3.5444480750985208`*^9, 
   3.544448075451556*^9}, {3.544451273473096*^9, 3.5444512769931517`*^9}, {
   3.5444588149701843`*^9, 3.544458817530184*^9}, 3.5447312184193645`*^9}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"name\"\>", "\<\"bell pepper\"\>"},
    {"\<\"serving size\"\>", 
     RowBox[{"186", " ", "Gram"}]},
    {"\<\"total calories\"\>", 
     RowBox[{"50", " ", "Calorie"}]},
    {"\<\"fat calories\"\>", 
     RowBox[{"3.`", " ", "Calorie"}]},
    {"\<\"total fat\"\>", "0"},
    {"\<\"% daily total fat\"\>", 
     RowBox[{"1.`", " ", "Percent"}]},
    {"\<\"saturated fat\"\>", "0"},
    {"\<\"% daily saturated fat\"\>", "0"},
    {"\<\"trans fat\"\>", "0"},
    {"\<\"cholesterol\"\>", "0"},
    {"\<\"% daily cholesterol\"\>", "0"},
    {"\<\"sodium\"\>", 
     RowBox[{"4", " ", "Gram", " ", "Milli"}]},
    {"\<\"% daily sodium\"\>", "0"},
    {"\<\"total carbohydrates\"\>", 
     RowBox[{"12", " ", "Gram"}]},
    {"\<\"% daily carbohydrates\"\>", 
     RowBox[{"4", " ", "Percent"}]},
    {"\<\"dietary fiber\"\>", 
     RowBox[{"2", " ", "Gram"}]},
    {"\<\"%daily dietary fiber\"\>", 
     RowBox[{"7", " ", "Percent"}]},
    {"\<\"sugars\"\>", 
     RowBox[{"2", " ", "Gram"}]},
    {"\<\"protein\"\>", 
     RowBox[{"2", " ", "Gram"}]},
    {"\<\"% daily protein\"\>", "0"},
    {"\<\"vitamin A\"\>", 
     RowBox[{"7", " ", "Percent"}]},
    {"\<\"vitamin C\"\>", 
     RowBox[{"569", " ", "Percent"}]},
    {"\<\"calcium\"\>", 
     RowBox[{"2", " ", "Percent"}]},
    {"\<\"iron\"\>", 
     RowBox[{"5", " ", "Percent"}]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxBackground->{"Columns" -> {
       RGBColor[1, 0.9, 0.8], {
        RGBColor[1, 1, 0.85]}}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.544436085495647*^9, 3.544446118271408*^9, 3.544447937865799*^9, 
   3.5444481302310333`*^9, 3.544451277929432*^9, 3.5444564867883887`*^9, 
   3.544456686502389*^9, 3.544456741417389*^9, {3.5444567778833885`*^9, 
   3.544456806368389*^9}, 3.5444587361681843`*^9, 3.544458821946184*^9, {
   3.544459873028084*^9, 3.5444599024137087`*^9}, {3.5444599367408323`*^9, 
   3.5444599436624947`*^9}, 3.544531126570175*^9, 3.5445319093955708`*^9, 
   3.5445385135614767`*^9, 3.5445419609107594`*^9, 3.5445460430117364`*^9, 
   3.544546701480941*^9, 3.5445468540623713`*^9, 3.5445605469840784`*^9, 
   3.544560873710359*^9, 3.5447312198813643`*^9, 3.544731888379979*^9, 
   3.5447320719243317`*^9, 3.5447351920315714`*^9, 3.5448784046816564`*^9, 
   3.544884536083516*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["Stewed Tomato", "Subsection",
 CellChangeTimes->{{3.5443646309631715`*^9, 3.5443646348875637`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"createNutritionFactsLabel", "[", 
   RowBox[{"\"\<stewed tomato\>\"", ",", 
    RowBox[{"101", " ", "Gram"}], ",", 
    RowBox[{"80", " ", "Calorie"}], ",", 
    RowBox[{"24.0", " ", "Calorie"}], ",", "\[IndentingNewLine]", 
    RowBox[{"3", " ", "Gram"}], ",", 
    RowBox[{"4", " ", "Percent"}], ",", 
    RowBox[{"1.0", " ", "Gram"}], ",", 
    RowBox[{"3", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", "\[IndentingNewLine]", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"460", " ", "Milli", " ", "Gram"}], ",", 
    RowBox[{"19", " ", "Percent"}], ",", 
    RowBox[{"13", " ", "Gram"}], ",", 
    RowBox[{"4", " ", "Percent"}], ",", 
    RowBox[{"2", " ", "Gram"}], ",", 
    RowBox[{"7", "Percent"}], ",", 
    RowBox[{"0", "Gram"}], ",", 
    RowBox[{"2", "Gram"}], ",", 
    RowBox[{"0", "Percent"}], ",", "\[IndentingNewLine]", 
    RowBox[{"13", "Percent"}], ",", 
    RowBox[{"31", "Percent"}], ",", 
    RowBox[{"3", "Percent"}], ",", 
    RowBox[{"6", "Percent"}]}], "]"}], "//", "gridRules"}]], "Input",
 CellChangeTimes->{{3.5444467130367193`*^9, 3.544446812922707*^9}, {
  3.544447925209533*^9, 3.544447925683581*^9}, {3.5444480758896*^9, 
  3.544448076259637*^9}, {3.5444512836191387`*^9, 3.544451288849707*^9}, {
  3.544458827688184*^9, 3.5444588316241837`*^9}, {3.5447312255403643`*^9, 
  3.5447312268123646`*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"name\"\>", "\<\"stewed tomato\"\>"},
    {"\<\"serving size\"\>", 
     RowBox[{"101", " ", "Gram"}]},
    {"\<\"total calories\"\>", 
     RowBox[{"80", " ", "Calorie"}]},
    {"\<\"fat calories\"\>", 
     RowBox[{"24.`", " ", "Calorie"}]},
    {"\<\"total fat\"\>", 
     RowBox[{"3", " ", "Gram"}]},
    {"\<\"% daily total fat\"\>", 
     RowBox[{"4", " ", "Percent"}]},
    {"\<\"saturated fat\"\>", 
     RowBox[{"1.`", " ", "Gram"}]},
    {"\<\"% daily saturated fat\"\>", 
     RowBox[{"3", " ", "Percent"}]},
    {"\<\"trans fat\"\>", "0"},
    {"\<\"cholesterol\"\>", "0"},
    {"\<\"% daily cholesterol\"\>", "0"},
    {"\<\"sodium\"\>", 
     RowBox[{"460", " ", "Gram", " ", "Milli"}]},
    {"\<\"% daily sodium\"\>", 
     RowBox[{"19", " ", "Percent"}]},
    {"\<\"total carbohydrates\"\>", 
     RowBox[{"13", " ", "Gram"}]},
    {"\<\"% daily carbohydrates\"\>", 
     RowBox[{"4", " ", "Percent"}]},
    {"\<\"dietary fiber\"\>", 
     RowBox[{"2", " ", "Gram"}]},
    {"\<\"%daily dietary fiber\"\>", 
     RowBox[{"7", " ", "Percent"}]},
    {"\<\"sugars\"\>", "0"},
    {"\<\"protein\"\>", 
     RowBox[{"2", " ", "Gram"}]},
    {"\<\"% daily protein\"\>", "0"},
    {"\<\"vitamin A\"\>", 
     RowBox[{"13", " ", "Percent"}]},
    {"\<\"vitamin C\"\>", 
     RowBox[{"31", " ", "Percent"}]},
    {"\<\"calcium\"\>", 
     RowBox[{"3", " ", "Percent"}]},
    {"\<\"iron\"\>", 
     RowBox[{"6", " ", "Percent"}]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxBackground->{"Columns" -> {
       RGBColor[1, 0.9, 0.8], {
        RGBColor[1, 1, 0.85]}}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.5444478187578893`*^9, 3.544447937919804*^9, 3.5444481302840385`*^9, 
   3.5444512896549487`*^9, 3.5444564868613887`*^9, 3.5444566865713887`*^9, 
   3.5444567414863887`*^9, {3.5444567779543886`*^9, 3.5444568064403887`*^9}, 
   3.5444587363531837`*^9, 3.544458834664184*^9, {3.5444598731030917`*^9, 
   3.5444599024837103`*^9}, {3.5444599368178396`*^9, 3.544459943737502*^9}, 
   3.5445311266211753`*^9, 3.5445319094655704`*^9, 3.544538513632477*^9, 
   3.544541960996768*^9, 3.5445460444288783`*^9, 3.5445467021408086`*^9, 
   3.5445468546003714`*^9, 3.5445605470610867`*^9, 3.544560873778339*^9, 
   3.5447312275703645`*^9, 3.5447318885960007`*^9, 3.544732072148354*^9, 
   3.5447351920835743`*^9, 3.544878404734662*^9, 3.544884538524516*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["Black Pepper (spices, pepper, black)", "Subsection",
 CellChangeTimes->{{3.5443646363277082`*^9, 3.544364637903866*^9}, {
  3.5443653619328976`*^9, 3.5443653668283815`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"createNutritionFactsLabel", "[", 
   RowBox[{"\"\<black pepper\>\"", ",", 
    RowBox[{"1.", " ", "Tablespoon"}], ",", 
    RowBox[{"16", " ", "Calorie"}], ",", 
    RowBox[{"2", " ", "Calorie"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", "\[IndentingNewLine]", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"3", " ", "Milli", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"4", " ", "Gram"}], ",", 
    RowBox[{"1.", " ", "Percent"}], ",", 
    RowBox[{"2", " ", "Gram"}], ",", 
    RowBox[{"7", " ", "Percent"}], ",", " ", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"1.", " ", "Gram"}], ",", 
    RowBox[{"0", "Percent"}], ",", "\[IndentingNewLine]", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"2", " ", "Percent"}], ",", 
    RowBox[{"3", " ", "Percent"}], ",", 
    RowBox[{"10", " ", "Percent"}]}], "]"}], "//", "gridRules"}]], "Input",
 CellChangeTimes->{{3.5444469503904066`*^9, 3.5444470470184064`*^9}, {
   3.5444479263156443`*^9, 3.5444479267646885`*^9}, {3.544448076721683*^9, 
   3.5444480771547265`*^9}, {3.5444512937021627`*^9, 
   3.5444513057687817`*^9}, {3.544458841696184*^9, 3.544458845751184*^9}, {
   3.5444645395334425`*^9, 3.5444645415645585`*^9}, {3.5444646114005423`*^9, 
   3.5444646253973427`*^9}, 3.5447312330913644`*^9}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"name\"\>", "\<\"black pepper\"\>"},
    {"\<\"serving size\"\>", 
     RowBox[{"1.`", " ", "Tablespoon"}]},
    {"\<\"total calories\"\>", 
     RowBox[{"16", " ", "Calorie"}]},
    {"\<\"fat calories\"\>", 
     RowBox[{"2", " ", "Calorie"}]},
    {"\<\"total fat\"\>", "0"},
    {"\<\"% daily total fat\"\>", "0"},
    {"\<\"saturated fat\"\>", "0"},
    {"\<\"% daily saturated fat\"\>", "0"},
    {"\<\"trans fat\"\>", "0"},
    {"\<\"cholesterol\"\>", "0"},
    {"\<\"% daily cholesterol\"\>", "0"},
    {"\<\"sodium\"\>", 
     RowBox[{"3", " ", "Gram", " ", "Milli"}]},
    {"\<\"% daily sodium\"\>", "0"},
    {"\<\"total carbohydrates\"\>", 
     RowBox[{"4", " ", "Gram"}]},
    {"\<\"% daily carbohydrates\"\>", 
     RowBox[{"1.`", " ", "Percent"}]},
    {"\<\"dietary fiber\"\>", 
     RowBox[{"2", " ", "Gram"}]},
    {"\<\"%daily dietary fiber\"\>", 
     RowBox[{"7", " ", "Percent"}]},
    {"\<\"sugars\"\>", "0"},
    {"\<\"protein\"\>", 
     RowBox[{"1.`", " ", "Gram"}]},
    {"\<\"% daily protein\"\>", "0"},
    {"\<\"vitamin A\"\>", "0"},
    {"\<\"vitamin C\"\>", 
     RowBox[{"2", " ", "Percent"}]},
    {"\<\"calcium\"\>", 
     RowBox[{"3", " ", "Percent"}]},
    {"\<\"iron\"\>", 
     RowBox[{"10", " ", "Percent"}]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxBackground->{"Columns" -> {
       RGBColor[1, 0.9, 0.8], {
        RGBColor[1, 1, 0.85]}}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.544447048476406*^9, 3.5444479379718094`*^9, 3.5444481303360443`*^9, 
   3.5444512977493763`*^9, 3.544456486937389*^9, 3.5444566866433887`*^9, 
   3.5444567415553885`*^9, {3.544456778024389*^9, 3.5444568065133886`*^9}, 
   3.5444587364331837`*^9, 3.5444588490951843`*^9, {3.544459873176099*^9, 
   3.544459902548712*^9}, {3.5444599368958473`*^9, 3.5444599438145094`*^9}, 
   3.544464543057644*^9, 3.544464626483405*^9, 3.544531126668175*^9, 
   3.5445319095345707`*^9, 3.544538513702477*^9, 3.5445419610517735`*^9, 
   3.5445460449579315`*^9, 3.5445467026817007`*^9, 3.5445468551473713`*^9, 
   3.544560547138094*^9, 3.5445608738483176`*^9, 3.5447312339203644`*^9, 
   3.54473188869201*^9, 3.5447320722393627`*^9, 3.5447351922005816`*^9, 
   3.544878404786667*^9, 3.544884540860516*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["Dried Basil (spices, basil, dried)", "Subsection",
 CellChangeTimes->{{3.544364650992174*^9, 3.544364653409416*^9}, {
  3.54436544679235*^9, 3.5443654518408546`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"createNutritionFactsLabel", "[", 
   RowBox[{"\"\<dried basil\>\"", ",", 
    RowBox[{"1.", " ", "Teaspoon"}], ",", 
    RowBox[{"1.0", " ", "Calorie"}], ",", 
    RowBox[{"0", " ", "Calorie"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", "\[IndentingNewLine]", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", "\[IndentingNewLine]", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"1.0", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", "Percent"}], ",", "\[IndentingNewLine]", 
    RowBox[{"1.0", " ", "Percent"}], ",", 
    RowBox[{"1.0", " ", "Percent"}], ",", 
    RowBox[{"1.0", " ", "Percent"}], ",", 
    RowBox[{"1.0", " ", "Percent"}]}], "]"}], "//", "gridRules"}]], "Input",
 CellChangeTimes->{{3.5444470732404065`*^9, 3.5444471263504066`*^9}, {
   3.544447927307743*^9, 3.5444479277417865`*^9}, {3.5444480776337743`*^9, 
   3.5444480780668173`*^9}, {3.544451320340152*^9, 3.544451330047063*^9}, 
   3.544458904765184*^9, {3.544458935019184*^9, 3.544458972452223*^9}, 
   3.5447312379063644`*^9}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"name\"\>", "\<\"dried basil\"\>"},
    {"\<\"serving size\"\>", 
     RowBox[{"1.`", " ", "Teaspoon"}]},
    {"\<\"total calories\"\>", 
     RowBox[{"1.`", " ", "Calorie"}]},
    {"\<\"fat calories\"\>", "0"},
    {"\<\"total fat\"\>", "0"},
    {"\<\"% daily total fat\"\>", "0"},
    {"\<\"saturated fat\"\>", "0"},
    {"\<\"% daily saturated fat\"\>", "0"},
    {"\<\"trans fat\"\>", "0"},
    {"\<\"cholesterol\"\>", "0"},
    {"\<\"% daily cholesterol\"\>", "0"},
    {"\<\"sodium\"\>", "0"},
    {"\<\"% daily sodium\"\>", "0"},
    {"\<\"total carbohydrates\"\>", "0"},
    {"\<\"% daily carbohydrates\"\>", "0"},
    {"\<\"dietary fiber\"\>", "0"},
    {"\<\"%daily dietary fiber\"\>", 
     RowBox[{"1.`", " ", "Percent"}]},
    {"\<\"sugars\"\>", "0"},
    {"\<\"protein\"\>", "0"},
    {"\<\"% daily protein\"\>", "0"},
    {"\<\"vitamin A\"\>", 
     RowBox[{"1.`", " ", "Percent"}]},
    {"\<\"vitamin C\"\>", 
     RowBox[{"1.`", " ", "Percent"}]},
    {"\<\"calcium\"\>", 
     RowBox[{"1.`", " ", "Percent"}]},
    {"\<\"iron\"\>", 
     RowBox[{"1.`", " ", "Percent"}]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxBackground->{"Columns" -> {
       RGBColor[1, 0.9, 0.8], {
        RGBColor[1, 1, 0.85]}}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.5444471303854065`*^9, 3.5444479380248146`*^9, 3.544448130390049*^9, 
   3.5444513312364197`*^9, 3.5444564871123886`*^9, 3.5444566867133884`*^9, 
   3.544456741634389*^9, {3.544456778094389*^9, 3.5444568065933886`*^9}, 
   3.544458736509184*^9, 3.544458973797357*^9, {3.5444598732501063`*^9, 
   3.544459902618713*^9}, {3.544459936973855*^9, 3.5444599438915176`*^9}, 
   3.544531126714175*^9, 3.5445319095975704`*^9, 3.544538513753477*^9, 
   3.544541961106779*^9, 3.544546045013937*^9, 3.5445467027416887`*^9, 
   3.5445468552023716`*^9, 3.5445605472151017`*^9, 3.5445608740052705`*^9, 
   3.5447312392813644`*^9, 3.5447318887890196`*^9, 3.544732072330372*^9, 
   3.5447351922535844`*^9, 3.544878404838672*^9, 3.544884543674515*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["Sugar (sugars, granulated [sucrose])", "Subsection",
 CellChangeTimes->{{3.5443646546735425`*^9, 3.5443646555526304`*^9}, {
  3.5443655547580843`*^9, 3.5443655637819834`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"createNutritionFactsLabel", "[", 
   RowBox[{"\"\<sugar\>\"", ",", 
    RowBox[{"2", " ", "Gram"}], ",", 
    RowBox[{"11", " ", "Calorie"}], ",", 
    RowBox[{"0", " ", "Calorie"}], ",", "\[IndentingNewLine]", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", "\[IndentingNewLine]", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", "\[IndentingNewLine]", 
    RowBox[{"3", " ", "Gram"}], ",", 
    RowBox[{"1.00", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"3", " ", "Gram"}], ",", "\[IndentingNewLine]", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", "Percent"}], ",", "\[IndentingNewLine]", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"7", " ", "Percent"}], ",", 
    RowBox[{"5", " ", "Percent"}]}], "]"}], "//", "gridRules"}]], "Input",
 CellChangeTimes->{{3.5444471573884068`*^9, 3.5444472399604063`*^9}, {
   3.5444479283318453`*^9, 3.5444479288228946`*^9}, {3.5444480785928698`*^9, 
   3.5444480790509157`*^9}, {3.5444513376243353`*^9, 3.544451341913622*^9}, {
   3.544458983037281*^9, 3.5444590050854855`*^9}, 3.5447312430903645`*^9}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"name\"\>", "\<\"sugar\"\>"},
    {"\<\"serving size\"\>", 
     RowBox[{"2", " ", "Gram"}]},
    {"\<\"total calories\"\>", 
     RowBox[{"11", " ", "Calorie"}]},
    {"\<\"fat calories\"\>", "0"},
    {"\<\"total fat\"\>", "0"},
    {"\<\"% daily total fat\"\>", "0"},
    {"\<\"saturated fat\"\>", "0"},
    {"\<\"% daily saturated fat\"\>", "0"},
    {"\<\"trans fat\"\>", "0"},
    {"\<\"cholesterol\"\>", "0"},
    {"\<\"% daily cholesterol\"\>", "0"},
    {"\<\"sodium\"\>", "0"},
    {"\<\"% daily sodium\"\>", "0"},
    {"\<\"total carbohydrates\"\>", 
     RowBox[{"3", " ", "Gram"}]},
    {"\<\"% daily carbohydrates\"\>", 
     RowBox[{"1.`", " ", "Percent"}]},
    {"\<\"dietary fiber\"\>", "0"},
    {"\<\"%daily dietary fiber\"\>", "0"},
    {"\<\"sugars\"\>", 
     RowBox[{"3", " ", "Gram"}]},
    {"\<\"protein\"\>", "0"},
    {"\<\"% daily protein\"\>", "0"},
    {"\<\"vitamin A\"\>", "0"},
    {"\<\"vitamin C\"\>", "0"},
    {"\<\"calcium\"\>", 
     RowBox[{"7", " ", "Percent"}]},
    {"\<\"iron\"\>", 
     RowBox[{"5", " ", "Percent"}]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxBackground->{"Columns" -> {
       RGBColor[1, 0.9, 0.8], {
        RGBColor[1, 1, 0.85]}}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.5444472492984066`*^9, 3.54444793807682*^9, 3.5444481304420547`*^9, 
   3.5444513442603254`*^9, 3.544456487187389*^9, 3.544456686783389*^9, 
   3.544456741858389*^9, {3.544456778167389*^9, 3.544456806665389*^9}, 
   3.544458736586184*^9, {3.544459873325114*^9, 3.5444599026797166`*^9}, {
   3.544459937049863*^9, 3.5444599439655247`*^9}, 3.544531126760175*^9, 
   3.54453190967457*^9, 3.544538513807477*^9, 3.544541961161784*^9, 
   3.544546045075943*^9, 3.5445467027946777`*^9, 3.5445468552583714`*^9, 
   3.5445605474381237`*^9, 3.544560874078249*^9, 3.5447312441293645`*^9, 
   3.5447318888850293`*^9, 3.5447320724203815`*^9, 3.544735192306587*^9, 
   3.544878404888677*^9, 3.544884546331505*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["Pasta, fresh-refrigerated, plain, as purchased", "Subsection",
 CellChangeTimes->{{3.544364660321107*^9, 3.544364661209196*^9}, 
   3.5443656864549413`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"createNutritionFactsLabel", "[", 
   RowBox[{"\"\<pasta\>\"", ",", "\[IndentingNewLine]", 
    RowBox[{"128", " ", "Gram"}], ",", 
    RowBox[{"369", " ", "Calorie"}], ",", 
    RowBox[{"25", " ", "Calorie"}], ",", "\[IndentingNewLine]", 
    RowBox[{"3", " ", "Gram"}], ",", 
    RowBox[{"5", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"2", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", "\[IndentingNewLine]", 
    RowBox[{"93", " ", "Gram"}], ",", 
    RowBox[{"31", " ", "Percent"}], ",", 
    RowBox[{"33", " ", "Milli", " ", "Gram"}], ",", 
    RowBox[{"1.0", " ", "Percent"}], ",", "\[IndentingNewLine]", 
    RowBox[{"70", " ", "Gram"}], ",", 
    RowBox[{"23", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", "\[IndentingNewLine]", 
    RowBox[{"14", " ", "Gram"}], ",", 
    RowBox[{"0", "Percent"}], ",", "\[IndentingNewLine]", 
    RowBox[{"1.0", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"2", " ", "Percent"}], ",", 
    RowBox[{"24", " ", "Percent"}]}], "]"}], "//", "gridRules"}]], "Input",
 CellChangeTimes->{{3.5444471573884068`*^9, 3.5444472399604063`*^9}, {
   3.5444473224604063`*^9, 3.544447414384406*^9}, {3.5444479294619584`*^9, 
   3.544447929895002*^9}, {3.544448079576968*^9, 3.5444480801410246`*^9}, {
   3.5444513483155413`*^9, 3.544451352228715*^9}, {3.544459027838761*^9, 
   3.5444590329052677`*^9}, 3.544731248363364*^9}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"name\"\>", "\<\"pasta\"\>"},
    {"\<\"serving size\"\>", 
     RowBox[{"128", " ", "Gram"}]},
    {"\<\"total calories\"\>", 
     RowBox[{"369", " ", "Calorie"}]},
    {"\<\"fat calories\"\>", 
     RowBox[{"25", " ", "Calorie"}]},
    {"\<\"total fat\"\>", 
     RowBox[{"3", " ", "Gram"}]},
    {"\<\"% daily total fat\"\>", 
     RowBox[{"5", " ", "Percent"}]},
    {"\<\"saturated fat\"\>", "0"},
    {"\<\"% daily saturated fat\"\>", 
     RowBox[{"2", " ", "Percent"}]},
    {"\<\"trans fat\"\>", "0"},
    {"\<\"cholesterol\"\>", 
     RowBox[{"93", " ", "Gram"}]},
    {"\<\"% daily cholesterol\"\>", 
     RowBox[{"31", " ", "Percent"}]},
    {"\<\"sodium\"\>", 
     RowBox[{"33", " ", "Gram", " ", "Milli"}]},
    {"\<\"% daily sodium\"\>", 
     RowBox[{"1.`", " ", "Percent"}]},
    {"\<\"total carbohydrates\"\>", 
     RowBox[{"70", " ", "Gram"}]},
    {"\<\"% daily carbohydrates\"\>", 
     RowBox[{"23", " ", "Percent"}]},
    {"\<\"dietary fiber\"\>", "0"},
    {"\<\"%daily dietary fiber\"\>", "0"},
    {"\<\"sugars\"\>", "0"},
    {"\<\"protein\"\>", 
     RowBox[{"14", " ", "Gram"}]},
    {"\<\"% daily protein\"\>", "0"},
    {"\<\"vitamin A\"\>", 
     RowBox[{"1.`", " ", "Percent"}]},
    {"\<\"vitamin C\"\>", "0"},
    {"\<\"calcium\"\>", 
     RowBox[{"2", " ", "Percent"}]},
    {"\<\"iron\"\>", 
     RowBox[{"24", " ", "Percent"}]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxBackground->{"Columns" -> {
       RGBColor[1, 0.9, 0.8], {
        RGBColor[1, 1, 0.85]}}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.5444474155624065`*^9, 3.544447938129825*^9, 3.54444813049506*^9, 
   3.5444513536761494`*^9, 3.5444564872633886`*^9, 3.544456686908389*^9, 
   3.5444567419263887`*^9, {3.544456778238389*^9, 3.544456806738389*^9}, 
   3.544458736665184*^9, 3.544459033822359*^9, {3.544459873398121*^9, 
   3.5444599027457232`*^9}, {3.5444599371268706`*^9, 3.544459944039532*^9}, 
   3.5445311268121753`*^9, 3.54453190974557*^9, 3.544538513878477*^9, 
   3.5445419612247906`*^9, 3.5445460452269583`*^9, 3.5445467029466476`*^9, 
   3.5445468554123716`*^9, 3.5445605475211325`*^9, 3.5445608741542263`*^9, 
   3.544731249497364*^9, 3.544731888981039*^9, 3.5447320725143905`*^9, 
   3.5447351923605905`*^9, 3.5448784049406824`*^9, 3.5448845485639963`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["Parmesan Cheese (Cheese, parmesan, grated)", "Subsection",
 CellChangeTimes->{{3.544364662761351*^9, 3.544364666376713*^9}, {
  3.5443658100808325`*^9, 3.544365811872295*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"createNutritionFactsLabel", "[", 
   RowBox[{"\"\<parmesan cheese\>\"", ",", 
    RowBox[{"100", " ", "Gram"}], ",", 
    RowBox[{"431", " ", "Calorie"}], ",", 
    RowBox[{"251", " ", "Calorie"}], ",", 
    RowBox[{"29", "Gram"}], ",", 
    RowBox[{"44", "Percent"}], ",", 
    RowBox[{"17", "Gram"}], ",", 
    RowBox[{"86", "Percent"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", "\[IndentingNewLine]", 
    RowBox[{"88", "Gram"}], ",", 
    RowBox[{"29", "Percent"}], ",", 
    RowBox[{"1529", "Milli", " ", "Gram"}], ",", 
    RowBox[{"64", "Percent"}], ",", "\[IndentingNewLine]", 
    RowBox[{"4", " ", "Gram"}], ",", 
    RowBox[{"1.00", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Gram"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"1", " ", "Gram"}], ",", "\[IndentingNewLine]", 
    RowBox[{"38", " ", "Gram"}], ",", 
    RowBox[{"0", "Percent"}], ",", "\[IndentingNewLine]", 
    RowBox[{"9", " ", "Percent"}], ",", 
    RowBox[{"0", " ", "Percent"}], ",", 
    RowBox[{"111", " ", "Percent"}], ",", 
    RowBox[{"5", " ", "Percent"}]}], "]"}], "//", "gridRules"}]], "Input",
 CellChangeTimes->{{3.5444471573884068`*^9, 3.5444472399604063`*^9}, {
   3.5444474571584063`*^9, 3.5444475474994063`*^9}, {3.544447930446057*^9, 
   3.544447930919104*^9}, {3.5444480807330837`*^9, 3.544448081270138*^9}, {
   3.544451362526804*^9, 3.5444513699610333`*^9}, {3.5444590547444515`*^9, 
   3.544459060778054*^9}, {3.54456090866387*^9, 3.5445609193956494`*^9}, 
   3.544731253002364*^9}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"name\"\>", "\<\"parmesan cheese\"\>"},
    {"\<\"serving size\"\>", 
     RowBox[{"100", " ", "Gram"}]},
    {"\<\"total calories\"\>", 
     RowBox[{"431", " ", "Calorie"}]},
    {"\<\"fat calories\"\>", 
     RowBox[{"251", " ", "Calorie"}]},
    {"\<\"total fat\"\>", 
     RowBox[{"29", " ", "Gram"}]},
    {"\<\"% daily total fat\"\>", 
     RowBox[{"44", " ", "Percent"}]},
    {"\<\"saturated fat\"\>", 
     RowBox[{"17", " ", "Gram"}]},
    {"\<\"% daily saturated fat\"\>", 
     RowBox[{"86", " ", "Percent"}]},
    {"\<\"trans fat\"\>", "0"},
    {"\<\"cholesterol\"\>", 
     RowBox[{"88", " ", "Gram"}]},
    {"\<\"% daily cholesterol\"\>", 
     RowBox[{"29", " ", "Percent"}]},
    {"\<\"sodium\"\>", 
     RowBox[{"1529", " ", "Gram", " ", "Milli"}]},
    {"\<\"% daily sodium\"\>", 
     RowBox[{"64", " ", "Percent"}]},
    {"\<\"total carbohydrates\"\>", 
     RowBox[{"4", " ", "Gram"}]},
    {"\<\"% daily carbohydrates\"\>", 
     RowBox[{"1.`", " ", "Percent"}]},
    {"\<\"dietary fiber\"\>", "0"},
    {"\<\"%daily dietary fiber\"\>", "0"},
    {"\<\"sugars\"\>", "Gram"},
    {"\<\"protein\"\>", 
     RowBox[{"38", " ", "Gram"}]},
    {"\<\"% daily protein\"\>", "0"},
    {"\<\"vitamin A\"\>", 
     RowBox[{"9", " ", "Percent"}]},
    {"\<\"vitamin C\"\>", "0"},
    {"\<\"calcium\"\>", 
     RowBox[{"111", " ", "Percent"}]},
    {"\<\"iron\"\>", 
     RowBox[{"5", " ", "Percent"}]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxBackground->{"Columns" -> {
       RGBColor[1, 0.9, 0.8], {
        RGBColor[1, 1, 0.85]}}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.5444475514304066`*^9, 3.544447938185831*^9, 3.544448130549065*^9, 
   3.544451371014349*^9, 3.544456487337389*^9, 3.544456686978389*^9, 
   3.544456741997389*^9, {3.544456778309389*^9, 3.544456806925389*^9}, 
   3.544458736743184*^9, {3.544459873518133*^9, 3.54445990281173*^9}, {
   3.5444599372468824`*^9, 3.544459944173546*^9}, 3.544531126869175*^9, 
   3.5445319098155704`*^9, 3.544538513951477*^9, 3.5445419612917976`*^9, 
   3.544546045937029*^9, 3.544546703597517*^9, 3.5445468560783715`*^9, 
   3.5445605477071505`*^9, 3.5445608742222056`*^9, {3.544560913008566*^9, 
   3.544560920077445*^9}, 3.5447312541233644`*^9, 3.5447318890850496`*^9, 
   3.5447320726033993`*^9, 3.5447351924135933`*^9, 3.5448784049936876`*^9, 
   3.544884550916994*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["HOW TO ADD UNIT-NFLS", "Subsection",
 CellChangeTimes->{{3.5444478445164647`*^9, 3.544447847682781*^9}, 
   3.54444794957697*^9, {3.5448845584739814`*^9, 3.5448845660059547`*^9}}],

Cell[CellGroupData[{

Cell["Canonicalize Units", "Subsubsection",
 CellChangeTimes->{{3.5444570877327557`*^9, 3.5444571601289945`*^9}, {
  3.544460473066196*^9, 3.544460475352964*^9}}],

Cell[CellGroupData[{

Cell["Convert anything compatible with Gram to Gram", "Item",
 CellChangeTimes->{{3.5445319363520703`*^9, 3.5445319425520706`*^9}}],

Cell["Convert rules about volumes to rules about weights", "Item",
 CellChangeTimes->{{3.5445319445830708`*^9, 3.5445319615740705`*^9}}],

Cell[TextData[{
 StyleBox["A rule that rewrites rules",
  Background->RGBColor[1, 1, 0.85]],
 " (rules are, after all, themselves, expressions)"
}], "Subitem",
 CellChangeTimes->{{3.5445319690380707`*^9, 3.5445320162120705`*^9}, {
  3.544884587872399*^9, 3.544884590937396*^9}}],

Cell["\<\
meta-rule: a pattern that matches a victim rule, and a rewrite for the victim \
rule\
\>", "Item",
 CellChangeTimes->{{3.5445320061410704`*^9, 3.5445320350350704`*^9}, {
  3.544884615887328*^9, 3.544884625791297*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"canonicalizeUnits", "[", "nfl_", "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "convert", " ", "anything", " ", "compatible", " ", "to", " ", "Gram"}], 
   " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{"Function", "[", 
     RowBox[{"rule", ",", 
      RowBox[{
       RowBox[{"rule", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
        "\[Rule]", 
       RowBox[{"Quiet", "[", 
        RowBox[{"N", "@", 
         RowBox[{"Convert", "[", 
          RowBox[{
           RowBox[{
           "rule", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
           ",", "Gram"}], "]"}]}], "]"}]}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{"convert", " ", "volumes", " ", "to", " ", "weights"}], " ", 
     "*)"}], "\[IndentingNewLine]", 
    RowBox[{"(", 
     RowBox[{"nfl", "/.", 
      RowBox[{"{", " ", 
       RowBox[{"(*", " ", 
        RowBox[{
        "a", " ", "rule", " ", "to", " ", "rewrite", " ", "rules", " ", "in", 
         " ", "the", " ", "nfl"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "pattern", " ", "to", " ", "match", " ", "against", " ", "victim", 
         " ", "rule", " ", "\[IndentingNewLine]", "green", " ", "arrow", " ", 
         "is", " ", "part", " ", "of", " ", "the", " ", "victim", " ", "rule",
          " ", "to", " ", "match"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"keyWithVolume_", 
          StyleBox["\[Rule]",
           FontSize->36,
           Background->RGBColor[0.88, 1, 0.88]], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"amount_", "?", "NumberQ"}], "*", 
           RowBox[{"volume", ":", 
            RowBox[{"(", 
             RowBox[{
             "Teaspoon", "|", "Tablespoon", "|", "Cup", "|", "FluidOunce", 
              "|", "Pint", "|", "Gallon"}], ")"}]}]}]}], ")"}], 
        StyleBox["\[RuleDelayed]",
         FontSize->36,
         Background->RGBColor[1, 0.9, 1]], "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"rewrite", " ", "for", " ", "the", " ", "victim", " ", 
           RowBox[{"rule", " ", "--"}], " ", "pink", " ", "arrow", " ", "is", 
           " ", "the", " ", "meta"}], "-", 
          RowBox[{
          "rule", "\[IndentingNewLine]", "green", " ", "arrow", " ", "is", 
           " ", "part", " ", "of", " ", "rewrite"}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"keyWithVolume", 
         StyleBox["\[Rule]",
          FontSize->36,
          Background->RGBColor[0.88, 1, 0.88]], 
         RowBox[{
         "amount", "  ", "*", "  ", "volume", "  ", "*", 
          "\[IndentingNewLine]", 
          RowBox[{"gramPerTargetVolumeFromDensityQuote", "[", 
           RowBox[{"volume", ",", 
            RowBox[{"getDensityQuote", "[", 
             RowBox[{"\"\<name\>\"", "/.", "nfl"}], "]"}]}], "]"}]}]}]}], 
       "}"}]}], ")"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.544457150162998*^9, 3.5444571864986315`*^9}, {
   3.5444573233863187`*^9, 3.544457342993356*^9}, {3.5444573756243563`*^9, 
   3.544457377911356*^9}, {3.5444574350613565`*^9, 3.5444575019383564`*^9}, {
   3.544457679405922*^9, 3.5444577319081717`*^9}, {3.544457770840064*^9, 
   3.5444578335303326`*^9}, {3.544457976954674*^9, 3.544457980249003*^9}, {
   3.544458101200097*^9, 3.5444581114571223`*^9}, {3.5444582079257684`*^9, 
   3.544458217725748*^9}, {3.544458658448184*^9, 3.544458712658184*^9}, {
   3.544459563646378*^9, 3.5444596802851458`*^9}, {3.544459866302432*^9, 
   3.544459866614463*^9}, {3.5444599772985773`*^9, 3.5444600095325584`*^9}, {
   3.544461134278672*^9, 3.544461140877672*^9}, {3.5444613062386723`*^9, 
   3.5444613249566717`*^9}, {3.544463218225037*^9, 3.5444632475817094`*^9}, 
   3.54446330039272*^9, {3.5445320472870703`*^9, 3.5445320662050705`*^9}, {
   3.5445385411024756`*^9, 3.5445385538774757`*^9}, {3.5445420276093974`*^9, 
   3.5445420372883587`*^9}, {3.5445468949253716`*^9, 
   3.5445468966943717`*^9}, {3.544560869612589*^9, 3.5445608953948517`*^9}, {
   3.5447315003733644`*^9, 3.5447315410993643`*^9}, {3.5448846331777754`*^9, 
   3.5448847078945894`*^9}, {3.5448847746509724`*^9, 
   3.5448848210179725`*^9}, {3.544885035206972*^9, 3.544885069670472*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["NORMALIZE, SCALE, ADD", "Subsection",
 CellChangeTimes->{{3.5447539692925696`*^9, 3.5447539753719172`*^9}, {
  3.5448851228659725`*^9, 3.5448851325934725`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"nflList", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{"name", ",", 
       RowBox[{"nfls", "[", "name", "]"}]}], "]"}], ",", "nflNames"}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5445471115323715`*^9, 3.5445471502023716`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"canonicalizedNfls", "=", 
   RowBox[{"canonicalizeUnits", "/@", "nflList"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5445459966771035`*^9, 3.544546014459882*^9}, {
   3.5445460458620214`*^9, 3.544546048263262*^9}, {3.544546101472582*^9, 
   3.5445461674671807`*^9}, {3.5445462270071344`*^9, 
   3.5445462603524685`*^9}, {3.544549454640689*^9, 3.5445494616163664`*^9}, 
   3.5445605834457245`*^9, 3.5445607747348514`*^9, {3.544731958780018*^9, 
   3.5447319757247124`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"norms", "=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"\"\<serving size\>\"", "/", "Gram"}], "/.", "#"}], "&"}], 
    ")"}], "/@", "canonicalizedNfls"}]}]], "Input",
 CellChangeTimes->{{3.5445462804884815`*^9, 3.54454632347478*^9}, {
  3.544546388694301*^9, 3.544546412815713*^9}, {3.5445469233583717`*^9, 
  3.5445469957703714`*^9}, {3.5445470501043715`*^9, 3.5445470582753716`*^9}, {
  3.54454866527376*^9, 3.5445486666088934`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "216.`", ",", "124.`", ",", "273.12`", ",", "82.`", ",", "160.`", ",", 
   "186.`", ",", "101.`", ",", "6.299999999999999`", ",", "1.`", ",", "2.`", 
   ",", "128.`", ",", "100.`"}], "}"}]], "Output",
 CellChangeTimes->{{3.5445463161320457`*^9, 3.5445463245798903`*^9}, {
   3.5445463911485467`*^9, 3.5445464140488367`*^9}, 3.54454670483527*^9, 
   3.544546857337372*^9, {3.5445469139423714`*^9, 3.5445469258503714`*^9}, {
   3.5445469683193717`*^9, 3.544546996528372*^9}, 3.5445470591783714`*^9, 
   3.5445472275703716`*^9, 3.5445486673379664`*^9, 3.5445494632303667`*^9, 
   3.544560548009181*^9, 3.544560874634082*^9, 3.5447315981963644`*^9, 
   3.544731889608102*^9, 3.544731995344674*^9, 3.544732072882427*^9, 
   3.5447351926616077`*^9, 3.5448784051987085`*^9, 3.544885264763106*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["This is vector scale!", "Subsubsection",
 CellChangeTimes->{{3.544885527239785*^9, 3.544885530406562*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"scaleNfl", "[", 
   RowBox[{"nfl_", ",", "scalar_"}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{"Function", "[", 
     RowBox[{"line", ",", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
         "line", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         "===", "\"\<name\>\""}], ",", "\[IndentingNewLine]", "line", ",", 
        RowBox[{"(*", " ", 
         RowBox[{"skip", " ", "the", " ", "name", " ", "line"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
         "line", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         "\[Rule]", 
         RowBox[{
          RowBox[{
          "line", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "*",
           "scalar"}]}]}], "]"}]}], "]"}], ",", "nfl"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5445495750783663`*^9, 3.544549594410366*^9}, {
   3.5445497551543665`*^9, 3.544549814856366*^9}, 3.5445606578671656`*^9, {
   3.5447316141773643`*^9, 3.5447316202313643`*^9}, 3.544885515465208*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"normalizedNfls", "=", 
   RowBox[{"MapThread", "[", 
    RowBox[{"scaleNfl", ",", 
     RowBox[{"{", 
      RowBox[{"canonicalizedNfls", ",", 
       RowBox[{"1", "/", "norms"}]}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5445470090193715`*^9, 3.5445470310083714`*^9}, 
   3.5445472458223715`*^9, {3.544548622177451*^9, 3.544548688468079*^9}, {
   3.5445490647527037`*^9, 3.5445490791201406`*^9}, {3.544549127905019*^9, 
   3.544549163452573*^9}, {3.544549203140541*^9, 3.5445493420694327`*^9}, {
   3.5445498221613665`*^9, 3.5445498400063667`*^9}, 3.544560601351515*^9, {
   3.5445606648338623`*^9, 3.544560665769956*^9}, 3.544560766887067*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"scaledNfls", "=", 
   RowBox[{"MapThread", "[", 
    RowBox[{"scaleNfl", ",", 
     RowBox[{"{", 
      RowBox[{"normalizedNfls", ",", 
       RowBox[{
        RowBox[{"recipeInGrams", "/", "Gram"}], "/", "nflNames"}]}], "}"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5445463587753096`*^9, 3.54454635998143*^9}, {
   3.544549375268752*^9, 3.544549396687894*^9}, {3.544549847469366*^9, 
   3.5445498848683662`*^9}, 3.5445607590712852`*^9, {3.5445608280981874`*^9, 
   3.5445608415465317`*^9}, {3.5447319197301135`*^9, 3.5447319216103015`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["This is vector sum!", "Subsubsection",
 CellChangeTimes->{{3.5448855355115137`*^9, 3.544885538111771*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"sumNfls", "[", 
   RowBox[{"nfl1_", ",", "nfl2_"}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"MapThread", "[", 
   RowBox[{
    RowBox[{"Function", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"line1", ",", "line2"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
         "line1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "===", 
         RowBox[{
         "line2", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
        ",", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"don", "'"}], "t", " ", "add", " ", "up", " ", "dimensions",
           " ", "that", " ", 
          RowBox[{"don", "'"}], "t", " ", "match"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{
          "line1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
          "\[Rule]", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
            "line1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
            "+", 
            RowBox[{
            "line2", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}],
            ")"}]}], "//", "Chop"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Throw", "[", "\"\<foo\>\"", "]"}]}], "]"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"nfl1", ",", "nfl2"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5445499196553664`*^9, 3.5445499504003663`*^9}, {
  3.544550558212366*^9, 3.5445506481593666`*^9}, {3.544550716653366*^9, 
  3.5445507208903666`*^9}, {3.5445609554798207`*^9, 3.5445609866524663`*^9}, {
  3.544885330920687*^9, 3.5448853344970126`*^9}, {3.5448854940027943`*^9, 
  3.5448855084105587`*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["The final recipe feeds six", "Subsection",
 CellChangeTimes->{{3.54475399377997*^9, 3.5447540014444084`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"scaleNfl", "[", 
   RowBox[{
    RowBox[{"Fold", "[", 
     RowBox[{"sumNfls", ",", 
      RowBox[{"First", "[", "scaledNfls", "]"}], ",", 
      RowBox[{"Rest", "[", "scaledNfls", "]"}]}], "]"}], ",", 
    RowBox[{"1", "/", "6"}]}], "]"}], "//", "gridRules"}]], "Input",
 CellChangeTimes->{{3.5445506545893664`*^9, 3.5445506802043667`*^9}, {
  3.544560720068385*^9, 3.5445607313405123`*^9}, {3.544732118830022*^9, 
  3.544732120550194*^9}, {3.5447361818431854`*^9, 3.544736192548798*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"name\"\>", 
     RowBox[{"\<\"bell pepper\"\>", "+", "\<\"black pepper\"\>", 
      "+", "\<\"dried basil\"\>", "+", "\<\"eggplant\"\>", 
      "+", "\<\"olive oil\"\>", "+", "\<\"onion\"\>", 
      "+", "\<\"parmesan cheese\"\>", "+", "\<\"pasta\"\>", 
      "+", "\<\"salt\"\>", "+", "\<\"stewed tomato\"\>", "+", "\<\"sugar\"\>",
       "+", "\<\"zucchini\"\>"}]},
    {"\<\"serving size\"\>", 
     RowBox[{"368.0191770399304`", " ", "Gram"}]},
    {"\<\"total calories\"\>", 
     RowBox[{"309.7227754282057`", " ", "Calorie"}]},
    {"\<\"fat calories\"\>", 
     RowBox[{"58.4133383964233`", " ", "Calorie"}]},
    {"\<\"total fat\"\>", 
     RowBox[{"6.546034824927805`", " ", "Gram"}]},
    {"\<\"% daily total fat\"\>", 
     RowBox[{"9.89978751878877`", " ", "Percent"}]},
    {"\<\"saturated fat\"\>", 
     RowBox[{"1.595944872921537`", " ", "Gram"}]},
    {"\<\"% daily saturated fat\"\>", 
     RowBox[{"7.535844268046053`", " ", "Percent"}]},
    {"\<\"trans fat\"\>", "0"},
    {"\<\"cholesterol\"\>", 
     RowBox[{"44.422033854166656`", " ", "Gram"}]},
    {"\<\"% daily cholesterol\"\>", 
     RowBox[{"14.795122395833332`", " ", "Percent"}]},
    {"\<\"sodium\"\>", 
     RowBox[{"1.7696469454839738`", " ", "Gram"}]},
    {"\<\"% daily sodium\"\>", 
     RowBox[{"73.60005705961223`", " ", "Percent"}]},
    {"\<\"total carbohydrates\"\>", 
     RowBox[{"53.54329899723965`", " ", "Gram"}]},
    {"\<\"% daily carbohydrates\"\>", 
     RowBox[{"17.71026658906363`", " ", "Percent"}]},
    {"\<\"dietary fiber\"\>", 
     RowBox[{"6.846302669108374`", " ", "Gram"}]},
    {"\<\"%daily dietary fiber\"\>", 
     RowBox[{"25.730092505835948`", " ", "Percent"}]},
    {"\<\"sugars\"\>", 
     RowBox[{"5.852507655826558`", " ", "Gram"}]},
    {"\<\"protein\"\>", 
     RowBox[{"12.099675916059592`", " ", "Gram"}]},
    {"\<\"% daily protein\"\>", 
     RowBox[{"2.76580487804878`", " ", "Percent"}]},
    {"\<\"vitamin A\"\>", 
     RowBox[{"13.434190447951046`", " ", "Percent"}]},
    {"\<\"vitamin C\"\>", 
     RowBox[{"107.62081444028549`", " ", "Percent"}]},
    {"\<\"calcium\"\>", 
     RowBox[{"11.903093730966084`", " ", "Percent"}]},
    {"\<\"iron\"\>", 
     RowBox[{"19.675200109592765`", " ", "Percent"}]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxBackground->{"Columns" -> {
       RGBColor[1, 0.9, 0.8], {
        RGBColor[1, 1, 0.85]}}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{3.5447321214492836`*^9, 3.5447351928506184`*^9, 
  3.5447361934488497`*^9, 3.5448784053677254`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
AutoGeneratedPackage->None,
ScreenStyleEnvironment->"SlideShow",
WindowSize->{1280, 960},
WindowMargins->{{29, Automatic}, {Automatic, 42}},
PrintingCopies->1,
PrintingPageRange->{32000, 32000},
PrintingOptions->{"Magnification"->0.85,
"PaperOrientation"->"Landscape",
"PaperSize"->{931.7647058823529, 720.}},
ShowSelection->True,
CommonDefaultFormatTypes->{"Output"->StandardForm},
PrintPrecision->5,
Magnification->1,
TooltipBoxOptions->{TooltipDelay->Automatic},
FrontEndVersion->"8.0 for Microsoft Windows (64-bit) (October 6, 2011)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "SlideShowHeader"->{
  Cell[579, 22, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[2314, 78, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[42776, 809, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[47097, 936, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[50609, 1044, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[60933, 1282, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[71605, 1559, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[75474, 1655, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[78637, 1743, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[81968, 1837, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[84807, 1938, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[88868, 2037, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[92745, 2138, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[192176, 3784, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[194079, 3834, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[197378, 3930, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[385742, 7033, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[388460, 7113, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[391023, 7191, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[392550, 7237, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[396747, 7351, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[400614, 7453, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[404240, 7562, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[406471, 7638, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[408262, 7695, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[410308, 7743, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[413964, 7842, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[417705, 7935, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[419805, 7996, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[424200, 8117, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[428270, 8231, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[432704, 8323, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[435870, 8415, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[440466, 8530, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[444837, 8636, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[449235, 8749, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[453708, 8862, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[458257, 8977, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[462550, 9090, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[466878, 9200, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[470910, 9303, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[474897, 9405, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[479300, 9517, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[483769, 9632, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[489512, 9771, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[496546, 9955, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"SlideShowHeader", 500770, 10069}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[646, 25, 274, 6, 246, "Title"],
Cell[923, 33, 172, 5, 159, "Subtitle"],
Cell[1098, 40, 325, 8, 235, "Subsection"],
Cell[CellGroupData[{
Cell[1448, 52, 186, 4, 92, "Subsection"],
Cell[1637, 58, 628, 14, 19, "Input",
 CellOpen->False,
 InitializationCell->True]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2314, 78, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[2403, 83, 210, 3, 119, "Section"],
Cell[2616, 88, 494, 8, 36, "Subsection"],
Cell[CellGroupData[{
Cell[3135, 100, 517, 11, 28, "Subsection"],
Cell[CellGroupData[{
Cell[3677, 115, 19069, 327, 19, "Input",
 CellOpen->False],
Cell[22749, 444, 19954, 357, 436, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[42776, 809, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[42865, 814, 188, 4, 119, "Section"],
Cell[CellGroupData[{
Cell[43078, 822, 320, 5, 63, "Subsection"],
Cell[CellGroupData[{
Cell[43423, 831, 113, 1, 41, "Item"],
Cell[43539, 834, 161, 2, 41, "Item"],
Cell[43703, 838, 311, 4, 41, "Item"],
Cell[44017, 844, 288, 5, 41, "Item"],
Cell[44308, 851, 199, 4, 41, "Item"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[44556, 861, 229, 4, 63, "Subsection"],
Cell[CellGroupData[{
Cell[44810, 869, 294, 5, 41, "Item"],
Cell[45107, 876, 279, 6, 41, "Subitem"],
Cell[45389, 884, 206, 4, 41, "Item"],
Cell[45598, 890, 382, 7, 41, "Item"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[46029, 903, 171, 2, 63, "Subsection"],
Cell[CellGroupData[{
Cell[46225, 909, 197, 4, 41, "Item"],
Cell[46425, 915, 483, 10, 41, "Item"],
Cell[46911, 927, 113, 1, 41, "Item"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[47097, 936, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[47186, 941, 270, 3, 119, "Section"],
Cell[CellGroupData[{
Cell[47481, 948, 142, 1, 63, "Subsection"],
Cell[47626, 951, 373, 6, 41, "Item"]
}, Open  ]],
Cell[48014, 960, 244, 4, 63, "Subsection"],
Cell[CellGroupData[{
Cell[48283, 968, 173, 2, 49, "Subsection"],
Cell[48459, 972, 182, 2, 41, "Item"]
}, Open  ]],
Cell[48656, 977, 99, 1, 63, "Subsection"],
Cell[CellGroupData[{
Cell[48780, 982, 113, 1, 49, "Subsection"],
Cell[CellGroupData[{
Cell[48918, 987, 299, 6, 41, "Item"],
Cell[49220, 995, 365, 8, 41, "Item"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[49634, 1009, 124, 1, 63, "Subsection"],
Cell[CellGroupData[{
Cell[49783, 1014, 275, 6, 41, "Item"],
Cell[50061, 1022, 209, 5, 41, "Item"]
}, Open  ]]
}, Open  ]],
Cell[50297, 1031, 263, 7, 63, "Subsection"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[50609, 1044, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[50698, 1049, 230, 5, 119, "Section"],
Cell[CellGroupData[{
Cell[50953, 1058, 300, 5, 63, "Subsection"],
Cell[CellGroupData[{
Cell[51278, 1067, 4238, 79, 19, "Input",
 CellOpen->False,
 InitializationCell->True],
Cell[55519, 1148, 3895, 85, 389, "Output"]
}, Open  ]]
}, Open  ]],
Cell[59441, 1237, 454, 9, 63, "Subsection"],
Cell[59898, 1248, 632, 17, 49, "Subsection"],
Cell[60533, 1267, 205, 6, 49, "Subsection"],
Cell[60741, 1275, 143, 1, 49, "Subsection"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[60933, 1282, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[61022, 1287, 156, 2, 119, "Section"],
Cell[CellGroupData[{
Cell[61203, 1293, 3687, 77, 19, "Input",
 CellOpen->False],
Cell[64893, 1372, 4718, 125, 320, "Output"]
}, Open  ]],
Cell[69626, 1500, 482, 9, 106, "Subsection"],
Cell[70111, 1511, 314, 7, 49, "Subsection"],
Cell[CellGroupData[{
Cell[70450, 1522, 183, 4, 49, "Subsection"],
Cell[CellGroupData[{
Cell[70658, 1530, 200, 4, 41, "Item"],
Cell[70861, 1536, 176, 4, 41, "Item"]
}, Open  ]]
}, Open  ]],
Cell[71064, 1544, 492, 9, 63, "Subsection"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[71605, 1559, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[71694, 1564, 220, 3, 119, "Section"],
Cell[71917, 1569, 313, 7, 63, "Subsection"],
Cell[72233, 1578, 244, 4, 49, "Subsection"],
Cell[CellGroupData[{
Cell[72502, 1586, 273, 3, 49, "Subsection"],
Cell[CellGroupData[{
Cell[72800, 1593, 346, 7, 95, "Code"],
Cell[73149, 1602, 807, 12, 50, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[74005, 1620, 271, 3, 63, "Subsection"],
Cell[CellGroupData[{
Cell[74301, 1627, 330, 6, 66, "Code"],
Cell[74634, 1635, 767, 12, 50, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[75474, 1655, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[75563, 1660, 176, 4, 119, "Section"],
Cell[CellGroupData[{
Cell[75764, 1668, 297, 8, 63, "Subsection"],
Cell[CellGroupData[{
Cell[76086, 1680, 381, 6, 101, "Code"],
Cell[76470, 1688, 722, 11, 50, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[77241, 1705, 215, 3, 63, "Subsection"],
Cell[CellGroupData[{
Cell[77481, 1712, 376, 7, 101, "Code"],
Cell[77860, 1721, 463, 7, 50, "Output"]
}, Open  ]]
}, Open  ]],
Cell[78350, 1732, 238, 5, 63, "Subsection"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[78637, 1743, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[78726, 1748, 240, 5, 119, "Section"],
Cell[CellGroupData[{
Cell[78991, 1757, 1499, 34, 255, "Input"],
Cell[80493, 1793, 1414, 37, 382, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[81968, 1837, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[82057, 1842, 129, 3, 119, "Section"],
Cell[CellGroupData[{
Cell[82211, 1849, 159, 2, 66, "Code"],
Cell[82373, 1853, 210, 5, 50, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[82620, 1863, 124, 1, 63, "Subsection"],
Cell[CellGroupData[{
Cell[82769, 1868, 201, 4, 66, "Code"],
Cell[82973, 1874, 210, 5, 50, "Output"]
}, Open  ]]
}, Open  ]],
Cell[83210, 1883, 134, 1, 63, "Subsection"],
Cell[83347, 1886, 183, 4, 49, "Subsection"],
Cell[CellGroupData[{
Cell[83555, 1894, 188, 4, 49, "Subsection"],
Cell[CellGroupData[{
Cell[83768, 1902, 247, 5, 41, "Item"],
Cell[84018, 1909, 112, 1, 41, "Item"],
Cell[84133, 1912, 205, 4, 41, "Item"]
}, Open  ]]
}, Open  ]],
Cell[84365, 1920, 393, 12, 63, "Subsection"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[84807, 1938, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[84896, 1943, 279, 5, 119, "Section"],
Cell[CellGroupData[{
Cell[85200, 1952, 180, 4, 63, "Subsection"],
Cell[CellGroupData[{
Cell[85405, 1960, 630, 10, 96, "Code"],
Cell[86038, 1972, 703, 11, 75, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[86790, 1989, 192, 4, 63, "Subsection"],
Cell[CellGroupData[{
Cell[87007, 1997, 788, 16, 96, "Code"],
Cell[87798, 2015, 997, 14, 50, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[88868, 2037, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[88957, 2042, 239, 3, 119, "Section"],
Cell[CellGroupData[{
Cell[89221, 2049, 235, 3, 63, "Subsection"],
Cell[CellGroupData[{
Cell[89481, 2056, 1843, 38, 289, "Input"],
Cell[91327, 2096, 1345, 34, 382, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[92745, 2138, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[92834, 2143, 156, 2, 119, "Section"],
Cell[92993, 2147, 99134, 1631, 747, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[192176, 3784, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[192265, 3789, 264, 3, 119, "Section"],
Cell[192532, 3794, 1498, 34, 357, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[194079, 3834, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[194168, 3839, 171, 2, 119, "Section"],
Cell[CellGroupData[{
Cell[194364, 3845, 376, 7, 50, "Input"],
Cell[194743, 3854, 1247, 33, 384, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[196027, 3892, 207, 3, 63, "Subsection"],
Cell[CellGroupData[{
Cell[196259, 3899, 371, 6, 66, "Code"],
Cell[196633, 3907, 445, 7, 50, "Output"]
}, Open  ]]
}, Open  ]],
Cell[197105, 3918, 224, 6, 63, "Subsection"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[197378, 3930, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[197467, 3935, 117, 1, 119, "Section"],
Cell[197587, 3938, 188106, 3089, 732, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[385742, 7033, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[385831, 7038, 229, 5, 71, "Section"],
Cell[386063, 7045, 271, 5, 36, "Subsection"],
Cell[386337, 7052, 260, 5, 28, "Subsection"],
Cell[386600, 7059, 370, 6, 28, "Subsection"],
Cell[CellGroupData[{
Cell[386995, 7069, 266, 5, 28, "Subsection"],
Cell[387264, 7076, 157, 3, 23, "Item"]
}, Open  ]],
Cell[387436, 7082, 284, 6, 36, "Subsection"],
Cell[CellGroupData[{
Cell[387745, 7092, 423, 7, 28, "Subsection"],
Cell[388171, 7101, 228, 5, 23, "Item"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[388460, 7113, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[388549, 7118, 166, 2, 71, "Section"],
Cell[388718, 7122, 261, 8, 36, "Subsection"],
Cell[CellGroupData[{
Cell[389004, 7134, 225, 4, 28, "Subsection"],
Cell[CellGroupData[{
Cell[389254, 7142, 389, 7, 47, "Code"],
Cell[389646, 7151, 209, 3, 30, "Output"]
}, Open  ]]
}, Open  ]],
Cell[389882, 7158, 158, 4, 36, "Subsection"],
Cell[390043, 7164, 140, 2, 28, "Subsection"],
Cell[390186, 7168, 180, 2, 28, "Subsection"],
Cell[390369, 7172, 166, 2, 28, "Subsection"],
Cell[390538, 7176, 197, 4, 28, "Subsection"],
Cell[390738, 7182, 236, 3, 28, "Subsection"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[391023, 7191, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[391112, 7196, 158, 2, 71, "Section"],
Cell[391273, 7200, 142, 1, 36, "Subsection"],
Cell[391418, 7203, 265, 5, 28, "Subsection"],
Cell[391686, 7210, 204, 3, 28, "Subsection"],
Cell[391893, 7215, 99, 1, 28, "Subsection"],
Cell[391995, 7218, 113, 1, 28, "Subsection"],
Cell[392111, 7221, 124, 1, 28, "Subsection"],
Cell[392238, 7224, 263, 7, 28, "Subsection"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[392550, 7237, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[392639, 7242, 264, 3, 71, "Section"],
Cell[CellGroupData[{
Cell[392928, 7249, 142, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[393095, 7254, 101, 1, 47, "Code"],
Cell[393199, 7257, 463, 7, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[393699, 7269, 123, 1, 47, "Code"],
Cell[393825, 7272, 1274, 26, 50, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[395136, 7303, 107, 1, 47, "Code"],
Cell[395246, 7306, 1234, 31, 50, "Output"]
}, Open  ]],
Cell[396495, 7340, 191, 4, 47, "Code"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[396747, 7351, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[396836, 7356, 219, 3, 71, "Section"],
Cell[CellGroupData[{
Cell[397080, 7363, 138, 2, 36, "Subsection"],
Cell[CellGroupData[{
Cell[397243, 7369, 151, 2, 47, "Code"],
Cell[397397, 7373, 627, 8, 50, "Output"]
}, Open  ]]
}, Open  ]],
Cell[398051, 7385, 305, 5, 36, "Subsection"],
Cell[CellGroupData[{
Cell[398381, 7394, 241, 4, 28, "Subsection"],
Cell[398625, 7400, 1928, 46, 339, "Code"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[400614, 7453, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[400703, 7458, 99, 1, 119, "Section"],
Cell[400805, 7461, 243, 3, 63, "Subsection"],
Cell[401051, 7466, 243, 4, 49, "Subsection"],
Cell[401297, 7472, 197, 4, 49, "Subsection"],
Cell[CellGroupData[{
Cell[401519, 7480, 255, 5, 49, "Subsection"],
Cell[401777, 7487, 136, 3, 41, "Item"]
}, Open  ]],
Cell[CellGroupData[{
Cell[401950, 7495, 111, 1, 63, "Subsection"],
Cell[402064, 7498, 380, 6, 69, "Item"]
}, Open  ]],
Cell[CellGroupData[{
Cell[402481, 7509, 340, 7, 63, "Subsection"],
Cell[CellGroupData[{
Cell[402846, 7520, 226, 5, 41, "Item"],
Cell[403075, 7527, 256, 6, 41, "Item"],
Cell[403334, 7535, 144, 1, 41, "Item"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[403527, 7542, 278, 5, 63, "Subsection"],
Cell[403808, 7549, 371, 6, 50, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[404240, 7562, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[404329, 7567, 110, 1, 119, "Section"],
Cell[CellGroupData[{
Cell[404464, 7572, 119, 1, 63, "Subsection"],
Cell[404586, 7575, 232, 5, 41, "Item"]
}, Open  ]],
Cell[CellGroupData[{
Cell[404855, 7585, 106, 1, 63, "Subsection"],
Cell[404964, 7588, 119, 1, 41, "Item"]
}, Open  ]],
Cell[CellGroupData[{
Cell[405120, 7594, 139, 1, 63, "Subsection"],
Cell[405262, 7597, 134, 1, 41, "Item"]
}, Open  ]],
Cell[CellGroupData[{
Cell[405433, 7603, 218, 4, 63, "Subsection"],
Cell[405654, 7609, 133, 1, 41, "Item"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[405836, 7616, 105, 1, 119, "Section"],
Cell[405944, 7619, 164, 2, 63, "Subsection"],
Cell[406111, 7623, 311, 9, 49, "Subsection"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[406471, 7638, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[406560, 7643, 208, 4, 119, "Section"],
Cell[406771, 7649, 250, 5, 63, "Subsection"],
Cell[407024, 7656, 356, 10, 49, "Subsection"],
Cell[407383, 7668, 244, 6, 49, "Subsection"],
Cell[407630, 7676, 170, 4, 92, "Subsection"],
Cell[407803, 7682, 410, 7, 92, "Subsection"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[408262, 7695, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[408351, 7700, 221, 3, 63, "Subsection"],
Cell[408575, 7705, 1684, 32, 475, "Code"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[410308, 7743, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[410397, 7748, 182, 4, 63, "Subsection"],
Cell[410582, 7754, 1323, 28, 19, "Input",
 CellOpen->False],
Cell[411908, 7784, 2007, 52, 271, "Code"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[413964, 7842, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[414053, 7847, 352, 8, 106, "Subsection"],
Cell[414408, 7857, 1509, 27, 187, "Input"],
Cell[415920, 7886, 89, 1, 85, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[416046, 7892, 280, 7, 106, "Subsection"],
Cell[416329, 7901, 1327, 28, 289, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[417705, 7935, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[417794, 7940, 151, 2, 63, "Subsection"],
Cell[CellGroupData[{
Cell[417970, 7946, 499, 10, 85, "Input"],
Cell[418472, 7958, 1272, 31, 217, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[419805, 7996, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[419894, 8001, 179, 4, 63, "Subsection"],
Cell[CellGroupData[{
Cell[420098, 8009, 107, 1, 44, "Subsubsection"],
Cell[420208, 8012, 596, 15, 85, "Input"],
Cell[420807, 8029, 1832, 40, 221, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[422688, 8075, 159, 2, 63, "Subsection"],
Cell[CellGroupData[{
Cell[422872, 8081, 536, 10, 85, "Input"],
Cell[423411, 8093, 728, 17, 91, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[424200, 8117, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[424289, 8122, 156, 2, 63, "Subsection"],
Cell[CellGroupData[{
Cell[424470, 8128, 548, 14, 119, "Input"],
Cell[425021, 8144, 1422, 35, 407, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[426492, 8185, 155, 2, 63, "Subsection"],
Cell[CellGroupData[{
Cell[426672, 8191, 505, 13, 85, "Input"],
Cell[427180, 8206, 896, 13, 50, "Output"]
}, Open  ]],
Cell[428091, 8222, 130, 3, 47, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[428270, 8231, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[428359, 8236, 172, 2, 63, "Subsection"],
Cell[428534, 8240, 318, 7, 66, "Code"],
Cell[428855, 8249, 3800, 68, 407, "Code"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[432704, 8323, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[432793, 8328, 101, 1, 63, "Subsection"],
Cell[CellGroupData[{
Cell[432919, 8333, 1196, 27, 187, "Input"],
Cell[434118, 8362, 1691, 46, 807, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[435870, 8415, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[435959, 8420, 122, 1, 63, "Subsection"],
Cell[CellGroupData[{
Cell[436106, 8425, 1649, 33, 187, "Input"],
Cell[437758, 8460, 2647, 63, 807, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[440466, 8530, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[440555, 8535, 98, 1, 63, "Subsection"],
Cell[CellGroupData[{
Cell[440678, 8540, 1866, 36, 187, "Input"],
Cell[442547, 8578, 2229, 51, 805, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[444837, 8636, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[444926, 8641, 103, 1, 63, "Subsection"],
Cell[CellGroupData[{
Cell[445054, 8646, 1654, 34, 187, "Input"],
Cell[446711, 8682, 2463, 60, 805, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[449235, 8749, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[449324, 8754, 106, 1, 63, "Subsection"],
Cell[CellGroupData[{
Cell[449455, 8759, 1737, 35, 187, "Input"],
Cell[451195, 8796, 2452, 59, 807, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[453708, 8862, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[453797, 8867, 172, 2, 63, "Subsection"],
Cell[CellGroupData[{
Cell[453994, 8873, 1700, 34, 187, "Input"],
Cell[455697, 8909, 2499, 61, 805, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[458257, 8977, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[458346, 8982, 105, 1, 63, "Subsection"],
Cell[CellGroupData[{
Cell[458476, 8987, 1430, 31, 187, "Input"],
Cell[459909, 9020, 2580, 63, 805, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[462550, 9090, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[462639, 9095, 179, 2, 63, "Subsection"],
Cell[CellGroupData[{
Cell[462843, 9101, 1535, 32, 187, "Input"],
Cell[464381, 9135, 2436, 58, 805, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[466878, 9200, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[466967, 9205, 172, 2, 63, "Subsection"],
Cell[CellGroupData[{
Cell[467164, 9211, 1458, 31, 187, "Input"],
Cell[468625, 9244, 2224, 52, 807, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[470910, 9303, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[470999, 9308, 181, 2, 63, "Subsection"],
Cell[CellGroupData[{
Cell[471205, 9314, 1465, 30, 221, "Input"],
Cell[472673, 9346, 2163, 52, 805, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[474897, 9405, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[474986, 9410, 162, 2, 63, "Subsection"],
Cell[CellGroupData[{
Cell[475173, 9416, 1560, 31, 255, "Input"],
Cell[476736, 9449, 2503, 61, 805, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[479300, 9517, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[479389, 9522, 181, 2, 63, "Subsection"],
Cell[CellGroupData[{
Cell[479595, 9528, 1541, 32, 221, "Input"],
Cell[481139, 9562, 2569, 63, 805, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[483769, 9632, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[483858, 9637, 185, 2, 63, "Subsection"],
Cell[CellGroupData[{
Cell[484068, 9643, 162, 2, 44, "Subsubsection"],
Cell[CellGroupData[{
Cell[484255, 9649, 131, 1, 41, "Item"],
Cell[484389, 9652, 136, 1, 41, "Item"],
Cell[484528, 9655, 278, 6, 41, "Subitem"],
Cell[484809, 9663, 227, 5, 41, "Item"]
}, Open  ]],
Cell[485051, 9671, 4400, 93, 527, "Input"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[489512, 9771, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[489601, 9776, 166, 2, 63, "Subsection"],
Cell[489770, 9780, 318, 9, 50, "Input"],
Cell[490091, 9791, 508, 9, 50, "Input"],
Cell[CellGroupData[{
Cell[490624, 9804, 487, 11, 50, "Input"],
Cell[491114, 9817, 831, 13, 50, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[491982, 9835, 112, 1, 44, "Subsubsection"],
Cell[492097, 9838, 1125, 27, 153, "Input"],
Cell[493225, 9867, 696, 13, 50, "Input"],
Cell[493924, 9882, 592, 13, 50, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[494553, 9900, 112, 1, 44, "Subsubsection"],
Cell[494668, 9903, 1817, 45, 221, "Input"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[496546, 9955, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[496635, 9960, 115, 1, 63, "Subsection"],
Cell[CellGroupData[{
Cell[496775, 9965, 524, 11, 85, "Input"],
Cell[497302, 9978, 2737, 64, 880, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
